=== AI KNOWLEDGE BASE CODE CONTEXT ===
Generated on: 2025-04-14 14:55:25
Total files processed: 48

=== COMPONENT COMPLEXITY ===
(Components with complexity > 10, sorted by complexity)
Component Name | Complexity | File
--------------|------------|-----
SAMPLE_DEVICES | 58 | index.tsx
Dashboard | 58 | index.tsx
GlassCard | 55 | devices.tsx
Devices | 55 | devices.tsx
TestDataScreen | 34 | TestDataScreen.tsx
GlassCard | 32 | livemonitor.tsx
LiveMonitorScreen | 32 | livemonitor.tsx
RootLayoutNav | 23 | _layout.tsx
RootLayout | 16 | _layout.tsx
REPORTS | 14 | reports.tsx
GlassCard | 14 | reports.tsx
ReportsScreen | 14 | reports.tsx
GlassCard | 12 | settings.tsx
SettingsScreen | 12 | settings.tsx

Complexity Guidelines:
- 0-5: Simple component
- 6-10: Moderate complexity
- 11-20: Complex component
- 21+: Very complex, consider refactoring

=== CUSTOM HOOKS ===
Hook: useAppContext (from AppProvider.tsx)
  Uses hooks:
    - useContext
    - useStorageService
    - useDeviceService
    - useBluetoothService
    - useAppSetupService
    - useAthleteRepository
    - useSensorDataRepository

Hook: useStorageService (from AppProvider.tsx)
  Uses hooks:
    - useAppContext
    - useDeviceService
    - useAppContext
    - useBluetoothService
    - useAppContext
    - useAppSetupService
    - useAppContext
    - useAthleteRepository
    - useAppContext
    - useSensorDataRepository
    - useAppContext

Hook: useDeviceService (from AppProvider.tsx)
  Uses hooks:
    - useAppContext
    - useBluetoothService
    - useAppContext
    - useAppSetupService
    - useAppContext
    - useAthleteRepository
    - useAppContext
    - useSensorDataRepository
    - useAppContext

Hook: useBluetoothService (from AppProvider.tsx)
  Uses hooks:
    - useAppContext
    - useAppSetupService
    - useAppContext
    - useAthleteRepository
    - useAppContext
    - useSensorDataRepository
    - useAppContext

Hook: useAppSetupService (from AppProvider.tsx)
  Uses hooks:
    - useAppContext
    - useAthleteRepository
    - useAppContext
    - useSensorDataRepository
    - useAppContext

Hook: useAthleteRepository (from AppProvider.tsx)
  Uses hooks:
    - useAppContext
    - useSensorDataRepository
    - useAppContext

Hook: useSensorDataRepository (from AppProvider.tsx)
  Uses hooks:
    - useAppContext

Hook: useAnimatedPress (from animations.ts)
  Parameters:
    - scale: number
    - 0: any
    - 98: any
  Uses hooks:
    - useSharedValue
    - useAnimatedStyle
    - useCallback
    - useCallback

=== SERVICES ===
Service: AppSetupService (from AppSetupService.ts)
  Methods:
    - testAsyncStorage() -> Promise<boolean>
    - catch(error: any)
    - ensureInitialized() -> Promise<void>
    - if(hasLaunched: any)
    - catch(error: any)
    - resetAppState() -> Promise<void>
    - catch(error: any)
    - performFirstTimeSetup() -> Promise<void>
    - catch(error: any)
    - createSampleData(athleteRepository: AthleteRepository) -> Promise<void>
    - for(const: any, athlete: any, of: any, sampleAthletes: any)
    - catch(error: any)

Service: BluetoothService (from BluetoothService.ts)
  Methods:
    - if(nextAppState: any, active: any)
    - refreshAllDeviceStatus() -> Promise<void>
    - catch(error: any)
    - updateDeviceStatus(deviceId: string, isConnected: boolean) -> Promise<void>
    - if(savedDevice: any)
    - if(savedDevice: any, athleteId: any)
    - if(athlete: any)
    - if(athlete: any)
    - if(savedDevice: any, savedDevice: any, athleteId: any)
    - catch(error: any)
    - setupSensorCallbacks() -> void
    - handleImuData(deviceId: string, sensorId: number, data: { timestamp: number, values: number[] }) -> Promise<void>
    - catch(error: any)
    - handleAccelerometerData(deviceId: string, sensorId: number, data: { timestamp: number, values: number[] }) -> Promise<void>
    - if(magnitude: any, CONCUSSION_THRESHOLD_G: any)
    - if(device: any, athleteId: any)
    - if(athlete: any)
    - catch(error: any)
    - catch(error: any)
    - catch(error: any)
    - handleTemperatureData(deviceId: string, sensorId: number, data: { timestamp: number, values: number[] }) -> Promise<void>
    - if(temperature: any, MAX_TEMP_THRESHOLD: any, temperature: any, MIN_TEMP_THRESHOLD: any)
    - if(device: any, athleteId: any)
    - if(athlete: any)
    - catch(error: any)
    - catch(error: any)
    - handleForceData(deviceId: string, sensorId: number, data: { timestamp: number, values: number[] }) -> Promise<void>
    - catch(error: any)
    - handleHeartRateData(deviceId: string, heartRate: number) -> Promise<void>
    - if(heartRate: any, MAX_HR_THRESHOLD: any, heartRate: any, MIN_HR_THRESHOLD: any)
    - if(device: any, athleteId: any)
    - if(athlete: any)
    - catch(error: any)
    - catch(error: any)
    - handleBatteryLevel(deviceId: string, level: number) -> Promise<void>
    - if(level: any, 20: any, AppState: any, currentState: any, active: any)
    - catch(error: any)
    - updateDeviceLastSeen(deviceId: string) -> Promise<void>
    - connectToDevice(deviceId: string) -> Promise<void>
    - if(device: any)
    - catch(error: any)
    - if(hasPermission: any)
    - if(error: any)
    - if(device: any, device: any, name: any)
    - catch(error: any)
    - disconnectFromDevice(deviceId: string) -> void
    - catch(error: any)
    - getConnectedDevices() -> Map<string, Device>
    - getSavedDevices()
    - getDeviceStatuses() -> DeviceStatus[]
    - scanForDevices() -> Promise<Array<
    - if(error: any)
    - if(device: any, device: any, name: any)
    - catch(error: any)
    - startSession() -> Promise<string>
    - if(this: any, currentSession: any)
    - for(const: any, device: any, of: any, connectedDevices: any)
    - if(device: any, athleteInfo: any)
    - catch(error: any)
    - stopSession() -> Promise<void>
    - if(this: any, currentSession: any)
    - catch(error: any)

Service: DeviceService (from DeviceService.ts)
  Methods:
    - getSavedDevices() -> Promise<SavedDevice[]>
    - catch(error: any)
    - saveDevice(device: Device) -> Promise<void>
    - if(existingIndex: any, 1: any)
    - catch(error: any)
    - saveDevices(devices: Device[]) -> Promise<void>
    - for(const: any, newDevice: any, of: any, newDevices: any)
    - if(existingIndex: any, 1: any)
    - catch(error: any)
    - updateDeviceBatteryLevel(deviceId: string, batteryLevel: number) -> Promise<void>
    - if(deviceIndex: any, 1: any)
    - catch(error: any)
    - updateDeviceAthleteAssignment(deviceId: string, athleteId: string | undefined) -> Promise<void>
    - if(deviceIndex: any, 1: any)
    - catch(error: any)
    - getDeviceById(deviceId: string) -> Promise<SavedDevice | null>
    - catch(error: any)
    - error(DeviceService: any, Error: any, getting: any, device: any, by: any, ID: any, deviceId: any) -> `, error);
      return null;
    }
  }

  /**
   * Remove a device from saved devices
   * @param device Device or deviceId to remove
   */
  public async removeDevice(device: SavedDevice | string): Promise<void>
    - if(filteredDevices: any, length: any, devices: any, length: any)
    - catch(error: any)
    - clearDevices() -> Promise<void>
    - catch(error: any)

Service: StorageService (from StorageService.ts)
  Methods:
    - if(verifyValue: any, null: any)
    - if(retries: any, 0: any)
    - catch(error: any)
    - if(retries: any, 0: any)
    - if(jsonValue: any, null: any)
    - catch(parseError: any)
    - catch(error: any)
    - removeValue(key: string) -> Promise<void>
    - catch(error: any)
    - clearAll() -> Promise<void>
    - catch(error: any)
    - hasKey(key: string) -> Promise<boolean>
    - catch(error: any)
    - getMultipleValues(keys: string[]) -> Promise<Record<string, any>>
    - if(value: any, null: any)
    - catch(error: any)

=== DATABASE SCHEMAS ===
Table: athletes (from v1.ts)
  Columns:
    - id: TEXT NOT NULL PRIMARY KEY
    - name: TEXT NOT NULL
    - team: TEXT NULL
    - position: TEXT NULL
    - age: INTEGER NULL
    - height: TEXT NULL
    - weight: TEXT NULL
    - device_id: TEXT NULL
    - notes: TEXT NULL
    - number: TEXT NULL
    - active: BOOLEAN NULL DEFAULT 1
    - created_at: INTEGER NOT NULL
    - updated_at: INTEGER NOT NULL
  Primary Keys:
    - id
  Indices:
    - INDEX idx_athlete_name (name)
    - INDEX idx_athlete_team (team)
    - INDEX idx_athlete_device (device_id)

Table: imu_data (from v1.ts)
  Columns:
    - id: INTEGER NULL PRIMARY KEY
    - device_id: TEXT NOT NULL
    - sensor_id: INTEGER NOT NULL
    - timestamp: INTEGER NOT NULL
    - x: REAL NOT NULL
    - y: REAL NOT NULL
    - z: REAL NOT NULL
    - created_at: INTEGER NOT NULL
  Primary Keys:
    - id
  Indices:
    - INDEX idx_imu_device_id (device_id)
    - INDEX idx_imu_timestamp (timestamp)

Table: accelerometer_data (from v1.ts)
  Columns:
    - id: INTEGER NULL PRIMARY KEY
    - device_id: TEXT NOT NULL
    - sensor_id: INTEGER NOT NULL
    - timestamp: INTEGER NOT NULL
    - x: REAL NOT NULL
    - y: REAL NOT NULL
    - z: REAL NOT NULL
    - magnitude: REAL NOT NULL
    - created_at: INTEGER NOT NULL
  Primary Keys:
    - id
  Indices:
    - INDEX idx_accel_device_id (device_id)
    - INDEX idx_accel_timestamp (timestamp)
    - INDEX idx_accel_magnitude (magnitude)

Table: temperature_data (from v1.ts)
  Columns:
    - id: INTEGER NULL PRIMARY KEY
    - device_id: TEXT NOT NULL
    - sensor_id: INTEGER NOT NULL
    - timestamp: INTEGER NOT NULL
    - temperature: REAL NOT NULL
    - created_at: INTEGER NOT NULL
  Primary Keys:
    - id
  Indices:
    - INDEX idx_temp_device_id (device_id)
    - INDEX idx_temp_timestamp (timestamp)

Table: force_data (from v1.ts)
  Columns:
    - id: INTEGER NULL PRIMARY KEY
    - device_id: TEXT NOT NULL
    - sensor_id: INTEGER NOT NULL
    - timestamp: INTEGER NOT NULL
    - force: REAL NOT NULL
    - created_at: INTEGER NOT NULL
  Primary Keys:
    - id
  Indices:
    - INDEX idx_force_device_id (device_id)
    - INDEX idx_force_timestamp (timestamp)

Table: heart_rate_data (from v1.ts)
  Columns:
    - id: INTEGER NULL PRIMARY KEY
    - device_id: TEXT NOT NULL
    - timestamp: INTEGER NOT NULL
    - heart_rate: INTEGER NOT NULL
    - created_at: INTEGER NOT NULL
  Primary Keys:
    - id
  Indices:
    - INDEX idx_hr_device_id (device_id)
    - INDEX idx_hr_timestamp (timestamp)

Table: impact_events (from v1.ts)
  Columns:
    - id: INTEGER NULL PRIMARY KEY
    - device_id: TEXT NOT NULL
    - athlete_id: TEXT NULL
    - timestamp: INTEGER NOT NULL
    - magnitude: REAL NOT NULL
    - x: REAL NOT NULL
    - y: REAL NOT NULL
    - z: REAL NOT NULL
    - duration_ms: INTEGER NULL
    - location: TEXT NULL
    - processed: BOOLEAN NULL DEFAULT 0
    - severity: TEXT NULL
    - notes: TEXT NULL
    - created_at: INTEGER NOT NULL
  Primary Keys:
    - id
  Foreign Keys:
    - athlete_id → athletes.id
  Indices:
    - INDEX idx_impact_device_id (device_id)
    - INDEX idx_impact_athlete_id (athlete_id)
    - INDEX idx_impact_timestamp (timestamp)
    - INDEX idx_impact_magnitude (magnitude)
    - INDEX idx_impact_processed (processed)

Table: sessions (from v1.ts)
  Columns:
    - id: TEXT NOT NULL PRIMARY KEY
    - name: TEXT NOT NULL
    - start_time: INTEGER NOT NULL
    - end_time: INTEGER NULL
    - team: TEXT NULL
    - created_at: INTEGER NOT NULL
    - notes: TEXT NULL
  Primary Keys:
    - id
  Indices:
    - INDEX idx_session_start (start_time)
    - INDEX idx_session_team (team)

Table: session_athletes (from v1.ts)
  Columns:
    - session_id: TEXT NOT NULL PRIMARY KEY
    - athlete_id: TEXT NOT NULL
    - start_time: INTEGER NOT NULL
    - end_time: INTEGER NULL
  Primary Keys:
    - session_id
    -  athlete_id
  Foreign Keys:
    - session_id → sessions.id
    - athlete_id → athletes.id
  Indices:
    - INDEX idx_sa_session (session_id)
    - INDEX idx_sa_athlete (athlete_id)

Table: calibration_data (from v1.ts)
  Columns:
    - id: INTEGER NULL PRIMARY KEY
    - device_id: TEXT NOT NULL
    - sensor_type: TEXT NOT NULL
    - timestamp: INTEGER NOT NULL
    - offset_x: REAL NULL
    - offset_y: REAL NULL
    - offset_z: REAL NULL
    - scale_x: REAL NULL
    - scale_y: REAL NULL
    - scale_z: REAL NULL
    - created_at: INTEGER NOT NULL
  Primary Keys:
    - id
  Indices:
    - INDEX idx_calib_device_id (device_id)
    - UNIQUE INDEX idx_calib_device_sensor (device_id,  sensor_type)

Table: imu_data (from SensorDataRepository.ts)
  Columns:
    - id: INTEGER NULL PRIMARY KEY
    - device_id: TEXT NOT NULL
    - sensor_id: INTEGER NOT NULL
    - timestamp: INTEGER NOT NULL
    - x: REAL NOT NULL
    - y: REAL NOT NULL
    - z: REAL NOT NULL
    - created_at: INTEGER NOT NULL
  Primary Keys:
    - id
  Indices:
    - INDEX idx_imu_device_id (device_id)
    - INDEX idx_imu_timestamp (timestamp)

Table: accelerometer_data (from SensorDataRepository.ts)
  Columns:
    - id: INTEGER NULL PRIMARY KEY
    - device_id: TEXT NOT NULL
    - sensor_id: INTEGER NOT NULL
    - timestamp: INTEGER NOT NULL
    - x: REAL NOT NULL
    - y: REAL NOT NULL
    - z: REAL NOT NULL
    - magnitude: REAL NOT NULL
    - created_at: INTEGER NOT NULL
  Primary Keys:
    - id
  Indices:
    - INDEX idx_accel_device_id (device_id)
    - INDEX idx_accel_timestamp (timestamp)
    - INDEX idx_accel_magnitude (magnitude)

Table: temperature_data (from SensorDataRepository.ts)
  Columns:
    - id: INTEGER NULL PRIMARY KEY
    - device_id: TEXT NOT NULL
    - sensor_id: INTEGER NOT NULL
    - timestamp: INTEGER NOT NULL
    - temperature: REAL NOT NULL
    - created_at: INTEGER NOT NULL
  Primary Keys:
    - id
  Indices:
    - INDEX idx_temp_device_id (device_id)

Table: force_data (from SensorDataRepository.ts)
  Columns:
    - id: INTEGER NULL PRIMARY KEY
    - device_id: TEXT NOT NULL
    - sensor_id: INTEGER NOT NULL
    - timestamp: INTEGER NOT NULL
    - force: REAL NOT NULL
    - created_at: INTEGER NOT NULL
  Primary Keys:
    - id
  Indices:
    - INDEX idx_force_device_id (device_id)

Table: heart_rate_data (from SensorDataRepository.ts)
  Columns:
    - id: INTEGER NULL PRIMARY KEY
    - device_id: TEXT NOT NULL
    - timestamp: INTEGER NOT NULL
    - heart_rate: INTEGER NOT NULL
    - created_at: INTEGER NOT NULL
  Primary Keys:
    - id
  Indices:
    - INDEX idx_heart_device_id (device_id)

Table: concussion_events (from SensorDataRepository.ts)
  Columns:
    - id: INTEGER NULL PRIMARY KEY
    - device_id: TEXT NOT NULL
    - timestamp: INTEGER NOT NULL
    - magnitude: REAL NOT NULL
    - x: REAL NOT NULL
    - y: REAL NOT NULL
    - z: REAL NOT NULL
    - processed: BOOLEAN NULL DEFAULT 0
    - notes: TEXT NULL
    - created_at: INTEGER NOT NULL
  Primary Keys:
    - id
  Indices:
    - INDEX idx_concussion_device_id (device_id)
    - INDEX idx_concussion_processed (processed)

=== MODULE DEPENDENCIES ===
Module: react-native - 129 imports (129 named)
Module: @/src/constants - 23 imports (23 named)
Module: @expo/vector-icons - 15 imports (15 named)
Module: react - 14 imports (4 named, 10 default)
Module: expo-linear-gradient - 12 imports (12 named)
Module: ../types - 12 imports (12 named)
Module: react-native-reanimated - 10 imports (10 named)
Module: @/src/types - 9 imports (9 named)
Module: react-native-ble-plx - 9 imports (9 named)
Module: ../../src/constants - 8 imports (8 named)
Module: expo-router - 7 imports (7 named)
Module: react-native-safe-area-context - 7 imports (7 named)
Module: @/src/providers/AppProvider - 7 imports (7 named)
Module: @react-native-async-storage/async-storage - 7 imports (7 default)
Module: expo-blur - 6 imports (6 named)
Module: ../../../src/constants - 6 imports (6 named)
Module: expo-sqlite - 6 imports (6 named)
Module: ../DatabaseManager - 5 imports (5 named)
Module: ../utils/EventEmitter - 4 imports (4 named)
Module: react-native-chart-kit - 3 imports (3 named)

=== TYPE SYSTEM ANALYSIS ===
Total Interfaces: 46
Total Type Aliases: 11

Most Complex Interfaces:
- ImpactEvent - 14 properties
- Athlete - 13 properties
- ValidationResult - 11 properties
- CalibrationData - 11 properties
- ReportParameters - 10 properties

Type Alias Categories:
- basic: 6
- union: 3
- function: 2

=== ENHANCED API DOCUMENTATION ===
GET Endpoints (3):
- window
- window
- window

=== STYLE PATTERNS ===
Total StyleSheet Rules: 0

=== ENHANCED HOOK ANALYSIS ===
Hook: useAppContext
Hook: useStorageService
Hook: useDeviceService
Hook: useBluetoothService
Hook: useAppSetupService
Hook: useAthleteRepository
Hook: useSensorDataRepository
Hook: useAnimatedPress
  Callbacks: 2

=== ENHANCED NAVIGATION ROUTES ===
Tabs Routes (6):
- index (with options)
- coach (with options)
- devices (with options)
- livemonitor (with options)
- reportsDetailed (with options)
- settings (with options)

Stack Routes (2):
- (tabs) (with options)
- +not-found

=== FILE SUMMARIES ===
=== app/(tabs)/_layout.tsx ===
# Imports:
# import { React } from 'react'
# import { Tabs } from 'expo-router'
# import { StyleSheet } from 'react-native'
# import { MaterialCommunityIcons } from '@expo/vector-icons'
# import { COLORS } from '@/src/constants'

# Components:
Component: TabLayout (functional)


--------------------------------------------------------------------------------

=== app/(tabs)/coach.tsx ===
# Imports:
# import { React } from 'react'
# import { View, Text, StyleSheet, ScrollView, FlatList, TouchableOpacity, ViewStyle } from 'react-native'
# import { SafeAreaProvider } from 'react-native-safe-area-context'
# import { MaterialCommunityIcons } from '@expo/vector-icons'
# import { LinearGradient } from 'expo-linear-gradient'
# ... and 2 more imports

# Components:
Component: CoachDashboardScreen (functional)

# Type Definitions:
  Interfaces:
    - PlayerCardProps
      - style: ViewStyle
      - children: React.ReactNode
  Type Aliases:
    - Player = typeof coachData.players[0]


--------------------------------------------------------------------------------

=== app/(tabs)/devices.tsx ===
# Imports:
# import { Athlete, DeviceStatus, SavedDevice } from '@/src/types'
# import { View, Text, FlatList, TouchableOpacity, StyleSheet, ActivityIndicator, Alert, ScrollView, RefreshControl, Platform } from 'react-native'
# import { SafeAreaProvider } from 'react-native-safe-area-context'
# import { MaterialCommunityIcons } from '@expo/vector-icons'
# import { useRouter } from 'expo-router'
# ... and 3 more imports

# Components:
Component: GlassCard (functional)
  Props:
    - style: any
    - children: any
    - intensity: any
    - 15: any
  Hooks used:
    - useState
    - useEffect
    - useCallback
    - useRouter
    - useBluetoothService
    - useAthleteRepository
    - useRouter
    - useBluetoothService
    - useAthleteRepository
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useCallback
    - useCallback
    - useEffect
    - useEffect

Component: Devices (functional)
  Hooks used:
    - useState
    - useEffect
    - useCallback
    - useRouter
    - useBluetoothService
    - useAthleteRepository
    - useRouter
    - useBluetoothService
    - useAthleteRepository
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useCallback
    - useCallback
    - useEffect
    - useEffect


--------------------------------------------------------------------------------

=== app/(tabs)/index.tsx ===
# Imports:
# import { StyleSheet, View, Text, TouchableOpacity, ActivityIndicator, ScrollView, Alert, RefreshControl, Platform,  } from 'react-native'
# import { useRouter } from 'expo-router'
# import { COLORS, SAMPLE_ATHLETES, SAMPLE_IMPACT_EVENTS, SAMPLE_SENSOR_READINGS, playerData,  } from '@/src/constants'
# import { useBluetoothService, useDeviceService } from '@/src/providers/AppProvider'
# import { LiveDataPoint, SavedDevice, DeviceStatus } from '@/src/types'
# ... and 4 more imports

# Components:
Component: SAMPLE_DEVICES (functional)
  Props:
    - a: any
    - a: any
    - deviceId: any
    - mouthguard_A: any
  Hooks used:
    - useState
    - useEffect
    - useCallback
    - useRef
    - useRouter
    - useBluetoothService
    - useDeviceService
    - useRouter
    - useBluetoothService
    - useDeviceService
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useRef
    - useEffect
    - useEffect

Component: Dashboard (functional)
  Hooks used:
    - useState
    - useEffect
    - useCallback
    - useRef
    - useRouter
    - useBluetoothService
    - useDeviceService
    - useRouter
    - useBluetoothService
    - useDeviceService
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useRef
    - useEffect
    - useEffect


--------------------------------------------------------------------------------

=== app/(tabs)/livemonitor.tsx ===
# Imports:
# import { View, Text, StyleSheet, ScrollView, ActivityIndicator, TouchableOpacity, Platform } from 'react-native'
# import { SafeAreaProvider } from 'react-native-safe-area-context'
# import { MaterialCommunityIcons } from '@expo/vector-icons'
# import { COLORS } from '@/src/constants'
# import { useBluetoothService } from '@/src/providers/AppProvider'
# ... and 4 more imports

# Components:
Component: GlassCard (functional)
  Props:
    - style: any
    - children: any
    - intensity: any
    - 15: any
  Hooks used:
    - useState
    - useEffect
    - useRef
    - useBluetoothService
    - useState
    - useState
    - useState
    - useState
    - useBluetoothService
    - useRef
    - useEffect
    - useEffect

Component: LiveMonitorScreen (functional)
  Hooks used:
    - useState
    - useEffect
    - useRef
    - useBluetoothService
    - useState
    - useState
    - useState
    - useState
    - useBluetoothService
    - useRef
    - useEffect
    - useEffect


--------------------------------------------------------------------------------

=== app/(tabs)/reports.tsx ===
# Imports:
# import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Platform } from 'react-native'
# import { SafeAreaProvider } from 'react-native-safe-area-context'
# import { MaterialCommunityIcons } from '@expo/vector-icons'
# import { BlurView } from 'expo-blur'
# import { LinearGradient } from 'expo-linear-gradient'
# ... and 1 more imports

# Components:
Component: REPORTS (functional)
  Props:
    - session: any
    - id: session.id
    - title: session.name
    - date: new
    - Date: any
    - session: any
    - startTime: any
  Hooks used:
    - useState
    - useEffect
    - useState
    - useState

Component: GlassCard (functional)
  Props:
    - style: any
    - children: any
    - intensity: any
    - 15: any
  Hooks used:
    - useState
    - useEffect
    - useState
    - useState

Component: ReportsScreen (functional)
  Hooks used:
    - useState
    - useEffect
    - useState
    - useState

# Type Definitions:
  Type Aliases:
    - ReportType = 'Team' | 'Individual' | 'Session' | 'All'


--------------------------------------------------------------------------------

=== app/(tabs)/reportsDetailed.tsx ===
# Imports:
# import { React } from 'react'
# import { View, Text, StyleSheet, ScrollView, FlatList, TouchableOpacity, ViewStyle } from 'react-native'
# import { SafeAreaProvider } from 'react-native-safe-area-context'
# import { MaterialCommunityIcons } from '@expo/vector-icons'
# import { LinearGradient } from 'expo-linear-gradient'
# ... and 3 more imports

# Components:
Component: ReportsDetailedScreen (functional)

# Type Definitions:
  Interfaces:
    - GlassCardProps
      - style: ViewStyle
      - children: React.ReactNode
      - intensity: number


--------------------------------------------------------------------------------

=== app/(tabs)/settings.tsx ===
# Imports:
# import { React } from 'react'
# import { View, Text, StyleSheet, ScrollView, TouchableOpacity, Switch, Platform } from 'react-native'
# import { SafeAreaProvider } from 'react-native-safe-area-context'
# import { MaterialCommunityIcons } from '@expo/vector-icons'
# import { BlurView } from 'expo-blur'
# ... and 3 more imports

# Components:
Component: GlassCard (functional)
  Props:
    - style: any
    - children: any
    - intensity: any
    - 15: any
  Hooks used:
    - useAppSetupService
    - useState
    - useState
    - useState
    - useState
    - useAppSetupService

Component: SettingsScreen (functional)
  Hooks used:
    - useAppSetupService
    - useState
    - useState
    - useState
    - useState
    - useAppSetupService

# Type Definitions:
  Type Aliases:
    - IconName = | 'bell-outline'
  | 'theme-light-dark'
  | 'bluetooth-settings'
  | 'devices'
  | 'cloud-upload-outline'
  | 'export'
  | 'delete-outline'
  | 'information-outline'
  | 'help-circle-outline' 
  | 'shield-check-outline'
  | 'chevron-right'
    - SettingItemType = {
  id: string
    - SettingsSectionType = {
  title: string


--------------------------------------------------------------------------------

=== app/_layout.tsx ===
# Imports:
# import { clearAppData } from '../src/utils/resetAppData'
# import { Stack } from 'expo-router'
# import { useState, useEffect } from 'react'
# import { BluetoothHandler, BluetoothContext } from '@/src/contexts/BluetoothContext'
# import { useColorScheme, AppState, AppStateStatus, Alert, Text, View, StyleSheet } from 'react-native'
# ... and 9 more imports

# Components:
Component: RootLayout (functional)
  Hooks used:
    - useState
    - useEffect
    - useColorScheme
    - useFonts
    - useFonts
    - useState
    - useState
    - useSimpleApp
    - useState
    - useEffect

Component: RootLayoutNav (functional)
  Hooks used:
    - useState
    - useEffect
    - useColorScheme
    - useFonts
    - useFonts
    - useState
    - useState
    - useSimpleApp
    - useState
    - useEffect
    - useEffect
    - useEffect
    - useEffect
    - useSimpleApp
    - useSimpleApp
    - useSimpleApp
    - useState


--------------------------------------------------------------------------------

=== app/components/Header.tsx ===
# Imports:
# import { React } from 'react'
# import { View, Text, StyleSheet } from 'react-native'
# import { COLORS } from '@/src/constants'

# Components:
Component: Header (functional)
  Props:
    - title: any

# Type Definitions:
  Interfaces:
    - HeaderProps
      - title: string


--------------------------------------------------------------------------------

=== app/components/charts/BarChart.tsx ===
# Imports:
# import { React } from 'react'
# import { View, Text, StyleSheet, Dimensions } from 'react-native'
# import { LinearGradient } from 'expo-linear-gradient'
# import { COLORS } from '../../../src/constants'

# Type Definitions:
  Interfaces:
    - BarChartProps
      - data: number[]
      - labels: string[]
      - maxValue: number
      - barColor: string


--------------------------------------------------------------------------------

=== app/components/charts/ChartStyles.ts ===
# Imports:
# import { StyleSheet } from 'react-native'
# import { COLORS } from '../../../src/constants'


--------------------------------------------------------------------------------

=== app/components/charts/LineChart.tsx ===
# Imports:
# import { React } from 'react'
# import { View, Text, StyleSheet, Dimensions } from 'react-native'
# import { LineChart as RNLineChart } from 'react-native-chart-kit'
# import { COLORS } from '../../../src/constants'
# import { ChartData } from '../../../src/types'

# Type Definitions:
  Interfaces:
    - LineChartProps
      - data: ChartData | {
    labels: string[]
      - datasets: {
      data: number[]
      - color: (opacity?: number) => string
      - strokeWidth: number
      - legend: string[]
      - width: number
      - height: number
      - alwaysShowZero: boolean
      - chartConfig: any
      - bezier: boolean
      - style: any


--------------------------------------------------------------------------------

=== app/components/charts/MonthlyOverviewChart.tsx ===
# Imports:
# import { React } from 'react'
# import { View, Text, TouchableOpacity, StyleSheet, Platform, Dimensions } from 'react-native'
# import { LinearGradient } from 'expo-linear-gradient'
# import { MaterialCommunityIcons } from '@expo/vector-icons'
# import { COLORS } from '../../../src/constants'
# ... and 2 more imports

# Type Definitions:
  Interfaces:
    - MonthlyOverviewChartProps
      - data: ChartDataPoint[]
      - onPress: () => void


--------------------------------------------------------------------------------

=== app/components/charts/WeeklyOverviewChart.tsx ===
# Imports:
# import { React } from 'react'
# import { View, Text, TouchableOpacity, StyleSheet, Platform, Dimensions } from 'react-native'
# import { LinearGradient } from 'expo-linear-gradient'
# import { MaterialCommunityIcons } from '@expo/vector-icons'
# import { COLORS } from '../../../src/constants'
# ... and 2 more imports

# Type Definitions:
  Interfaces:
    - WeeklyOverviewChartProps
      - data: ChartDataPoint[]
      - onPress: () => void


--------------------------------------------------------------------------------

=== app/components/shared/AlertOverlay.tsx ===
# Imports:
# import { View, Text, TouchableOpacity, StyleSheet, Platform } from 'react-native'
# import { MaterialCommunityIcons } from '@expo/vector-icons'
# import { dataChangeEmitter } from '@/src/utils/EventEmitter'
# import { ConcussionAlert } from '@/src/types'
# import { COLORS } from '@/src/constants'
# ... and 1 more imports


--------------------------------------------------------------------------------

=== app/components/shared/Card.tsx ===
# Imports:
# import { View, StyleSheet } from 'react-native'
# import { LinearGradient } from 'expo-linear-gradient'
# import { COLORS } from '@/src/constants'

# Type Definitions:
  Interfaces:
    - CardProps
      - children: ReactNode
      - style: any


--------------------------------------------------------------------------------

=== app/components/shared/ErrorView.tsx ===
# Imports:
# import { React } from 'react'
# import { View, Text, StyleSheet } from 'react-native'
# import { MaterialCommunityIcons } from '@expo/vector-icons'
# import { COLORS } from '@/src/constants'

# Components:
Component: ErrorView (functional)
  Props:
    - error: any

# Type Definitions:
  Interfaces:
    - ErrorViewProps
      - error: string


--------------------------------------------------------------------------------

=== app/components/shared/LoadingView.tsx ===
# Imports:
# import { View, Text, StyleSheet } from 'react-native'
# import { MaterialCommunityIcons } from '@expo/vector-icons'
# import { COLORS } from '../../../src/constants'
# import { TIMING_CONFIG } from '@/src/utils/animations'

# Components:
Component: LoadingView (functional)
  Hooks used:
    - useEffect
    - useAnimatedStyle
    - useSharedValue
    - useSharedValue
    - useEffect
    - useAnimatedStyle


--------------------------------------------------------------------------------

=== app/components/shared/ThemeWrapper.tsx ===
# Imports:
# import { View, StyleSheet } from 'react-native'
# import { COLORS } from '@/src/constants'
# import { LinearGradient } from 'expo-linear-gradient'

# Type Definitions:
  Interfaces:
    - ThemeWrapperProps
      - children: ReactNode


--------------------------------------------------------------------------------

=== app/index.tsx ===
# Imports:
# import { Redirect } from 'expo-router'

# Components:
Component: Index (functional)


--------------------------------------------------------------------------------

=== app/screens/TestDataScreen.tsx ===
# Imports:
# import { View, Text, StyleSheet, TouchableOpacity, ScrollView, ActivityIndicator, Alert, TextInput, FlatList } from 'react-native'
# import { useRouter } from 'expo-router'
# import { SafeAreaView } from 'react-native-safe-area-context'
# import { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons'
# import { MOUTHGUARD_DB_NAME, COLORS } from '../../src/constants'
# ... and 5 more imports

# Components:
Component: TestDataScreen (functional)
  Hooks used:
    - useState
    - useEffect
    - useRouter
    - useRouter
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useState
    - useEffect

# Type Definitions:
  Interfaces:
    - Athlete
      - id: string
      - name: string
      - team: string
      - position: string
      - height: number
      - weight: number
      - deviceId: string
      - createdAt: number
    - ImpactEvent
      - id: string
      - deviceId: string
      - athleteId: string
      - timestamp: number
      - magnitude: number
      - duration: number
      - severity: string
      - location: string
      - createdAt: number


--------------------------------------------------------------------------------

=== src/DatabaseManager.ts ===
# Imports:
# import { AsyncStorage } from '@react-native-async-storage/async-storage'
# import { openDatabaseAsync, SQLiteDatabase } from 'expo-sqlite'
# import { migrations } from './migrations'
# import { Platform } from 'react-native'


--------------------------------------------------------------------------------

=== src/SimpleApp.tsx ===
# Imports:
# import { View, Text, StyleSheet, TouchableOpacity, Alert } from 'react-native'

# Components:
Component: SimpleApp (functional)
  Hooks used:
    - useEffect
    - useEffect


--------------------------------------------------------------------------------

=== src/contexts/BluetoothContext.ts ===
# Imports:
# import { createContext } from 'react'
# import { Alert, PermissionsAndroid, Platform } from 'react-native'
# import { BleError, BleManager, Characteristic, Device } from 'react-native-ble-plx'
# import { base64 } from 'react-native-base64'
# import { parseRawTimestamp } from '../utils/functions'
# ... and 1 more imports

# Type Definitions:
  Interfaces:
    - StateRestoredEvent
      - connectedPeripherals: Device[]
    - SensorCallbacks
      - onImuData: (deviceId: string, sensorId: number, data: SensorData) => void
      - onAccelerometerData: (deviceId: string, sensorId: number, data: SensorData) => void
      - onTemperatureData: (deviceId: string, sensorId: number, data: SensorData) => void
      - onForceData: (deviceId: string, sensorId: number, data: SensorData) => void
      - onHeartRateData: (deviceId: string, heartRate: number) => void
      - onBatteryLevel: (deviceId: string, level: number) => void
  Type Aliases:
    - SensorData = {
  timestamp: number
    - ConnectedDevice = {
    device: Device
    - StoredDeviceUUIDs = {
    [deviceId: string]: {
        services: {
          [serviceName: string]: {
            uuid: string


--------------------------------------------------------------------------------

=== src/dbchecker/dbValidator.ts ===
# Imports:
# import { databaseManager } from '../DatabaseManager'
# import { BONG_HITS_DATABASE_NAME, STRAINS_DATABASE_NAME } from '../constants'
# import { DatabaseResponse, Strain } from '../types'

# Type Definitions:
  Interfaces:
    - ValidationResult
      - success: boolean
      - errors: string[]
      - warnings: string[]
      - componentResults: {
    [key: string]: boolean | undefined
      - bongHitsTableExists: boolean
      - strainsTableExists: boolean
      - transactionsWork: boolean
      - asyncStorageWorks: boolean
      - expoSqliteWorks: boolean
      - weeklyStatsWork: boolean
      - strainsDataWorks: boolean


--------------------------------------------------------------------------------

=== src/migrations/index.ts ===
# Type Definitions:
  Interfaces:
    - MigrationModule
      - up: (db: any) => Promise<void>
      - down: (db: any) => Promise<void>


--------------------------------------------------------------------------------

=== src/migrations/v1.ts ===
# Imports:
# import { SQLiteDatabase } from 'expo-sqlite'


--------------------------------------------------------------------------------

=== src/migrations/v2.ts ===
# Imports:
# import { SQLiteDatabase } from 'expo-sqlite'

# Type Definitions:
  Interfaces:
    - TableColumnInfo
      - cid: number
      - name: string
      - type: string
      - notnull: number
      - dflt_value: string | null
      - pk: number


--------------------------------------------------------------------------------

=== src/providers/AppProvider.tsx ===
# Imports:
# import { View, Text, ActivityIndicator, AppState, Platform } from 'react-native'
# import { AsyncStorage } from '@react-native-async-storage/async-storage'
# import { DatabaseManager, databaseManager } from '../DatabaseManager'
# import { StorageService } from '../services/StorageService'
# import { DeviceService } from '../services/DeviceService'
# ... and 5 more imports

# Hooks:
Hook: useAppContext
  Uses hooks:
    - useContext
    - useStorageService
    - useDeviceService
    - useBluetoothService
    - useAppSetupService
    - useAthleteRepository
    - useSensorDataRepository

Hook: useStorageService
  Uses hooks:
    - useAppContext
    - useDeviceService
    - useAppContext
    - useBluetoothService
    - useAppContext
    - useAppSetupService
    - useAppContext
    - useAthleteRepository
    - useAppContext
    - useSensorDataRepository
    - useAppContext

Hook: useDeviceService
  Uses hooks:
    - useAppContext
    - useBluetoothService
    - useAppContext
    - useAppSetupService
    - useAppContext
    - useAthleteRepository
    - useAppContext
    - useSensorDataRepository
    - useAppContext

Hook: useBluetoothService
  Uses hooks:
    - useAppContext
    - useAppSetupService
    - useAppContext
    - useAthleteRepository
    - useAppContext
    - useSensorDataRepository
    - useAppContext

Hook: useAppSetupService
  Uses hooks:
    - useAppContext
    - useAthleteRepository
    - useAppContext
    - useSensorDataRepository
    - useAppContext

Hook: useAthleteRepository
  Uses hooks:
    - useAppContext
    - useSensorDataRepository
    - useAppContext

Hook: useSensorDataRepository
  Uses hooks:
    - useAppContext

# Type Definitions:
  Interfaces:
    - AppContextType
      - databaseManager: DatabaseManager
      - storageService: StorageService
      - deviceService: DeviceService
      - bluetoothService: BluetoothService
      - appSetupService: AppSetupService
      - athleteRepository: AthleteRepository
      - sensorDataRepository: SensorDataRepository
      - initialized: boolean
    - AppProviderProps
      - children: ReactNode
      - bluetoothHandler: BluetoothHandler


--------------------------------------------------------------------------------

=== src/repositories/AthleteRepository.ts ===
# Imports:
# import { SQLiteDatabase } from 'expo-sqlite'
# import { Athlete } from '../types'
# import { BaseRepository } from './BaseRepository'


--------------------------------------------------------------------------------

=== src/repositories/BaseRepository.ts ===
# Imports:
# import { SQLiteDatabase } from 'expo-sqlite'
# import { DatabaseResponse } from '../types'


--------------------------------------------------------------------------------

=== src/repositories/SensorDataRepository.ts ===
# Imports:
# import { dataChangeEmitter, dbEvents } from '../utils/EventEmitter'


--------------------------------------------------------------------------------

=== src/services/AppSetupService.ts ===
# Imports:
# import { AsyncStorage } from '@react-native-async-storage/async-storage'
# import { DatabaseManager } from '../DatabaseManager'
# import { StorageService } from './StorageService'
# import { AthleteRepository } from '../repositories/AthleteRepository'
# import { SensorDataRepository } from '../repositories/SensorDataRepository'

# Services:
Service: AppSetupService
  Methods:
    - testAsyncStorage() -> Promise<boolean>
    - catch(error: any)
    - ensureInitialized() -> Promise<void>
    - if(hasLaunched: any)
    - catch(error: any)
    - resetAppState() -> Promise<void>
    - catch(error: any)
    - performFirstTimeSetup() -> Promise<void>
    - catch(error: any)
    - createSampleData(athleteRepository: AthleteRepository) -> Promise<void>
    - for(const: any, athlete: any, of: any, sampleAthletes: any)
    - catch(error: any)


--------------------------------------------------------------------------------

=== src/services/BluetoothService.ts ===
# Imports:
# import { Alert, PermissionsAndroid, Platform, AppState } from 'react-native'
# import { BleError, BleManager, Characteristic, Device } from 'react-native-ble-plx'
# import { base64 } from 'react-native-base64'
# import { BluetoothHandler, SensorCallbacks } from '../contexts/BluetoothContext'
# import { DeviceService } from './DeviceService'
# ... and 5 more imports

# Services:
Service: BluetoothService
  Methods:
    - if(nextAppState: any, active: any)
    - refreshAllDeviceStatus() -> Promise<void>
    - catch(error: any)
    - updateDeviceStatus(deviceId: string, isConnected: boolean) -> Promise<void>
    - if(savedDevice: any)
    - if(savedDevice: any, athleteId: any)
    - if(athlete: any)
    - if(athlete: any)
    - if(savedDevice: any, savedDevice: any, athleteId: any)
    - catch(error: any)
    - setupSensorCallbacks() -> void
    - handleImuData(deviceId: string, sensorId: number, data: { timestamp: number, values: number[] }) -> Promise<void>
    - catch(error: any)
    - handleAccelerometerData(deviceId: string, sensorId: number, data: { timestamp: number, values: number[] }) -> Promise<void>
    - if(magnitude: any, CONCUSSION_THRESHOLD_G: any)
    - if(device: any, athleteId: any)
    - if(athlete: any)
    - catch(error: any)
    - catch(error: any)
    - catch(error: any)
    - handleTemperatureData(deviceId: string, sensorId: number, data: { timestamp: number, values: number[] }) -> Promise<void>
    - if(temperature: any, MAX_TEMP_THRESHOLD: any, temperature: any, MIN_TEMP_THRESHOLD: any)
    - if(device: any, athleteId: any)
    - if(athlete: any)
    - catch(error: any)
    - catch(error: any)
    - handleForceData(deviceId: string, sensorId: number, data: { timestamp: number, values: number[] }) -> Promise<void>
    - catch(error: any)
    - handleHeartRateData(deviceId: string, heartRate: number) -> Promise<void>
    - if(heartRate: any, MAX_HR_THRESHOLD: any, heartRate: any, MIN_HR_THRESHOLD: any)
    - if(device: any, athleteId: any)
    - if(athlete: any)
    - catch(error: any)
    - catch(error: any)
    - handleBatteryLevel(deviceId: string, level: number) -> Promise<void>
    - if(level: any, 20: any, AppState: any, currentState: any, active: any)
    - catch(error: any)
    - updateDeviceLastSeen(deviceId: string) -> Promise<void>
    - connectToDevice(deviceId: string) -> Promise<void>
    - if(device: any)
    - catch(error: any)
    - if(hasPermission: any)
    - if(error: any)
    - if(device: any, device: any, name: any)
    - catch(error: any)
    - disconnectFromDevice(deviceId: string) -> void
    - catch(error: any)
    - getConnectedDevices() -> Map<string, Device>
    - getSavedDevices()
    - getDeviceStatuses() -> DeviceStatus[]
    - scanForDevices() -> Promise<Array<
    - if(error: any)
    - if(device: any, device: any, name: any)
    - catch(error: any)
    - startSession() -> Promise<string>
    - if(this: any, currentSession: any)
    - for(const: any, device: any, of: any, connectedDevices: any)
    - if(device: any, athleteInfo: any)
    - catch(error: any)
    - stopSession() -> Promise<void>
    - if(this: any, currentSession: any)
    - catch(error: any)

# Type Definitions:
  Type Aliases:
    - DeviceStatusSubscription = {
  remove: () => void
    - SensorDataSubscription = {
  remove: () => void


--------------------------------------------------------------------------------

=== src/services/DeviceService.ts ===
# Imports:
# import { Device } from 'react-native-ble-plx'
# import { SavedDevice } from '../types'
# import { StorageService } from './StorageService'

# Services:
Service: DeviceService
  Methods:
    - getSavedDevices() -> Promise<SavedDevice[]>
    - catch(error: any)
    - saveDevice(device: Device) -> Promise<void>
    - if(existingIndex: any, 1: any)
    - catch(error: any)
    - saveDevices(devices: Device[]) -> Promise<void>
    - for(const: any, newDevice: any, of: any, newDevices: any)
    - if(existingIndex: any, 1: any)
    - catch(error: any)
    - updateDeviceBatteryLevel(deviceId: string, batteryLevel: number) -> Promise<void>
    - if(deviceIndex: any, 1: any)
    - catch(error: any)
    - updateDeviceAthleteAssignment(deviceId: string, athleteId: string | undefined) -> Promise<void>
    - if(deviceIndex: any, 1: any)
    - catch(error: any)
    - getDeviceById(deviceId: string) -> Promise<SavedDevice | null>
    - catch(error: any)
    - error(DeviceService: any, Error: any, getting: any, device: any, by: any, ID: any, deviceId: any) -> `, error);
      return null;
    }
  }

  /**
   * Remove a device from saved devices
   * @param device Device or deviceId to remove
   */
  public async removeDevice(device: SavedDevice | string): Promise<void>
    - if(filteredDevices: any, length: any, devices: any, length: any)
    - catch(error: any)
    - clearDevices() -> Promise<void>
    - catch(error: any)


--------------------------------------------------------------------------------

=== src/services/StorageService.ts ===
# Imports:
# import { AsyncStorage } from '@react-native-async-storage/async-storage'

# Services:
Service: StorageService
  Methods:
    - if(verifyValue: any, null: any)
    - if(retries: any, 0: any)
    - catch(error: any)
    - if(retries: any, 0: any)
    - if(jsonValue: any, null: any)
    - catch(parseError: any)
    - catch(error: any)
    - removeValue(key: string) -> Promise<void>
    - catch(error: any)
    - clearAll() -> Promise<void>
    - catch(error: any)
    - hasKey(key: string) -> Promise<boolean>
    - catch(error: any)
    - getMultipleValues(keys: string[]) -> Promise<Record<string, any>>
    - if(value: any, null: any)
    - catch(error: any)


--------------------------------------------------------------------------------

=== src/types.ts ===
# Type Definitions:
  Interfaces:
    - Athlete
      - id: string
      - name: string
      - team: string
      - position: string
      - age: number
      - height: string
      - weight: string
      - deviceId: string
      - notes: string
      - number: string
      - active: boolean
      - createdAt: number
      - updatedAt: number
    - SensorData
      - timestamp: number
      - values: number[]
    - ImuData
      - id: number
      - deviceId: string
      - sensorId: number
      - timestamp: number
      - x: number
      - y: number
      - z: number
      - createdAt: number
    - AccelerometerData
      - id: number
      - deviceId: string
      - sensorId: number
      - timestamp: number
      - x: number
      - y: number
      - z: number
      - magnitude: number
      - createdAt: number
    - TemperatureData
      - id: number
      - deviceId: string
      - sensorId: number
      - timestamp: number
      - temperature: number
      - createdAt: number
    - ForceData
      - id: number
      - deviceId: string
      - sensorId: number
      - timestamp: number
      - force: number
      - createdAt: number
    - HeartRateData
      - id: number
      - deviceId: string
      - timestamp: number
      - heartRate: number
      - createdAt: number
    - ImpactEvent
      - id: number
      - deviceId: string
      - athleteId: string
      - timestamp: number
      - magnitude: number
      - x: number
      - y: number
      - z: number
      - durationMs: number
      - location: string
      - processed: boolean
      - severity: 'low' | 'moderate' | 'severe' | 'critical'
      - notes: string
      - createdAt: number
    - Session
      - id: string
      - name: string
      - startTime: number
      - endTime: number
      - team: string
      - notes: string
      - createdAt: number
    - SessionAthlete
      - sessionId: string
      - athleteId: string
      - startTime: number
      - endTime: number
    - CalibrationData
      - id: number
      - deviceId: string
      - sensorType: string
      - timestamp: number
      - offsetX: number
      - offsetY: number
      - offsetZ: number
      - scaleX: number
      - scaleY: number
      - scaleZ: number
      - createdAt: number
    - ChartDataPoint
      - label: string
      - value: number
    - ChartDataset
      - data: number[]
      - color: (opacity?: number) => string
      - strokeWidth: number
    - ChartData
      - labels: string[]
      - datasets: ChartDataset[]
      - legend: string[]
    - DatabaseRow
      - key: string]: any
    - DatabaseResponse
      - success: boolean
      - data: T
      - error: string
    - SavedDevice
      - id: string
      - name: string
      - lastConnected: number
      - batteryLevel: number
      - athleteId: string
    - DeviceStatus
      - id: string
      - name: string
      - connected: boolean
      - batteryLevel: number
      - lastSeen: number
      - signalStrength: number
      - athleteInfo: {
        id: string
      - name: string
    - ConcussionAlert
      - id: string
      - deviceId: string
      - athleteId: string
      - athleteName: string
      - timestamp: number
      - magnitude: number
      - severity: 'low' | 'moderate' | 'severe' | 'critical'
      - acknowledged: boolean
      - notes: string
    - SensorStats
      - deviceId: string
      - athleteId: string
      - sensorType: 'imu' | 'accelerometer' | 'temperature' | 'force' | 'heartRate'
      - min: number
      - max: number
      - avg: number
      - count: number
      - startTime: number
      - endTime: number
    - LiveDataPoint
      - deviceId: string
      - timestamp: number
      - type: 'imu' | 'accelerometer' | 'temperature' | 'force' | 'heartRate'
      - values: number[]
    - SessionSummary
      - id: string
      - name: string
      - startTime: number
      - endTime: number
      - athleteCount: number
      - impactCount: number
      - averageImpactMagnitude: number
      - maxImpactMagnitude: number
      - alerts: number
    - ReportParameters
      - startTime: number
      - endTime: number
      - athleteIds: string[]
      - teamName: string
      - includeAccelerometer: boolean
      - includeImu: boolean
      - includeTemperature: boolean
      - includeForce: boolean
      - includeHeartRate: boolean
      - aggregation: 'none' | 'minute' | 'hour' | 'day'
    - AggregatedSensorData
      - timestamp: number
      - min: number
      - max: number
      - avg: number
      - count: number
    - AthleteReport
      - athlete: Athlete
      - totalSessions: number
      - totalImpacts: number
      - maxImpact: number
      - averageImpact: number
      - impactsByLevel: {
        low: number
      - moderate: number
      - severe: number
      - critical: number
      - heartRateStats: {
        min: number
      - max: number
      - avg: number
      - sessionSummaries: Array<{
        sessionId: string
      - sessionName: string
      - date: number
      - impactCount: number
      - maxImpact: number
    - DataState
      - isLoading: boolean
      - error: string | null
    - MonitoringSessionState
      - active: boolean
      - sessionId: string
      - sessionName: string
      - startTime: number
      - connectedDevices: DeviceStatus[]
      - activeAlerts: ConcussionAlert[]


--------------------------------------------------------------------------------

=== src/utils/animations.ts ===
# Imports:
# import { useCallback } from 'react'
# import { Platform } from 'react-native'
# import { FadeIn, FadeInDown, FadeInUp, withSpring, withTiming, WithTimingConfig, Easing, useSharedValue, useAnimatedStyle,  } from 'react-native-reanimated'

# Hooks:
Hook: useAnimatedPress
  Parameters:
    - scale: number
    - 0: any
    - 98: any
  Uses hooks:
    - useSharedValue
    - useAnimatedStyle
    - useCallback
    - useCallback


--------------------------------------------------------------------------------

=== src/utils/filters.ts ===
# Imports:
# import { StrainSearchFilters } from '../DatabaseManager'


--------------------------------------------------------------------------------

=== src/utils/resetAppData.ts ===
# Imports:
# import { AsyncStorage } from '@react-native-async-storage/async-storage'


--------------------------------------------------------------------------------

=== src/utils/validators.ts ===
# Imports:
# import { BongHit, Strain, JournalEntry, SafetyRecord } from '../types'

# Type Definitions:
  Type Aliases:
    - ValidationResult = | { success: true, data: T }
  | { success: false, error: string, code: string, data?: any }


--------------------------------------------------------------------------------
