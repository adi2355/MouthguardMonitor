

================================================================================
File: app.json
================================================================================

{
  "expo": {
    "name": "CanovaReactNativeApp",
    "slug": "CanovaReactNativeApp",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/canovafavicon.png",
    "scheme": "myapp",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "ios": {
      "supportsTablet": true,
      "bundleIdentifier": "com.anonymous.CanovaReactNativeApp",
      "infoPlist": {
        "NSBluetoothAlwaysUsageDescription": "This app requires Bluetooth access to connect to devices.",
        "NSBluetoothPeripheralUsageDescription": "This app requires Bluetooth access to communicate with nearby devices."
      }
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/canovafavicon.png",
        "backgroundColor": "#ffffff"
      },
      "permissions": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN",
        "android.permission.BLUETOOTH_CONNECT",
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN",
        "android.permission.BLUETOOTH_CONNECT"
      ],
      "package": "com.anonymous.CanovaReactNativeApp"
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/images/canovafavicon.png"
    },
    "plugins": [
      "expo-router",
      [
        "expo-splash-screen",
        {
          "image": "./assets/images/splash-icon.png",
          "imageWidth": 200,
          "resizeMode": "contain",
          "backgroundColor": "#ffffff"
        }
      ],
      "expo-sqlite",
      [
        "react-native-ble-plx",
        {
          "isBackgroundEnabled": true,
          "modes": [
            "peripheral",
            "central"
          ],
          "bluetoothAlwaysPermission": "Allow $(PRODUCT_NAME) to connect to bluetooth devices"
        }
      ]
    ],
    "experiments": {
      "typedRoutes": true
    }
  }
}


================================================================================
File: app/_layout.tsx
================================================================================

import { Stack } from "expo-router";
import { useState, useEffect } from "react";
import { BluetoothContext, BluetoothHandler } from "@/src/contexts/BluetoothContext";
import { useColorScheme } from 'react-native';

export default function RootLayout() {
  const colorScheme = useColorScheme();

  const [bluetoothHandler] = useState<BluetoothHandler>(new BluetoothHandler());

  return (
    <BluetoothContext.Provider value={bluetoothHandler}>
      <Stack>
        <Stack.Screen 
          name="(tabs)" 
          options={{ headerShown: false }} 
        />
        <Stack.Screen 
          name="dataOverviews/strains/strainDetails" 
          options={{ 
            headerShown: false,
            presentation: 'modal',
            animation: 'slide_from_bottom',
          }} 
        />
        <Stack.Screen name="+not-found" />
      </Stack>  
    </BluetoothContext.Provider>
  );
}


================================================================================
File: app/(tabs)/_layout.tsx
================================================================================

import { Tabs } from 'expo-router';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { COLORS } from '@/src/constants';

export default function TabLayout() {
  return (
    <Tabs
      screenOptions={{
        tabBarStyle: {
          backgroundColor: COLORS.background,
          borderTopColor: 'rgba(255, 255, 255, 0.1)',
        },
        tabBarActiveTintColor: COLORS.primary,
        tabBarInactiveTintColor: 'rgba(255, 255, 255, 0.5)',
        headerShown: false,
      }}
    >
      <Tabs.Screen
        name="index"
        options={{
          href: null,
        }}
      />
      <Tabs.Screen
        name="mydata"
        options={{
          title: 'My Data',
          tabBarIcon: ({ color }) => (
            <MaterialCommunityIcons name="chart-box" size={24} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="devices"
        options={{
          title: 'Devices',
          tabBarIcon: ({ color }) => (
            <MaterialCommunityIcons name="devices" size={24} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="journal"
        options={{
          title: 'Journal',
          tabBarIcon: ({ color }) => (
            <MaterialCommunityIcons name="notebook" size={24} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="trending"
        options={{
          title: 'Trending',
          tabBarIcon: ({ color }) => (
            <MaterialCommunityIcons name="trending-up" size={24} color={color} />
          ),
        }}
      />
    </Tabs>
  );
}

================================================================================
File: app/(tabs)/devices.tsx
================================================================================

import { BluetoothContext } from '@/src/contexts/BluetoothContext';
import AntDesign from '@expo/vector-icons/AntDesign';
import React, { useState, useEffect, useRef, useContext } from 'react';
import {
  View,
  Text,
  FlatList,
  TouchableOpacity,
  StyleSheet,
  ActivityIndicator,
  Alert
} from 'react-native';
import base64 from 'react-native-base64';
import { BleError, BleManager, Characteristic, Device } from 'react-native-ble-plx';

export default function Devices() {

  const [savedDevices, setSavedDevice] = useState<Device[]>([]);
  const [devices, setDevices] = useState<Device[]>([]);
  const [scanning, setScanning] = useState<boolean>(false);

  //Track devices to avoid duplicate keys when scanning
  const undiscoveredDeviceSet = useRef(new Set<string>());

  const bluetoothHandler = useContext(BluetoothContext)!;

  useEffect(() => {
    setSavedDevice(bluetoothHandler.getSavedDevices());
  }, []);

  // THIS WILL decode BONG HIT DATA
  function onDataUpdate(error: BleError | null, characteristic: Characteristic | null) {
    if (error) {
      console.log(error);
      return -1;
    } else if (!characteristic?.value) {
      console.log("No Data was recieved");
      return -1;
    }
    const rawData = base64.decode(characteristic.value);
    Alert.alert(`Raw Data: ${rawData}`);
  }

  function scanDevices(): void {
    const manager: BleManager = bluetoothHandler.getBLEManager();
    setScanning(true);
    setDevices([]);

    manager.startDeviceScan(null, null, (error, device) => {
      if (error) {
        console.error('Error scanning devices:', error.message);
        setScanning(false);
        return;
      }

      if (device && device.name && !undiscoveredDeviceSet.current.has(device.id)) {
        undiscoveredDeviceSet.current.add(device.id); // Add device ID to the Set
        setDevices((prevDevices) => [...prevDevices, device]);
      }
    });

    // Stop scanning after 10 seconds
    setTimeout(() => {
      manager.stopDeviceScan();
      setScanning(false);
    }, 10000);
  };

  // Renders device
  const renderDevice = ({ item }: { item: Device }): JSX.Element => (
    <TouchableOpacity style={styles.deviceItem} onPress={() => bluetoothHandler.connectToDevice(item)}>
      <AntDesign name="hdd" size={24} color="black" />
      <View style={styles.deviceInfo}>
        <Text style={styles.deviceName}>{item.name}</Text>
      </View>
      {item.id === bluetoothHandler.getConnectedDevice()?.id ? <Text>Connected</Text> : <Text>Not Connected</Text>}
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <View style={styles.devicesFlatMapContainer}>
        <View style={styles.header}>
          <Text style={styles.headerText}>My Devices</Text>
        </View>
        <FlatList
          data={savedDevices}
          keyExtractor={(item) => item.id}
          renderItem={renderDevice}
          contentContainerStyle={styles.list}
        />
      </View>
      <View style={styles.devicesFlatMapContainer}>
        <View style={styles.header}>
          <Text style={styles.headerText}>Other Devices</Text>
        </View>
        <TouchableOpacity style={styles.scanButton} onPress={scanDevices} disabled={scanning}>
          <Text style={styles.scanButtonText}>
            {scanning ? 'Scanning...' : 'Scan for Devices'}
          </Text>
        </TouchableOpacity>
        {scanning && <ActivityIndicator style={styles.loader} size="large" color="#007AFF" />}
        <FlatList
          data={devices}
          keyExtractor={(item) => item.id}
          renderItem={renderDevice}
          contentContainerStyle={styles.list}
        />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f8f8',
  },
  devicesFlatMapContainer: {
    marginBottom: 20
  },
  header: {
    backgroundColor: '#ffffff',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#e6e6e6'
  },
  headerText: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#000',
  },
  scanButton: {
    backgroundColor: '#12a35f',
    padding: 12,
    margin: 16,
    borderRadius: 8,
    alignItems: 'center',
  },
  scanButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  loader: {
    marginTop: 10,
  },
  list: {
    padding: 16,
  },
  deviceItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e6e6e6',
    borderRadius: 6,
    marginVertical: 4,
  },
  deviceInfo: {
    marginLeft: 12,
    flex: 1,
  },
  deviceName: {
    fontSize: 16,
    fontWeight: '500',
  },
  deviceId: {
    color: '#8e8e93',
    fontSize: 12,
  },
});


================================================================================
File: app/(tabs)/index.tsx
================================================================================

import { Redirect } from 'expo-router';

export default function Index() {
  return <Redirect href="/mydata" />;
}

================================================================================
File: app/(tabs)/journal.tsx
================================================================================

import React, { useState } from 'react';
import { View, Text, Modal, TextInput, Button, StyleSheet } from 'react-native';
import { Calendar } from 'react-native-calendars';

export default function JournalCalendar() {
  const [selectedDate, setSelectedDate] = useState('');
  const [modalVisible, setModalVisible] = useState(false);
  const [entries, setEntries] = useState({});
  const [currentEntry, setCurrentEntry] = useState('');

  const handleDayPress = (day) => {
    const date = day.dateString;
    setSelectedDate(date);
    setCurrentEntry(entries[date] || '');
    setModalVisible(true);
  };

  const saveEntry = () => {
    setEntries({ ...entries, [selectedDate]: currentEntry });
    setModalVisible(false);
  };

  return (
    <View style={styles.container}>
      {/* Calendar */}
      <Calendar
        onDayPress={handleDayPress}
        markedDates={{
          ...Object.keys(entries).reduce((acc, date) => {
            acc[date] = { marked: true };
            return acc;
          }, {}),
          [selectedDate]: { selected: true, selectedColor: '#12a35f' },
        }}
      />

      {/* Modal for journal entry */}
      <Modal
        visible={modalVisible}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setModalVisible(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>
              Journal Entry for {selectedDate}
            </Text>
            <TextInput
              style={styles.input}
              multiline
              placeholder="Write your journal entry here..."
              value={currentEntry}
              onChangeText={setCurrentEntry}
            />
            <View style={styles.modalButtons}>
              <Button title="Save" onPress={saveEntry} />
              <Button title="Cancel" onPress={() => setModalVisible(false)} />
            </View>
          </View>
        </View>
      </Modal>

      {/* Display Saved Entries */}
      <View style={styles.entriesContainer}>
        <Text style={styles.entriesTitle}>Saved Journal Entries:</Text>
        {Object.keys(entries).length > 0 ? (
          Object.entries(entries).map(([date, entry]) => (
            <View key={date} style={styles.entry}>
              <Text style={styles.entryDate}>{date}</Text>
              <Text style={styles.entryText}>{entry}</Text>
            </View>
          ))
        ) : (
          <Text>No journal entries yet.</Text>
        )}
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 10,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    width: '80%',
    backgroundColor: 'white',
    borderRadius: 10,
    padding: 20,
    alignItems: 'center',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  input: {
    width: '100%',
    height: 100,
    borderColor: '#ddd',
    borderWidth: 1,
    borderRadius: 5,
    padding: 10,
    textAlignVertical: 'top',
    marginBottom: 20,
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    width: '100%',
  },
  entriesContainer: {
    marginTop: 20,
  },
  entriesTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  entry: {
    marginBottom: 10,
  },
  entryDate: {
    fontWeight: 'bold',
  },
  entryText: {
    fontSize: 14,
  },
});


================================================================================
File: app/(tabs)/mydata.tsx
================================================================================

import React, { memo, useCallback, useState } from 'react';
import { View, StyleSheet } from 'react-native';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import { useRouter } from 'expo-router';
import { COLORS } from '../../src/constants';
import { useDataService } from '../../src/hooks/useDataService';
import Animated, { FadeIn } from 'react-native-reanimated';

// Import components from their new structure
import LoadingView from '../components/shared/LoadingView';
import ErrorView from '../components/shared/ErrorView';
import Header from '../components/mydata/Header';
import Section from '../components/mydata/Section';
import NotificationBanner from '../components/mydata/NotificationBanner';
import MedicalCard from '../components/mydata/MedicalCard';
import DailyAverageCard from '../components/mydata/DailyAverageCard';
import WeeklyUsageBanner from '../components/mydata/WeeklyUsageBanner';
import WeeklyOverviewChart from '../components/charts/WeeklyOverviewChart';
import MonthlyOverviewChart from '../components/charts/MonthlyOverviewChart';
import StatsOverviewCard from '../components/StatsOverviewCard';
import TimeDistributionCard from '../components/TimeDistributionCard';

// Import new components
import GoalTrackingCard from '../components/mydata/GoalTrackingCard';
import SetGoalModal from '../components/mydata/SetGoalModal';
import StrainUsageCard from '../components/mydata/StrainUsageCard';

const ROUTES = {
  DAILY_AVERAGE: "/dataOverviews/dailyAverageOverview",
  WEEKLY_AVERAGE: "/dataOverviews/weeklyAverage",
  WEEKLY_OVERVIEW: "/dataOverviews/weeklyOverview",
  MONTHLY_OVERVIEW: "/dataOverviews/monthlyOverview",
  STRAIN_USAGE: "/dataOverviews/strainUsage",
} as const;

export default memo(function MyData() {
  const router = useRouter();
  const [showNotification, setShowNotification] = useState(true);
  const [goalModalVisible, setGoalModalVisible] = useState(false);
  const [dailyGoal, setDailyGoal] = useState(10); // Default goal
  
  const { 
    weeklyData, 
    monthlyData, 
    usageStats, 
    timeDistribution,
    isLoading, 
    error 
  } = useDataService();

  const handleNavigation = useCallback((route: keyof typeof ROUTES) => {
    router.push(ROUTES[route] as any);
  }, [router]);

  // Sample strain data - in a real app, this would come from your database
  const mockStrainData = [
    {
      strainId: 1,
      strainName: "Blue Dream",
      strainType: "Hybrid",
      usageCount: 42,
      percentageOfTotal: 35.6
    },
    {
      strainId: 2,
      strainName: "OG Kush",
      strainType: "Indica",
      usageCount: 28,
      percentageOfTotal: 23.7
    },
    {
      strainId: 3,
      strainName: "Sour Diesel",
      strainType: "Sativa",
      usageCount: 18,
      percentageOfTotal: 15.3
    }
  ];

  if (isLoading) return <LoadingView />;
  if (error) return <ErrorView error={error} />;

  const weekdayAvg = usageStats.weekdayStats?.weekday.avg || 0;
  const weekendAvg = usageStats.weekdayStats?.weekend.avg || 0;
  const percentageChange = weekdayAvg > 0 ? ((weekendAvg - weekdayAvg) / weekdayAvg) * 100 : 0;

  return (
    <SafeAreaProvider>
      <Animated.ScrollView 
        style={styles.container}
        contentContainerStyle={styles.contentContainer}
        showsVerticalScrollIndicator={false}
        entering={FadeIn.duration(200)}
        scrollEventThrottle={16}
        removeClippedSubviews={true}
      >
        <Header />

        <View style={styles.mainContent}>
          {/* Goals Section */}
          <Section title="Goals & Tracking">
            <GoalTrackingCard
              currentUsage={usageStats.averageHitsPerDay}
              goalUsage={dailyGoal}
              onEditGoal={() => setGoalModalVisible(true)}
            />
          </Section>

          <Section title="Notifications & Medical">
            {showNotification && (
              <NotificationBanner
                averageHits={usageStats.averageHitsPerDay}
                percentageChange={percentageChange}
                onDismiss={() => setShowNotification(false)}
              />
            )}
            <MedicalCard />
          </Section>

          <Section title="Usage Overview">
            <DailyAverageCard
              data={weeklyData}
              averageHits={usageStats.averageHitsPerDay}
              onPress={() => handleNavigation("DAILY_AVERAGE")}
            />
            <WeeklyUsageBanner
              weeklyData={weeklyData}
              average={usageStats.averageHitsPerDay}
              onPress={() => handleNavigation("WEEKLY_AVERAGE")}
            />
          </Section>

          <Section title="Analytics">
            <StrainUsageCard
              strainData={mockStrainData}
              totalHits={usageStats.totalHits || 100}
              onViewAll={() => handleNavigation("STRAIN_USAGE")}
            />
          </Section>

          <Section title="Usage Charts">
            <WeeklyOverviewChart 
              data={weeklyData}
              onPress={() => handleNavigation("WEEKLY_OVERVIEW")}
            />
            <MonthlyOverviewChart 
              data={monthlyData}
              onPress={() => handleNavigation("MONTHLY_OVERVIEW")}
            />
          </Section>

          <Section title="Detailed Statistics">
            <StatsOverviewCard stats={usageStats} />
            <TimeDistributionCard timeData={timeDistribution} />
          </Section>
        </View>
      </Animated.ScrollView>

      {/* Goal Setting Modal */}
      <SetGoalModal
        visible={goalModalVisible}
        onClose={() => setGoalModalVisible(false)}
        onSave={(goal) => setDailyGoal(goal)}
        currentGoal={dailyGoal}
      />
    </SafeAreaProvider>
  );
});

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  contentContainer: {
    paddingBottom: 32,
  },
  mainContent: {
    paddingHorizontal: 20,
  },
});

================================================================================
File: app/(tabs)/trending.tsx
================================================================================

// app/(tabs)/trending.tsx
import React, { useState, useCallback, useEffect, memo, useMemo } from 'react';
import { View, Text, StyleSheet, Platform } from 'react-native';
import { useRouter } from 'expo-router';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import { useStrains } from '../../src/hooks/useStrains';
import { COLORS } from '../../src/constants';
import { StrainSearchFilters } from '../../src/services/StrainService';
import { Strain } from '../../src/dbManager';
import { LinearGradient } from 'expo-linear-gradient';
import LoadingView from '../components/shared/LoadingView';
import Header from '../components/trending/Header';
import StrainsList from '../components/trending/StrainsList';
import CompareBar from '../components/trending/CompareBar';
import SearchFilters from '../components/trending/SearchFilters';
import { hasActiveFilters } from '../../src/utils/filters';
import Animated, { FadeIn } from 'react-native-reanimated';

const TrendingScreen = memo(() => {
  const router = useRouter();
  const [searchQuery, setSearchQuery] = useState('');
  const [showFilters, setShowFilters] = useState(false);
  const [compareList, setCompareList] = useState<Strain[]>([]);
  const [filters, setFilters] = useState<StrainSearchFilters>({
    geneticType: undefined,
    effects: [],
    sort: 'rating'
  });

  const { 
    strains,
    popularStrains,
    categories,
    isLoading,
    error,
    searchStrains,
    clearSearch,
    loadMore,
    toggleFavorite,
    isFavorite,
    pagination
  } = useStrains();

  useEffect(() => {
    const delaySearch = setTimeout(() => {
      if (searchQuery.trim() || hasActiveFilters(filters)) {
        searchStrains(searchQuery, filters);
      } else {
        clearSearch();
      }
    }, 300);

    return () => clearTimeout(delaySearch);
  }, [searchQuery, filters, searchStrains, clearSearch]);

  const handleFilterChange = useCallback((newFilters: StrainSearchFilters) => {
    setFilters(newFilters);
  }, []);

  const handleApplyFilters = useCallback(() => {
    setShowFilters(false);
  }, []);

  const handleClearSearch = useCallback(() => {
    setSearchQuery('');
    setFilters({
      geneticType: undefined,
      effects: [],
      sort: 'rating'
    });
    clearSearch();
  }, [clearSearch]);

  const handleCompareToggle = useCallback((strain: Strain) => {
    setCompareList(prev => {
      if (prev.some(s => s.id === strain.id)) {
        return prev.filter(s => s.id !== strain.id);
      }
      if (prev.length >= 3) return prev;
      return [...prev, strain];
    });
  }, []);

  const handleCompare = useCallback(() => {
    if (compareList.length >= 2) {
      router.push({
        pathname: "/dataOverviews/compare",
        params: { ids: compareList.map(s => s.id).join(',') }
      } as any);
    }
  }, [compareList, router]);

  // Memoize the displayed strains to prevent unnecessary re-renders
  const displayedStrains = useMemo(() => 
    searchQuery.trim() || hasActiveFilters(filters) ? strains : popularStrains,
    [searchQuery, filters, strains, popularStrains]
  );

  // Memoize the section title
  const sectionTitle = useMemo(() => 
    searchQuery.trim() || hasActiveFilters(filters) 
      ? `Search Results (${pagination.total})`
      : "Popular Strains",
    [searchQuery, filters, pagination.total]
  );

  if (isLoading && !strains.length && !popularStrains.length) {
    return <LoadingView />;
  }

  return (
    <SafeAreaProvider>
      <View style={styles.container}>
        {/* Black background */}
        <View style={StyleSheet.absoluteFillObject} />
        
        {/* Header with glow effect */}
        <LinearGradient
          colors={['rgba(0, 230, 118, 0.15)', 'transparent']}
          style={styles.headerGradient}
          start={{ x: 0.5, y: 0 }}
          end={{ x: 0.5, y: 0.3 }}
        />
        
        <Header 
          searchQuery={searchQuery}
          setSearchQuery={setSearchQuery}
          showFilters={showFilters}
          setShowFilters={setShowFilters}
          filters={filters}
          handleClearSearch={handleClearSearch}
        />

        {showFilters && (
          <Animated.View 
            entering={FadeIn.duration(300)}
            style={styles.filtersContainer}
          >
            <SearchFilters
              filters={filters}
              onFilterChange={handleFilterChange}
              onApplyFilters={handleApplyFilters}
              categories={categories}
            />
          </Animated.View>
        )}

        <View style={styles.mainContent}>
          <View style={styles.sectionHeaderContainer}>
            <LinearGradient
              colors={['rgba(0, 230, 118, 0.12)', 'transparent']}
              style={styles.sectionHeaderGradient}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 0 }}
            />
            <Text style={styles.sectionTitle}>{sectionTitle}</Text>
          </View>
          
          {/* Don't wrap this in a ScrollView since StrainsList is already virtualized */}
          <View style={styles.listWrapper}>
            <StrainsList
              strains={displayedStrains}
              onCompareToggle={handleCompareToggle}
              onFavoriteToggle={toggleFavorite}
              compareList={compareList}
              isFavorite={isFavorite}
              isLoading={isLoading}
              onEndReached={loadMore}
            />
          </View>
        </View>

        {compareList.length > 0 && (
          <CompareBar
            compareList={compareList}
            onCompareToggle={handleCompareToggle}
            onCompare={handleCompare}
          />
        )}
      </View>
    </SafeAreaProvider>
  );
});

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000000', // Jet black background
  },
  headerGradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    height: 150,
    zIndex: 0,
  },
  filtersContainer: {
    paddingHorizontal: 20,
    paddingBottom: 16,
    marginTop: 8,
    zIndex: 1,
  },
  mainContent: {
    flex: 1,
    paddingHorizontal: 20,
  },
  sectionHeaderContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
    paddingVertical: 10,
    position: 'relative',
  },
  sectionHeaderGradient: {
    position: 'absolute',
    left: -20,
    right: -20,
    top: 0,
    bottom: 0,
    height: '100%',
    borderRadius: 8,
  },
  sectionTitle: {
    fontSize: 22,
    fontWeight: '700',
    color: COLORS.text.primary,
    letterSpacing: 0.5,
    textShadowColor: 'rgba(0, 230, 118, 0.5)',
    textShadowOffset: { width: 0, height: 0 },
    textShadowRadius: 4,
  },
  listWrapper: {
    flex: 1,
  }
});

export default TrendingScreen;

================================================================================
File: app/components/charts/BarChart.tsx
================================================================================

import React from 'react';
import { View, Text, StyleSheet, Dimensions } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { COLORS } from '../../../src/constants';

interface BarChartProps {
  data: number[];
  labels: string[];
  maxValue?: number;
  barColor?: string;
}

const BarChart: React.FC<BarChartProps> = ({ 
  data, 
  labels, 
  maxValue: propMaxValue, 
  barColor = COLORS.primary
}) => {
  // Calculate maxValue if not provided
  const maxValue = propMaxValue || Math.max(...data) * 1.2; // Add 20% padding
  const chartHeight = 220;
  const divisions = 5; // Number of horizontal lines

  // Generate y-axis labels
  const yAxisLabels = Array.from({ length: divisions + 1 }, (_, i) => {
    const value = (maxValue / divisions) * (divisions - i);
    return Math.round(value).toString();
  });

  return (
    <View style={styles.container}>
      {/* Y-axis labels */}
      <View style={styles.yAxis}>
        {yAxisLabels.map((label, index) => (
          <Text key={index} style={styles.yAxisLabel}>
            {label}
          </Text>
        ))}
      </View>

      {/* Chart area */}
      <View style={styles.chartArea}>
        {/* Horizontal grid lines */}
        {yAxisLabels.map((_, index) => (
          <View 
            key={index} 
            style={[
              styles.gridLine,
              { top: (chartHeight / divisions) * index }
            ]} 
          />
        ))}

        {/* Bars */}
        <View style={styles.barsContainer}>
          {data.map((value, index) => {
            const barHeight = (value / maxValue) * chartHeight;
            
            return (
              <View key={index} style={styles.barWrapper}>
                <View style={styles.barLabelContainer}>
                  <Text style={styles.barValue}>{value}</Text>
                </View>
                <View style={[styles.barBackground, { height: barHeight }]}>
                  <LinearGradient
                    colors={[
                      `${barColor}CC`, // 80% opacity
                      `${barColor}66`, // 40% opacity
                    ]}
                    style={[styles.bar, { height: '100%' }]}
                    start={{ x: 0, y: 0 }}
                    end={{ x: 0, y: 1 }}
                  />
                </View>
                <Text style={styles.xAxisLabel}>{labels[index]}</Text>
              </View>
            );
          })}
        </View>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    height: 280, // Include space for labels
    paddingRight: 10,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    borderRadius: 12,
    padding: 16,
  },
  yAxis: {
    width: 50,
    justifyContent: 'space-between',
    marginRight: 10,
  },
  yAxisLabel: {
    color: COLORS.text.secondary,
    fontSize: 12,
    textAlign: 'right',
  },
  chartArea: {
    flex: 1,
    height: 220,
    position: 'relative',
  },
  gridLine: {
    position: 'absolute',
    left: 0,
    right: 0,
    height: 1,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
  },
  barsContainer: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'flex-end',
    justifyContent: 'space-between',
    height: '100%',
  },
  barWrapper: {
    flex: 1,
    alignItems: 'center',
    height: '100%',
    justifyContent: 'flex-end',
  },
  barLabelContainer: {
    position: 'absolute',
    top: -20,
    width: '100%',
    alignItems: 'center',
  },
  barValue: {
    color: COLORS.text.primary,
    fontSize: 12,
    fontWeight: '600',
  },
  barBackground: {
    width: '60%',
    borderTopLeftRadius: 3,
    borderTopRightRadius: 3,
    overflow: 'hidden',
  },
  bar: {
    width: '100%',
    borderTopLeftRadius: 3,
    borderTopRightRadius: 3,
  },
  xAxisLabel: {
    color: COLORS.text.secondary,
    fontSize: 12,
    marginTop: 8,
  },
});

export default BarChart; 

================================================================================
File: app/components/charts/ChartStyles.ts
================================================================================

import { StyleSheet } from 'react-native';
import { COLORS } from '../../../src/constants';

const chartStyles = StyleSheet.create({
  card: {
    backgroundColor: COLORS.cardBackground,
    marginHorizontal: 16,
    marginVertical: 8,
    borderRadius: 20,
    padding: 20,
    shadowColor: COLORS.primary,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 15,
    elevation: 4,
    borderWidth: 1,
    borderColor: 'rgba(0, 230, 118, 0.08)',
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 12,
  },
  headerIcon: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: 'rgba(0, 230, 118, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: COLORS.text.primary,
    marginLeft: 12,
    letterSpacing: 0.38,
  },
  description: {
    fontSize: 15,
    color: COLORS.text.secondary,
    marginTop: 4,
    marginBottom: 20,
    letterSpacing: -0.24,
    lineHeight: 20,
  },
  chartWrapper: {
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    borderRadius: 16,
    padding: 16,
    marginTop: 8,
  },
  chartContainer: {
    borderRadius: 16,
    overflow: 'hidden',
  },
});

export default chartStyles; 

================================================================================
File: app/components/charts/LineChart.tsx
================================================================================

import React from 'react';
import { View, StyleSheet, Dimensions } from 'react-native';
import { LineChart as RNLineChart } from 'react-native-chart-kit';
import { COLORS } from '../../../src/constants';

interface LineChartProps {
  data: number[];
  labels: string[];
  color?: string;
  width?: number;
  height?: number;
}

const screenWidth = Dimensions.get('window').width;

const LineChart: React.FC<LineChartProps> = ({
  data,
  labels,
  color = COLORS.primary,
  width = screenWidth - 64,
  height = 220
}) => {
  const chartConfig = {
    backgroundColor: 'transparent',
    backgroundGradientFrom: 'transparent',
    backgroundGradientTo: 'transparent',
    decimalPlaces: 0,
    color: (opacity = 1) => `rgba(0, 230, 118, ${opacity})`,
    labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity * 0.7})`,
    style: {
      borderRadius: 16
    },
    propsForDots: {
      r: '5',
      strokeWidth: '2',
      stroke: color
    },
    propsForBackgroundLines: {
      strokeDasharray: '5, 5',
      stroke: 'rgba(255, 255, 255, 0.1)',
      strokeWidth: 1
    },
    propsForLabels: {
      fontSize: 10
    }
  };

  return (
    <View style={styles.container}>
      <RNLineChart
        data={{
          labels,
          datasets: [
            {
              data,
              color: (opacity = 1) => color ? `${color}${Math.round(opacity * 255).toString(16).padStart(2, '0')}` : `rgba(0, 230, 118, ${opacity})`,
              strokeWidth: 2
            }
          ]
        }}
        width={width}
        height={height}
        chartConfig={chartConfig}
        bezier
        style={styles.chart}
        withInnerLines={true}
        withOuterLines={false}
        withHorizontalLabels={true}
        withVerticalLabels={true}
        withDots={true}
        segments={5}
        fromZero={true}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  chart: {
    borderRadius: 16,
    paddingRight: 16,
  }
});

export default LineChart; 

================================================================================
File: app/components/charts/MonthlyOverviewChart.tsx
================================================================================

import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet, Platform, Dimensions } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { COLORS } from '../../../src/constants';
import Animated, { FadeIn } from 'react-native-reanimated';
import { LineChart } from 'react-native-chart-kit';
import { ChartDataPoint } from '../../../src/types';

interface MonthlyOverviewChartProps {
  data: ChartDataPoint[];
  onPress?: () => void;
}

const MonthlyOverviewChart: React.FC<MonthlyOverviewChartProps> = ({ data, onPress }) => {
  const chartData = {
    labels: data.map(item => item.label),
    datasets: [{
      data: data.map(item => item.value)
    }]
  };

  // Calculate monthly stats
  const totalHits = data.reduce((sum, month) => sum + month.value, 0);
  const avgHits = totalHits / data.length;
  const maxHits = Math.max(...data.map(month => month.value));
  const maxMonth = data.find(month => month.value === maxHits)?.label || '';
  const monthlyGrowth = data.length > 1 
    ? ((data[data.length - 1].value - data[0].value) / data[0].value * 100).toFixed(1)
    : '0';

  return (
    <Animated.View 
      entering={FadeIn.duration(400)}
      style={styles.container}
    >
      <TouchableOpacity 
        onPress={onPress}
        style={styles.touchable}
        activeOpacity={0.9}
      >
        <LinearGradient
          colors={[
            'rgba(0,230,118,0.15)',
            'rgba(0,230,118,0.05)',
            'transparent'
          ]}
          style={StyleSheet.absoluteFill}
          start={{ x: 0, y: 0 }}
          end={{ x: 0, y: 1 }}
        />
        
        <View style={styles.content}>
          {/* Header */}
          <View style={styles.headerRow}>
            <View style={styles.titleContainer}>
              <Text style={styles.title}>Monthly Overview</Text>
              <Text style={styles.subtitle}>
                {avgHits.toFixed(1)} hits/month average
              </Text>
            </View>
            
            <LinearGradient
              colors={['rgba(0,230,118,0.2)', 'rgba(0,230,118,0.1)']}
              style={styles.iconContainer}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 1 }}
            >
              <MaterialCommunityIcons 
                name="chart-areaspline" 
                size={24} 
                color={COLORS.primary}
              />
            </LinearGradient>
          </View>

          {/* Chart */}
          <View style={styles.chartContainer}>
            <LineChart
              data={chartData}
              width={Dimensions.get('window').width - 80}
              height={180}
              yAxisLabel=""
              chartConfig={{
                backgroundColor: 'transparent',
                backgroundGradientFrom: 'transparent',
                backgroundGradientTo: 'transparent',
                decimalPlaces: 0,
                color: (opacity = 1) => `rgba(0, 230, 118, ${opacity})`,
                labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,
                style: {
                  borderRadius: 16,
                },
                propsForDots: {
                  r: "6",
                  strokeWidth: "2",
                  stroke: COLORS.primary
                },
                fillShadowGradient: COLORS.primary,
                fillShadowGradientOpacity: 0.2
              }}
              bezier
              style={styles.chart}
              withInnerLines={false}
              withOuterLines={true}
              withVerticalLines={false}
              withHorizontalLines={true}
              withVerticalLabels={true}
              withHorizontalLabels={true}
            />
          </View>

          {/* Stats */}
          <View style={styles.statsContainer}>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Total Hits</Text>
              <Text style={styles.statValue}>{totalHits}</Text>
            </View>
            <View style={styles.statDivider} />
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Peak Month</Text>
              <Text style={styles.statValue}>{maxMonth}</Text>
            </View>
            <View style={styles.statDivider} />
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Growth</Text>
              <View style={styles.changeContainer}>
                <MaterialCommunityIcons 
                  name={Number(monthlyGrowth) >= 0 ? "trending-up" : "trending-down"} 
                  size={16} 
                  color={Number(monthlyGrowth) >= 0 ? COLORS.primary : '#FF5252'} 
                />
                <Text style={[
                  styles.changeText,
                  { color: Number(monthlyGrowth) >= 0 ? COLORS.primary : '#FF5252' }
                ]}>
                  {Math.abs(Number(monthlyGrowth))}%
                </Text>
              </View>
            </View>
          </View>

          {/* View More Button */}
          <View style={styles.buttonContainer}>
            <LinearGradient
              colors={[COLORS.primary, COLORS.primaryDark]}
              style={styles.button}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 1 }}
            >
              <Text style={styles.buttonText}>View Monthly Analysis</Text>
              <MaterialCommunityIcons 
                name="chevron-right" 
                size={20} 
                color="#FFF"
              />
            </LinearGradient>
          </View>
        </View>
      </TouchableOpacity>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  container: {
    borderRadius: 20,
    overflow: 'hidden',
    backgroundColor: Platform.select({
      ios: 'rgba(26, 26, 26, 0.8)',
      android: 'rgba(26, 26, 26, 0.95)',
    }),
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
    ...Platform.select({
      ios: {
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.15,
        shadowRadius: 12,
      },
      android: {
        elevation: 6,
      },
    }),
  },
  touchable: {
    width: '100%',
  },
  content: {
    padding: 20,
  },
  headerRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 16,
  },
  titleContainer: {
    flex: 1,
  },
  title: {
    fontSize: 22,
    fontWeight: '600',
    color: COLORS.text.primary,
    marginBottom: 8,
    letterSpacing: 0.35,
  },
  subtitle: {
    fontSize: 16,
    color: COLORS.text.secondary,
    letterSpacing: 0.25,
  },
  iconContainer: {
    width: 44,
    height: 44,
    borderRadius: 22,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 16,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
  },
  chartContainer: {
    marginVertical: 16,
    alignItems: 'center',
    borderRadius: 16,
    overflow: 'hidden',
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
  },
  chart: {
    marginVertical: 8,
    borderRadius: 16,
  },
  statsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 16,
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: 'rgba(255, 255, 255, 0.1)',
  },
  statItem: {
    flex: 1,
    alignItems: 'center',
  },
  statDivider: {
    width: 1,
    height: 30,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
  },
  statLabel: {
    fontSize: 14,
    color: COLORS.text.tertiary,
    marginBottom: 4,
  },
  statValue: {
    fontSize: 18,
    fontWeight: '600',
    color: COLORS.text.primary,
  },
  changeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  changeText: {
    fontSize: 18,
    fontWeight: '600',
    marginLeft: 4,
  },
  buttonContainer: {
    marginTop: 20,
    alignItems: 'flex-start',
  },
  button: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 20,
    backgroundColor: COLORS.primary,
  },
  buttonText: {
    color: '#FFF',
    fontSize: 14,
    fontWeight: '600',
    marginRight: 4,
  },
});

export default MonthlyOverviewChart; 

================================================================================
File: app/components/charts/WeeklyOverviewChart.tsx
================================================================================

import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet, Platform, Dimensions } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { COLORS } from '../../../src/constants';
import Animated, { FadeIn } from 'react-native-reanimated';
import { LineChart } from 'react-native-chart-kit';
import { ChartDataPoint } from '../../../src/types';

interface WeeklyOverviewChartProps {
  data: ChartDataPoint[];
  onPress?: () => void;
}

const WeeklyOverviewChart: React.FC<WeeklyOverviewChartProps> = ({ data, onPress }) => {
  const chartData = {
    labels: data.map(item => item.label),
    datasets: [{
      data: data.map(item => item.value)
    }]
  };

  // Calculate weekly stats
  const totalHits = data.reduce((sum, day) => sum + day.value, 0);
  const avgHits = totalHits / 7;
  const maxHits = Math.max(...data.map(day => day.value));
  const maxDay = data.find(day => day.value === maxHits)?.label || '';

  return (
    <Animated.View 
      entering={FadeIn.duration(400)}
      style={styles.container}
    >
      <TouchableOpacity 
        onPress={onPress}
        style={styles.touchable}
        activeOpacity={0.9}
      >
        <LinearGradient
          colors={[
            'rgba(0,230,118,0.15)',
            'rgba(0,230,118,0.05)',
            'transparent'
          ]}
          style={StyleSheet.absoluteFill}
          start={{ x: 0, y: 0 }}
          end={{ x: 0, y: 1 }}
        />
        
        <View style={styles.content}>
          {/* Header */}
          <View style={styles.headerRow}>
            <View style={styles.titleContainer}>
              <Text style={styles.title}>Weekly Overview</Text>
              <Text style={styles.subtitle}>
                {avgHits.toFixed(1)} hits/day average
              </Text>
            </View>
            
            <LinearGradient
              colors={['rgba(0,230,118,0.2)', 'rgba(0,230,118,0.1)']}
              style={styles.iconContainer}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 1 }}
            >
              <MaterialCommunityIcons 
                name="chart-line-variant" 
                size={24} 
                color={COLORS.primary}
              />
            </LinearGradient>
          </View>

          {/* Chart */}
          <View style={styles.chartContainer}>
            <LineChart
              data={chartData}
              width={Dimensions.get('window').width - 80}
              height={180}
              yAxisLabel=""
              chartConfig={{
                backgroundColor: 'transparent',
                backgroundGradientFrom: 'transparent',
                backgroundGradientTo: 'transparent',
                decimalPlaces: 0,
                color: (opacity = 1) => `rgba(0, 230, 118, ${opacity})`,
                labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,
                style: {
                  borderRadius: 16,
                },
                propsForDots: {
                  r: "6",
                  strokeWidth: "2",
                  stroke: COLORS.primary
                },
                fillShadowGradient: COLORS.primary,
                fillShadowGradientOpacity: 0.2
              }}
              bezier
              style={styles.chart}
              withInnerLines={false}
              withOuterLines={true}
              withVerticalLines={false}
              withHorizontalLines={true}
              withVerticalLabels={true}
              withHorizontalLabels={true}
            />
          </View>

          {/* Stats */}
          <View style={styles.statsContainer}>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Total Hits</Text>
              <Text style={styles.statValue}>{totalHits}</Text>
            </View>
            <View style={styles.statDivider} />
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Peak Day</Text>
              <Text style={styles.statValue}>{maxDay}</Text>
            </View>
            <View style={styles.statDivider} />
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Max Hits</Text>
              <Text style={styles.statValue}>{maxHits}</Text>
            </View>
          </View>

          {/* View More Button */}
          <View style={styles.buttonContainer}>
            <LinearGradient
              colors={[COLORS.primary, COLORS.primaryDark]}
              style={styles.button}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 1 }}
            >
              <Text style={styles.buttonText}>View Details</Text>
              <MaterialCommunityIcons 
                name="chevron-right" 
                size={20} 
                color="#FFF"
              />
            </LinearGradient>
          </View>
        </View>
      </TouchableOpacity>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  container: {
    borderRadius: 20,
    overflow: 'hidden',
    backgroundColor: Platform.select({
      ios: 'rgba(26, 26, 26, 0.8)',
      android: 'rgba(26, 26, 26, 0.95)',
    }),
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
    ...Platform.select({
      ios: {
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.15,
        shadowRadius: 12,
      },
      android: {
        elevation: 6,
      },
    }),
  },
  touchable: {
    width: '100%',
  },
  content: {
    padding: 20,
  },
  headerRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 16,
  },
  titleContainer: {
    flex: 1,
  },
  title: {
    fontSize: 22,
    fontWeight: '600',
    color: COLORS.text.primary,
    marginBottom: 8,
    letterSpacing: 0.35,
  },
  subtitle: {
    fontSize: 16,
    color: COLORS.text.secondary,
    letterSpacing: 0.25,
  },
  iconContainer: {
    width: 44,
    height: 44,
    borderRadius: 22,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 16,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
  },
  chartContainer: {
    marginVertical: 16,
    alignItems: 'center',
    borderRadius: 16,
    overflow: 'hidden',
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
  },
  chart: {
    marginVertical: 8,
    borderRadius: 16,
  },
  statsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 16,
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: 'rgba(255, 255, 255, 0.1)',
  },
  statItem: {
    flex: 1,
    alignItems: 'center',
  },
  statDivider: {
    width: 1,
    height: 30,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
  },
  statLabel: {
    fontSize: 14,
    color: COLORS.text.tertiary,
    marginBottom: 4,
  },
  statValue: {
    fontSize: 18,
    fontWeight: '600',
    color: COLORS.text.primary,
  },
  buttonContainer: {
    marginTop: 20,
    alignItems: 'flex-start',
  },
  button: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 20,
    backgroundColor: COLORS.primary,
  },
  buttonText: {
    color: '#FFF',
    fontSize: 14,
    fontWeight: '600',
    marginRight: 4,
  },
});

export default WeeklyOverviewChart; 

================================================================================
File: app/components/Header.tsx
================================================================================

import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { COLORS } from '@/src/constants';

interface HeaderProps {
  title: string;
}

export default function Header({ title }: HeaderProps) {
  return (
    <View style={styles.container}>
      <Text style={styles.title}>{title}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: COLORS.background,
  },
  title: {
    fontSize: 28,
    fontWeight: '600',
    color: COLORS.text.primary,
  },
}); 

================================================================================
File: app/components/mydata/DailyAverageCard.tsx
================================================================================

import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet, Platform } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { COLORS } from '../../../src/constants';
import Animated, { FadeIn } from 'react-native-reanimated';
import { ChartDataPoint } from '../../../src/types';

interface DailyAverageCardProps {
  data: ChartDataPoint[];
  averageHits: number;
  onPress: () => void;
}

const DailyAverageCard: React.FC<DailyAverageCardProps> = ({ data, averageHits, onPress }) => {
  return (
    <Animated.View 
      entering={FadeIn.duration(400)}
      style={styles.container}
    >
      <TouchableOpacity 
        onPress={onPress}
        style={styles.touchable}
        activeOpacity={0.9}
      >
        <LinearGradient
          colors={[
            'rgba(0,230,118,0.15)',
            'rgba(0,230,118,0.05)',
            'transparent'
          ]}
          style={StyleSheet.absoluteFill}
          start={{ x: 0, y: 0 }}
          end={{ x: 0, y: 1 }}
        />
        
        <View style={styles.content}>
          <View style={styles.headerRow}>
            <View style={styles.titleContainer}>
              <Text style={styles.title}>Daily Average</Text>
              <Text style={styles.subtitle}>
                {averageHits.toFixed(1)} hits per day
              </Text>
            </View>
            
            <LinearGradient
              colors={['rgba(0,230,118,0.2)', 'rgba(0,230,118,0.1)']}
              style={styles.iconContainer}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 1 }}
            >
              <MaterialCommunityIcons 
                name="chart-bell-curve" 
                size={24} 
                color={COLORS.primary}
              />
            </LinearGradient>
          </View>

          <View style={styles.buttonContainer}>
            <LinearGradient
              colors={[COLORS.primary, COLORS.primaryDark]}
              style={styles.button}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 1 }}
            >
              <Text style={styles.buttonText}>View Details</Text>
              <MaterialCommunityIcons 
                name="chevron-right" 
                size={20} 
                color="#FFF"
              />
            </LinearGradient>
          </View>
        </View>
      </TouchableOpacity>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  container: {
    borderRadius: 20,
    overflow: 'hidden',
    backgroundColor: Platform.select({
      ios: 'rgba(26, 26, 26, 0.8)',
      android: 'rgba(26, 26, 26, 0.95)',
    }),
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
    ...Platform.select({
      ios: {
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.15,
        shadowRadius: 12,
      },
      android: {
        elevation: 6,
      },
    }),
  },
  touchable: {
    width: '100%',
    minHeight: 120,
  },
  content: {
    padding: 20,
  },
  headerRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 20,
  },
  titleContainer: {
    flex: 1,
  },
  title: {
    fontSize: 22,
    fontWeight: '600',
    color: COLORS.text.primary,
    marginBottom: 8,
    letterSpacing: 0.35,
  },
  subtitle: {
    fontSize: 16,
    color: COLORS.text.secondary,
    letterSpacing: 0.25,
  },
  iconContainer: {
    width: 44,
    height: 44,
    borderRadius: 22,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 16,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
  },
  buttonContainer: {
    alignItems: 'flex-start',
  },
  button: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 20,
    backgroundColor: COLORS.primary,
  },
  buttonText: {
    color: '#FFF',
    fontSize: 14,
    fontWeight: '600',
    marginRight: 4,
  },
});

export default DailyAverageCard;

================================================================================
File: app/components/mydata/GoalTrackingCard.tsx
================================================================================

import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { COLORS } from '../../../src/constants';
import Animated, { FadeIn } from 'react-native-reanimated';

interface GoalTrackingCardProps {
  currentUsage: number;
  goalUsage: number;
  onEditGoal: () => void;
}

const GoalTrackingCard = ({ currentUsage, goalUsage, onEditGoal }: GoalTrackingCardProps) => {
  // Calculate percentage of goal reached
  const goalPercentage = Math.min(Math.round((currentUsage / goalUsage) * 100), 100);
  const isExceeded = currentUsage > goalUsage;

  return (
    <Animated.View 
      entering={FadeIn.duration(400)}
      style={styles.container}
    >
      <View style={styles.content}>
        {/* Header with icon */}
        <View style={styles.headerRow}>
          <View style={styles.iconCircle}>
            <MaterialCommunityIcons 
              name="target" 
              size={20} 
              color={COLORS.primary} 
            />
          </View>
          <View style={styles.headerTextContainer}>
            <Text style={styles.title}>Daily Goal Tracking</Text>
            <Text style={styles.subtitle}>
              {isExceeded ? 'Goal exceeded today' : `${goalPercentage}% of daily goal reached`}
            </Text>
          </View>
          <TouchableOpacity onPress={onEditGoal} style={styles.closeButton}>
            <MaterialCommunityIcons 
              name="pencil" 
              size={16} 
              color={COLORS.primary}
            />
          </TouchableOpacity>
        </View>

        {/* Stats Container */}
        <View style={styles.statsContainer}>
          {/* Progress Bar */}
          <View style={styles.progressContainer}>
            <View style={styles.progressBackground}>
              <View 
                style={[
                  styles.progressFill, 
                  { 
                    width: `${Math.min(goalPercentage, 100)}%`,
                    backgroundColor: isExceeded ? '#FF5252' : COLORS.primary
                  }
                ]} 
              />
            </View>
          </View>
          
          {/* Labels */}
          <View style={styles.progressLabels}>
            <Text style={styles.progressText}>{currentUsage.toFixed(2)} hits</Text>
            <Text style={styles.goalText}>Goal: {goalUsage} hits</Text>
          </View>
        </View>

        {/* Button */}
        <TouchableOpacity 
          onPress={onEditGoal}
          style={styles.editButton}
        >
          <Text style={styles.editButtonText}>Edit Goal</Text>
        </TouchableOpacity>
      </View>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  container: {
    borderRadius: 16,
    overflow: 'hidden',
    backgroundColor: '#0C140E',
    borderWidth: 1,
    borderColor: 'rgba(0, 230, 118, 0.1)',
    marginBottom: 12,
  },
  content: {
    padding: 16,
  },
  headerRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  iconCircle: {
    width: 36,
    height: 36,
    borderRadius: 18,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 230, 118, 0.15)',
    marginRight: 12,
  },
  headerTextContainer: {
    flex: 1,
  },
  title: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 2,
  },
  subtitle: {
    fontSize: 13,
    color: 'rgba(255, 255, 255, 0.7)',
  },
  closeButton: {
    width: 28,
    height: 28,
    borderRadius: 14,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 230, 118, 0.1)',
  },
  statsContainer: {
    padding: 12,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    borderRadius: 8,
    marginBottom: 16,
  },
  progressContainer: {
    marginBottom: 8,
  },
  progressBackground: {
    height: 8,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    borderRadius: 4,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    borderRadius: 4,
  },
  progressLabels: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  progressText: {
    fontSize: 13,
    color: 'rgba(255, 255, 255, 0.7)',
  },
  goalText: {
    fontSize: 13,
    color: 'rgba(255, 255, 255, 0.7)',
  },
  editButton: {
    alignSelf: 'center',
    backgroundColor: COLORS.primary,
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 20,
  },
  editButtonText: {
    fontSize: 14,
    color: '#000000',
    fontWeight: '600',
  },
});

export default GoalTrackingCard;

================================================================================
File: app/components/mydata/Header.tsx
================================================================================

import React, { memo } from 'react';
import { View, Text, StyleSheet, Platform } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { COLORS } from '../../../src/constants';

// Gradient configurations
const gradients = {
  header: ['rgba(0,230,118,0.15)', 'rgba(0,230,118,0.05)', 'transparent'] as const,
};

const Header = memo(() => (
  <View style={styles.headerSection}>
    <LinearGradient
      colors={gradients.header}
      style={styles.headerGradient}
      start={{ x: 0, y: 0 }}
      end={{ x: 0, y: 1 }}
    />
    <View style={styles.headerContent}>
      <Text style={styles.headerTitle}>Summary</Text>
      <View style={styles.profileContainer}>
        <MaterialCommunityIcons 
          name="account" 
          size={24} 
          color={COLORS.primary}
        />
      </View>
    </View>
  </View>
));

const styles = StyleSheet.create({
  headerSection: {
    height: 120,
    position: 'relative',
    backgroundColor: 'rgba(26, 26, 26, 0.9)',
    marginBottom: 24,
  },
  headerGradient: {
    ...StyleSheet.absoluteFillObject,
    opacity: 0.8,
  },
  headerContent: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 16,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 34,
    fontWeight: '700',
    color: COLORS.text.primary,
    letterSpacing: 0.5,
  },
  profileContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(0,230,118,0.1)',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'rgba(0, 230, 118, 0.2)',
  },
});

export default Header;

================================================================================
File: app/components/mydata/MedicalCard.tsx
================================================================================

import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
import { MaterialCommunityIcons } from "@expo/vector-icons";
import { LinearGradient } from "expo-linear-gradient";
import { COLORS } from "../../../src/constants";

export default function MedicalCard() {
  return (
    <View style={styles.medicalCard}>
      <LinearGradient
        colors={[
          'rgba(0,230,118,0.15)',
          'rgba(0,230,118,0.05)',
          'transparent'
        ]}
        style={styles.cardGradient}
      />
      
      <View style={styles.cardHeader}>
        <MaterialCommunityIcons 
          name="medical-bag" 
          size={24} 
          color={COLORS.primary}
        />
        <Text style={styles.cardHeaderText}>Medical Info</Text>
      </View>

      <View style={styles.medicalStats}>
        <View style={styles.statItem}>
          <Text style={styles.statLabel}>Strain Type</Text>
          <Text style={styles.statValue}>Hybrid</Text>
        </View>
        <View style={styles.statDivider} />
        <View style={styles.statItem}>
          <Text style={styles.statLabel}>THC Content</Text>
          <Text style={styles.statValue}>18-24%</Text>
        </View>
        <View style={styles.statDivider} />
        <View style={styles.statItem}>
          <Text style={styles.statLabel}>CBD Content</Text>
          <Text style={styles.statValue}>0.1%</Text>
        </View>
      </View>

      <TouchableOpacity style={styles.moreDetailsButton}>
        <Text style={styles.moreDetailsText}>View Medical Details</Text>
        <MaterialCommunityIcons 
          name="chevron-right" 
          size={20} 
          color={COLORS.primary}
        />
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  medicalCard: {
    backgroundColor: COLORS.cardBackground,
    width: '100%',
    marginHorizontal: 2,
    marginVertical: 8,
    borderRadius: 16,
    padding: 16,
    overflow: 'hidden',
    position: 'relative',
    
  },
  cardGradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
  },
  cardHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  cardHeaderText: {
    fontSize: 17,
    fontWeight: '600',
    color: COLORS.text.primary,
    marginLeft: 8,
  },
  medicalStats: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
    paddingHorizontal: 8,
  },
  statItem: {
    flex: 1,
    alignItems: 'center',
  },
  statLabel: {
    fontSize: 13,
    color: COLORS.text.secondary,
    marginBottom: 4,
  },
  statValue: {
    fontSize: 17,
    fontWeight: '600',
    color: COLORS.text.primary,
  },
  statDivider: {
    width: 1,
    height: 40,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    marginHorizontal: 8,
  },
  moreDetailsButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingTop: 16,
    borderTopWidth: 1,
    borderTopColor: 'rgba(255, 255, 255, 0.1)',
  },
  moreDetailsText: {
    fontSize: 15,
    color: COLORS.primary,
  },
});

================================================================================
File: app/components/mydata/NotificationBanner.tsx
================================================================================

import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet, Platform } from 'react-native';
import { MaterialCommunityIcons } from "@expo/vector-icons";
import { LinearGradient } from 'expo-linear-gradient';
import { COLORS } from "../../../src/constants";
import Animated, { 
  FadeIn, 
  FadeInDown, 
  FadeOutUp,
  withTiming,
  runOnJS,
  useAnimatedStyle,
  useSharedValue,
  Layout
} from 'react-native-reanimated';

interface NotificationProps {
  averageHits: number;
  percentageChange: number;
  onDismiss: () => void;
}

const NotificationBanner: React.FC<NotificationProps> = ({ 
  averageHits, 
  percentageChange, 
  onDismiss 
}) => {
  const isIncrease = percentageChange > 0;
  const statusColor = isIncrease ? '#FF5252' : COLORS.primary;

  // Format percentage to 1 decimal place and handle edge cases
  const formattedPercentage = Math.abs(Number(percentageChange.toFixed(1)));

  // Enhanced gradient combinations with type assertions
  const gradientBase = isIncrease 
    ? ['rgba(255,82,82,0.2)', 'rgba(255,82,82,0.08)', 'transparent'] as const
    : ['rgba(0,230,118,0.2)', 'rgba(0,230,118,0.08)', 'transparent'] as const;

  const accentGradient = isIncrease
    ? ['rgba(255,82,82,0.3)', 'rgba(255,82,82,0.15)'] as const
    : ['rgba(0,230,118,0.3)', 'rgba(0,230,118,0.15)'] as const;

  return (
    <Animated.View 
      entering={FadeInDown.springify()}
      exiting={FadeOutUp.springify()}
      layout={Layout.springify()}
      style={styles.container}
    >
      {/* Enhanced Background Gradient */}
      <LinearGradient
        colors={gradientBase}
        style={styles.backgroundGradient}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 1 }}
      />

      {/* Shimmer Effect Layer */}
      <LinearGradient
        colors={['transparent', 'rgba(255,255,255,0.05)', 'transparent'] as const}
        style={styles.shimmerEffect}
        start={{ x: 0, y: 0 }}
        end={{ x: 1, y: 1 }}
      />

      <View style={styles.content}>
        {/* Enhanced Header */}
        <View style={styles.header}>
          <View style={styles.titleRow}>
            <LinearGradient
              colors={accentGradient}
              style={styles.iconContainer}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 1 }}
            >
              <MaterialCommunityIcons 
                name="bell-outline" 
                size={22} 
                color={statusColor}
              />
            </LinearGradient>
            <View style={styles.titleContainer}>
              <Text style={styles.title}>Daily Summary</Text>
              <Text style={styles.subtitle}>Last 24 hours</Text>
            </View>
          </View>
          
          <TouchableOpacity 
            onPress={onDismiss}
            style={styles.dismissButton}
          >
            <LinearGradient
              colors={['rgba(255,255,255,0.1)', 'rgba(255,255,255,0.05)'] as const}
              style={styles.dismissGradient}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 1 }}
            >
              <MaterialCommunityIcons 
                name="close" 
                size={18} 
                color={COLORS.text.secondary}
              />
            </LinearGradient>
          </TouchableOpacity>
        </View>

        {/* Enhanced Stats Container */}
        <View style={styles.statsContainer}>
          <LinearGradient
            colors={['rgba(255,255,255,0.08)', 'rgba(255,255,255,0.03)'] as const}
            style={styles.statsGradient}
            start={{ x: 0, y: 0 }}
            end={{ x: 1, y: 1 }}
          >
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Daily Average</Text>
              <Text style={styles.statValue}>{averageHits.toFixed(1)}</Text>
            </View>
            <View style={styles.statDivider} />
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Change</Text>
              <Text style={[styles.statValue, { color: statusColor }]}>
                {isIncrease ? '+' : '-'}{formattedPercentage}%
              </Text>
            </View>
          </LinearGradient>
        </View>

        {/* Status Message */}
        <View style={styles.messageContainer}>
          <LinearGradient
            colors={accentGradient}
            style={styles.statusIcon}
            start={{ x: 0, y: 0 }}
            end={{ x: 1, y: 1 }}
          >
            <MaterialCommunityIcons
              name={isIncrease ? "trending-up" : "trending-down"}
              size={24}
              color={statusColor}
            />
          </LinearGradient>

          <Text style={styles.messageText}>
            {isIncrease 
              ? 'Your daily average has increased compared to last week'
              : 'Your daily average has decreased compared to last week'
            }
          </Text>
        </View>

        {/* Action Button */}
        <TouchableOpacity style={styles.actionButton}>
          <LinearGradient
            colors={[statusColor, `${statusColor}CC`] as const}
            style={styles.actionGradient}
            start={{ x: 0, y: 0 }}
            end={{ x: 1, y: 0 }}
          >
            <Text style={styles.actionText}>View Details</Text>
            <MaterialCommunityIcons 
              name="chevron-right" 
              size={18} 
              color="#FFF"
            />
          </LinearGradient>
        </TouchableOpacity>
      </View>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  container: {
    borderRadius: 20,
    overflow: 'hidden',
    backgroundColor: COLORS.cardBackground,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
    marginBottom: 16,
    ...Platform.select({
      ios: {
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.2,
        shadowRadius: 12,
      },
      android: {
        elevation: 8,
      },
    }),
  },
  backgroundGradient: {
    ...StyleSheet.absoluteFillObject,
    opacity: 0.8,
  },
  shimmerEffect: {
    ...StyleSheet.absoluteFillObject,
    opacity: 0.4,
  },
  content: {
    padding: 20,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,
  },
  titleRow: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  iconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.15)',
  },
  titleContainer: {
    marginLeft: 12,
  },
  title: {
    fontSize: 18,
    fontWeight: '600',
    color: COLORS.text.primary,
    marginBottom: 4,
  },
  subtitle: {
    fontSize: 13,
    color: COLORS.text.secondary,
  },
  dismissButton: {
    borderRadius: 15,
    overflow: 'hidden',
  },
  dismissGradient: {
    width: 30,
    height: 30,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 15,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
  },
  statsContainer: {
    borderRadius: 16,
    overflow: 'hidden',
    marginBottom: 20,
  },
  statsGradient: {
    flexDirection: 'row',
    padding: 16,
    alignItems: 'center',
    justifyContent: 'space-around',
  },
  statItem: {
    flex: 1,
    alignItems: 'center',
  },
  statLabel: {
    fontSize: 13,
    color: COLORS.text.secondary,
    marginBottom: 4,
  },
  statValue: {
    fontSize: 20,
    fontWeight: '600',
    color: COLORS.text.primary,
  },
  statDivider: {
    width: 1,
    height: 40,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    marginHorizontal: 16,
  },
  messageContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.03)',
    padding: 12,
    borderRadius: 12,
  },
  statusIcon: {
    width: 36,
    height: 36,
    borderRadius: 18,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.15)',
  },
  messageText: {
    flex: 1,
    fontSize: 14,
    color: COLORS.text.secondary,
    lineHeight: 20,
  },
  actionButton: {
    borderRadius: 20,
    overflow: 'hidden',
  },
  actionGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 20,
  },
  actionText: {
    fontSize: 15,
    fontWeight: '600',
    color: '#FFF',
    marginRight: 4,
  },
});

export default NotificationBanner;

================================================================================
File: app/components/mydata/Section.tsx
================================================================================

import React, { memo } from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { COLORS } from '@/src/constants';

// Gradient configurations
const gradients = {
  section: ['rgba(0,230,118,0.1)', 'rgba(0,230,118,0.02)', 'transparent'] as const,
  divider: ['rgba(0,230,118,0.1)', 'transparent'] as const,
};

interface SectionProps {
  title: string;
  children: React.ReactNode;
}

const Section = memo(({ title, children }: SectionProps) => (
  <View style={styles.sectionWrapper}>
    <LinearGradient
      colors={gradients.divider}
      style={styles.sectionDivider}
      start={{ x: 0, y: 0 }}
      end={{ x: 1, y: 0 }}
    />
    <View style={styles.section}>
      <LinearGradient
        colors={gradients.section}
        style={styles.sectionGradient}
        start={{ x: 0, y: 0 }}
        end={{ x: 0, y: 1 }}
      />
      <View style={styles.sectionHeader}>
        <Text style={styles.sectionTitle}>{title}</Text>
      </View>
      <View style={styles.sectionContent}>
        {children}
      </View>
    </View>
  </View>
));

const styles = StyleSheet.create({
  sectionWrapper: {
    marginBottom: 32,
    position: 'relative',
  },
  sectionDivider: {
    height: 1,
    width: '100%',
    marginBottom: 16,
  },
  section: {
    borderRadius: 16,
    overflow: 'hidden',
    backgroundColor: 'rgba(26, 26, 26, 0.85)',
  },
  sectionGradient: {
    ...StyleSheet.absoluteFillObject,
    opacity: 0.5,
  },
  sectionHeader: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0, 230, 118, 0.1)',
    marginBottom: 8,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: COLORS.text.primary,
    letterSpacing: 0.5,
  },
  sectionContent: {
    padding: 12,
    gap: 12,
  },
});

export default Section;

================================================================================
File: app/components/mydata/SetGoalModal.tsx
================================================================================

import React, { useState } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  Modal, 
  TouchableOpacity, 
  TextInput,
  TouchableWithoutFeedback,
  Keyboard 
} from 'react-native';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import { COLORS } from '../../../src/constants';

interface SetGoalModalProps {
  visible: boolean;
  onClose: () => void;
  onSave: (goal: number) => void;
  currentGoal: number;
}

const SetGoalModal = ({ visible, onClose, onSave, currentGoal }: SetGoalModalProps) => {
  const [goalValue, setGoalValue] = useState(currentGoal.toString());

  const handleSave = () => {
    const numValue = parseInt(goalValue, 10);
    if (!isNaN(numValue) && numValue > 0) {
      onSave(numValue);
    }
    onClose();
  };

  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="fade"
      onRequestClose={onClose}
    >
      <TouchableWithoutFeedback onPress={() => {
        Keyboard.dismiss();
        onClose();
      }}>
        <View style={styles.modalOverlay}>
          <TouchableWithoutFeedback onPress={(e) => e.stopPropagation()}>
            <View style={styles.modalContent}>
              <View style={styles.modalHeader}>
                <Text style={styles.modalTitle}>Set Daily Goal</Text>
                <TouchableOpacity onPress={onClose} style={styles.closeButton}>
                  <MaterialCommunityIcons 
                    name="close" 
                    size={20} 
                    color="#FFFFFF" 
                  />
                </TouchableOpacity>
              </View>
              
              <Text style={styles.label}>Number of hits per day</Text>
              <TextInput
                style={styles.input}
                value={goalValue}
                onChangeText={setGoalValue}
                keyboardType="numeric"
                placeholder="Enter your goal"
                placeholderTextColor="rgba(255, 255, 255, 0.4)"
              />
              
              <View style={styles.buttonRow}>
                <TouchableOpacity 
                  onPress={onClose}
                  style={styles.cancelButton}
                >
                  <Text style={styles.cancelButtonText}>Cancel</Text>
                </TouchableOpacity>
                
                <TouchableOpacity 
                  onPress={handleSave}
                  style={styles.saveButton}
                >
                  <Text style={styles.saveButtonText}>Save Goal</Text>
                </TouchableOpacity>
              </View>
            </View>
          </TouchableWithoutFeedback>
        </View>
      </TouchableWithoutFeedback>
    </Modal>
  );
};

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    width: '85%',
    backgroundColor: '#0B1B0F', // Darker green background to match screenshot
    borderRadius: 16,
    padding: 20,
    borderWidth: 1,
    borderColor: 'rgba(0, 230, 118, 0.15)',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 24,
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  closeButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  label: {
    fontSize: 15,
    color: 'rgba(255, 255, 255, 0.7)',
    marginBottom: 12,
  },
  input: {
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    borderRadius: 8,
    padding: 14,
    fontSize: 16,
    color: '#FFFFFF',
    marginBottom: 24,
    borderWidth: 1,
    borderColor: 'rgba(0, 230, 118, 0.2)',
  },
  buttonRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  cancelButton: {
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
  },
  cancelButtonText: {
    fontSize: 16,
    color: '#FFFFFF',
  },
  saveButton: {
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    backgroundColor: '#00E676', // Bright green to match your app's theme
  },
  saveButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#000000', // Black text on green button
  },
});

export default SetGoalModal;

================================================================================
File: app/components/mydata/StrainUsageCard.tsx
================================================================================

import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { COLORS } from '../../../src/constants';
import Animated, { FadeIn } from 'react-native-reanimated';

interface StrainUsage {
  strainId: number;
  strainName: string;
  strainType: string;
  usageCount: number;
  percentageOfTotal: number;
}

interface StrainUsageCardProps {
  strainData: StrainUsage[];
  totalHits: number;
  onViewAll: () => void;
}

const StrainUsageCard = ({ strainData, totalHits, onViewAll }: StrainUsageCardProps) => {
  // Just show the top 3 strains
  const topStrains = strainData.slice(0, 3);
  
  return (
    <Animated.View 
      entering={FadeIn.duration(400)}
      style={styles.container}
    >
      <View style={styles.content}>
        {/* Header with icon */}
        <View style={styles.headerRow}>
          <View style={styles.iconCircle}>
            <MaterialCommunityIcons 
              name="cannabis" 
              size={20} 
              color={COLORS.primary}
            />
          </View>
          <View style={styles.headerTextContainer}>
            <Text style={styles.title}>Most Used Strains</Text>
            <Text style={styles.subtitle}>
              Based on your last {totalHits} hits
            </Text>
          </View>
        </View>

        {/* Strains List */}
        <View style={styles.strainsList}>
          {topStrains.map((strain, index) => (
            <View key={strain.strainId} style={styles.strainItem}>
              <View style={styles.strainInfo}>
                <Text style={styles.strainName}>{strain.strainName}</Text>
                <Text style={styles.strainType}>{strain.strainType}</Text>
              </View>
              
              <View style={styles.strainStats}>
                <Text style={styles.usageCount}>{strain.usageCount} hits</Text>
                <View style={styles.percentageContainer}>
                  <View 
                    style={[
                      styles.percentageFill, 
                      { width: `${strain.percentageOfTotal}%` }
                    ]} 
                  />
                </View>
                <Text style={styles.percentageText}>
                  {strain.percentageOfTotal.toFixed(1)}%
                </Text>
              </View>
            </View>
          ))}
        </View>

        {/* View All Button */}
        <TouchableOpacity 
          onPress={onViewAll}
          style={styles.viewDetailsButton}
        >
          <Text style={styles.viewDetailsText}>View Details</Text>
          <MaterialCommunityIcons 
            name="chevron-right" 
            size={16} 
            color="#FFFFFF"
          />
        </TouchableOpacity>
      </View>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  container: {
    borderRadius: 16,
    overflow: 'hidden',
    backgroundColor: '#0C140E',
    borderWidth: 1,
    borderColor: 'rgba(0, 230, 118, 0.1)',
    marginBottom: 12,
  },
  content: {
    padding: 16,
  },
  headerRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  iconCircle: {
    width: 36,
    height: 36,
    borderRadius: 18,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 230, 118, 0.15)',
    marginRight: 12,
  },
  headerTextContainer: {
    flex: 1,
  },
  title: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 2,
  },
  subtitle: {
    fontSize: 13,
    color: 'rgba(255, 255, 255, 0.7)',
  },
  strainsList: {
    gap: 8,
    marginBottom: 16,
  },
  strainItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    borderRadius: 8,
  },
  strainInfo: {
    flex: 1,
  },
  strainName: {
    fontSize: 15,
    fontWeight: '500',
    color: '#FFFFFF',
    marginBottom: 2,
  },
  strainType: {
    fontSize: 13,
    color: COLORS.primary,
  },
  strainStats: {
    flex: 2,
    alignItems: 'flex-end',
  },
  usageCount: {
    fontSize: 13,
    color: 'rgba(255, 255, 255, 0.7)',
    marginBottom: 4,
  },
  percentageContainer: {
    height: 6,
    width: '100%',
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    borderRadius: 3,
    marginBottom: 4,
  },
  percentageFill: {
    height: '100%',
    backgroundColor: COLORS.primary,
    borderRadius: 3,
  },
  percentageText: {
    fontSize: 12,
    color: 'rgba(255, 255, 255, 0.7)',
  },
  viewDetailsButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: COLORS.primary,
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 20,
    alignSelf: 'center',
  },
  viewDetailsText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#000000',
    marginRight: 4,
  },
});

export default StrainUsageCard;

================================================================================
File: app/components/mydata/WeeklyUsageBanner.tsx
================================================================================

import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet, Platform } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { COLORS } from '../../../src/constants';
import Animated, { FadeIn } from 'react-native-reanimated';
import { ChartDataPoint } from '../../../src/types';

interface WeeklyUsageBannerProps {
  weeklyData: ChartDataPoint[];
  average: number;
  onPress: () => void;
}

const WeeklyUsageBanner: React.FC<WeeklyUsageBannerProps> = ({ weeklyData, average, onPress }) => {
  // Calculate the percentage change from last week
  const currentWeekTotal = weeklyData.reduce((sum, day) => sum + day.value, 0);
  const weeklyAverage = currentWeekTotal / 7;
  const percentageChange = ((weeklyAverage - average) / average) * 100;
  
  return (
    <Animated.View 
      entering={FadeIn.duration(400)}
      style={styles.container}
    >
      <TouchableOpacity 
        onPress={onPress}
        style={styles.touchable}
        activeOpacity={0.9}
      >
        <LinearGradient
          colors={[
            'rgba(0,230,118,0.15)',
            'rgba(0,230,118,0.05)',
            'transparent'
          ]}
          style={StyleSheet.absoluteFill}
          start={{ x: 0, y: 0 }}
          end={{ x: 0, y: 1 }}
        />
        
        <View style={styles.content}>
          <View style={styles.headerRow}>
            <View style={styles.titleContainer}>
              <Text style={styles.title}>Weekly Usage</Text>
              <Text style={styles.subtitle}>
                {weeklyAverage.toFixed(1)} average hits per day
              </Text>
            </View>
            
            <LinearGradient
              colors={['rgba(0,230,118,0.2)', 'rgba(0,230,118,0.1)']}
              style={styles.iconContainer}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 1 }}
            >
              <MaterialCommunityIcons 
                name="chart-timeline-variant" 
                size={24} 
                color={COLORS.primary}
              />
            </LinearGradient>
          </View>

          <View style={styles.statsRow}>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Total Hits</Text>
              <Text style={styles.statValue}>{currentWeekTotal}</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>vs Last Week</Text>
              <View style={styles.changeContainer}>
                <MaterialCommunityIcons 
                  name={percentageChange >= 0 ? "trending-up" : "trending-down"} 
                  size={16} 
                  color={percentageChange >= 0 ? COLORS.primary : '#FF5252'} 
                />
                <Text style={[
                  styles.changeText,
                  { color: percentageChange >= 0 ? COLORS.primary : '#FF5252' }
                ]}>
                  {Math.abs(percentageChange).toFixed(1)}%
                </Text>
              </View>
            </View>
          </View>

          <View style={styles.buttonContainer}>
            <LinearGradient
              colors={[COLORS.primary, COLORS.primaryDark]}
              style={styles.button}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 1 }}
            >
              <Text style={styles.buttonText}>View Weekly Analysis</Text>
              <MaterialCommunityIcons 
                name="chevron-right" 
                size={20} 
                color="#FFF"
              />
            </LinearGradient>
          </View>
        </View>
      </TouchableOpacity>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  container: {
    borderRadius: 20,
    overflow: 'hidden',
    backgroundColor: Platform.select({
      ios: 'rgba(26, 26, 26, 0.8)',
      android: 'rgba(26, 26, 26, 0.95)',
    }),
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
    ...Platform.select({
      ios: {
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.15,
        shadowRadius: 12,
      },
      android: {
        elevation: 6,
      },
    }),
  },
  touchable: {
    width: '100%',
    minHeight: 160,
  },
  content: {
    padding: 20,
  },
  headerRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 16,
  },
  titleContainer: {
    flex: 1,
  },
  title: {
    fontSize: 22,
    fontWeight: '600',
    color: COLORS.text.primary,
    marginBottom: 8,
    letterSpacing: 0.35,
  },
  subtitle: {
    fontSize: 16,
    color: COLORS.text.secondary,
    letterSpacing: 0.25,
  },
  iconContainer: {
    width: 44,
    height: 44,
    borderRadius: 22,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 16,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
  },
  statsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 20,
    paddingTop: 8,
  },
  statItem: {
    flex: 1,
  },
  statLabel: {
    fontSize: 14,
    color: COLORS.text.tertiary,
    marginBottom: 4,
  },
  statValue: {
    fontSize: 20,
    fontWeight: '600',
    color: COLORS.text.primary,
  },
  changeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  changeText: {
    fontSize: 20,
    fontWeight: '600',
    marginLeft: 4,
  },
  buttonContainer: {
    alignItems: 'flex-start',
  },
  button: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 20,
    backgroundColor: COLORS.primary,
  },
  buttonText: {
    color: '#FFF',
    fontSize: 14,
    fontWeight: '600',
    marginRight: 4,
  },
});

export default WeeklyUsageBanner;

================================================================================
File: app/components/shared/Card.tsx
================================================================================

import React, { forwardRef } from "react";
import { View, StyleSheet, StyleProp, ViewStyle } from "react-native";
import { COLORS } from '../../../src/constants';

interface CardProps {
    children: React.ReactNode;
    style?: StyleProp<ViewStyle>;
}

export const Card = forwardRef<View, CardProps>(({ children, style }, ref) => {
    return <View ref={ref} style={[styles.card, style]}>{children}</View>;
});

const styles = StyleSheet.create({
    card: {
        backgroundColor: COLORS.cardBackground,
        borderRadius: 16,
        elevation: 6,
        shadowColor: COLORS.primary,
        shadowOffset: {
            width: 0,
            height: 2,
        },
        shadowOpacity: 0.15,
        shadowRadius: 8,
        padding: 16,
        borderWidth: 1,
        borderColor: 'rgba(0, 230, 118, 0.1)',
    }
});

================================================================================
File: app/components/shared/ErrorView.tsx
================================================================================

import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { MaterialCommunityIcons } from "@expo/vector-icons";
import { COLORS } from '@/src/constants';

interface ErrorViewProps {
  error: string;
}

export default function ErrorView({ error }: ErrorViewProps) {
  return (
    <View style={styles.container}>
      <MaterialCommunityIcons 
        name="alert-circle-outline" 
        size={48} 
        color={COLORS.error} 
      />
      <Text style={styles.title}>Error</Text>
      <Text style={styles.message}>{error}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  title: {
    marginTop: 16,
    fontSize: 20,
    fontWeight: '600',
    color: COLORS.text.primary,
  },
  message: {
    marginTop: 8,
    fontSize: 16,
    color: COLORS.text.secondary,
    textAlign: 'center',
  },
});

================================================================================
File: app/components/shared/LoadingView.tsx
================================================================================

import React, { useEffect } from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { MaterialCommunityIcons } from "@expo/vector-icons";
import { COLORS } from '../../../src/constants';
import Animated, { 
  withRepeat, 
  withTiming,
  useAnimatedStyle, 
  useSharedValue,
  FadeIn
} from 'react-native-reanimated';
import { TIMING_CONFIG } from '@/src/utils/animations';

export default function LoadingView() {
  const rotation = useSharedValue(0);

  useEffect(() => {
    rotation.value = withRepeat(
      withTiming(360, {
        ...TIMING_CONFIG,
        duration: 1500 // Slightly slower for smoother rotation
      }),
      -1
    );
  }, []);

  const spinStyle = useAnimatedStyle(() => ({
    transform: [{ rotate: `${rotation.value}deg` }]
  }));

  return (
    <View style={styles.container}>
      <Animated.View 
        entering={FadeIn.duration(300)}
        style={styles.content}
      >
        <Animated.View style={spinStyle}>
          <MaterialCommunityIcons 
            name="cannabis" 
            size={32} 
            color={COLORS.primary} 
          />
        </Animated.View>
        <Text style={styles.text}>Loading...</Text>
      </Animated.View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
    justifyContent: 'center',
    alignItems: 'center',
  },
  content: {
    alignItems: 'center',
    gap: 12,
  },
  text: {
    fontSize: 16,
    color: COLORS.text.secondary,
  },
});

================================================================================
File: app/components/StatsOverviewCard.tsx
================================================================================

import React from 'react';
import { View, Text, StyleSheet, Platform } from 'react-native';
import { MaterialCommunityIcons } from "@expo/vector-icons";
import { LinearGradient } from 'expo-linear-gradient';
import { Card } from "./shared/Card";
import { COLORS } from "../../src/constants";
import { UsageStats } from "../../src/types";
import Animated, { FadeIn } from 'react-native-reanimated';

interface StatsOverviewCardProps {
  stats: UsageStats;
}

function formatDuration(ms: number): string {
  const seconds = Math.floor(ms / 1000);
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
}

const StatsOverviewCard: React.FC<StatsOverviewCardProps> = ({ stats }) => {
  return (
    <Animated.View 
      entering={FadeIn.duration(400)}
      style={styles.container}
    >
      <LinearGradient
        colors={[
          'rgba(0,230,118,0.15)',
          'rgba(0,230,118,0.05)',
          'transparent'
        ]}
        style={StyleSheet.absoluteFill}
        start={{ x: 0, y: 0 }}
        end={{ x: 0, y: 1 }}
      />
      
      <View style={styles.content}>
        {/* Header */}
        <View style={styles.headerRow}>
          <View style={styles.titleContainer}>
            <Text style={styles.title}>Usage Statistics</Text>
            <Text style={styles.subtitle}>
              Detailed overview of your usage patterns
            </Text>
          </View>
          
          <LinearGradient
            colors={['rgba(0,230,118,0.2)', 'rgba(0,230,118,0.1)']}
            style={styles.iconContainer}
            start={{ x: 0, y: 0 }}
            end={{ x: 1, y: 1 }}
          >
            <MaterialCommunityIcons 
              name="chart-box-outline" 
              size={24} 
              color={COLORS.primary}
            />
          </LinearGradient>
        </View>

        {/* Hit Counts Section */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Hit Counts</Text>
          <View style={styles.statsRow}>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Daily Average</Text>
              <Text style={styles.statValue}>{stats.averageHitsPerDay.toFixed(1)}</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Peak Day</Text>
              <Text style={styles.statValue}>{stats.peakDayHits}</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Total Hits</Text>
              <Text style={styles.statValue}>{stats.totalHits}</Text>
            </View>
          </View>
        </View>

        {/* Duration Stats Section */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Duration</Text>
          <View style={styles.statsRow}>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Average</Text>
              <Text style={styles.statValue}>{formatDuration(stats.averageDuration)}</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Longest</Text>
              <Text style={styles.statValue}>{formatDuration(stats.longestHit)}</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Shortest</Text>
              <Text style={styles.statValue}>{formatDuration(stats.shortestHit)}</Text>
            </View>
          </View>
        </View>

        {/* Time Patterns Section */}
        <View style={styles.section}>
          <Text style={styles.sectionTitle}>Activity Patterns</Text>
          <View style={styles.statsRow}>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Peak Hours</Text>
              <Text style={styles.statValue}>{stats.mostActiveHour}:00</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Quiet Hours</Text>
              <Text style={styles.statValue}>{stats.leastActiveHour}:00</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Consistency</Text>
              <Text style={styles.statValue}>{stats.consistency.toFixed(1)}</Text>
            </View>
          </View>
        </View>

        {/* Weekday vs Weekend */}
        <View style={[styles.section, styles.lastSection]}>
          <Text style={styles.sectionTitle}>Weekly Distribution</Text>
          <View style={styles.statsRow}>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Weekday Avg</Text>
              <Text style={styles.statValue}>
                {stats.weekdayStats.weekday.avg.toFixed(1)}
              </Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Weekend Avg</Text>
              <Text style={styles.statValue}>
                {stats.weekdayStats.weekend.avg.toFixed(1)}
              </Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statLabel}>Difference</Text>
              <View style={styles.changeContainer}>
                <MaterialCommunityIcons 
                  name={stats.weekdayStats.weekend.avg >= stats.weekdayStats.weekday.avg ? "trending-up" : "trending-down"} 
                  size={16} 
                  color={stats.weekdayStats.weekend.avg >= stats.weekdayStats.weekday.avg ? COLORS.primary : '#FF5252'} 
                />
                <Text style={[
                  styles.changeText,
                  { color: stats.weekdayStats.weekend.avg >= stats.weekdayStats.weekday.avg ? COLORS.primary : '#FF5252' }
                ]}>
                  {Math.abs(((stats.weekdayStats.weekend.avg - stats.weekdayStats.weekday.avg) / stats.weekdayStats.weekday.avg) * 100).toFixed(1)}%
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  container: {
    borderRadius: 20,
    overflow: 'hidden',
    backgroundColor: Platform.select({
      ios: 'rgba(26, 26, 26, 0.8)',
      android: 'rgba(26, 26, 26, 0.95)',
    }),
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
    ...Platform.select({
      ios: {
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.15,
        shadowRadius: 12,
      },
      android: {
        elevation: 6,
      },
    }),
  },
  content: {
    padding: 20,
  },
  headerRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 24,
  },
  titleContainer: {
    flex: 1,
  },
  title: {
    fontSize: 22,
    fontWeight: '600',
    color: COLORS.text.primary,
    marginBottom: 8,
    letterSpacing: 0.35,
  },
  subtitle: {
    fontSize: 16,
    color: COLORS.text.secondary,
    letterSpacing: 0.25,
  },
  iconContainer: {
    width: 44,
    height: 44,
    borderRadius: 22,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 16,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
  },
  section: {
    marginBottom: 24,
  },
  lastSection: {
    marginBottom: 0,
  },
  sectionTitle: {
    fontSize: 17,
    fontWeight: '600',
    color: COLORS.text.primary,
    marginBottom: 16,
    letterSpacing: -0.41,
  },
  statsRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  statItem: {
    flex: 1,
  },
  statLabel: {
    fontSize: 14,
    color: COLORS.text.tertiary,
    marginBottom: 4,
  },
  statValue: {
    fontSize: 18,
    fontWeight: '600',
    color: COLORS.text.primary,
  },
  changeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  changeText: {
    fontSize: 18,
    fontWeight: '600',
    marginLeft: 4,
  },
});

export default StatsOverviewCard; 

================================================================================
File: app/components/TimeDistributionCard.tsx
================================================================================

import React from 'react';
import { View, Text, StyleSheet, Platform } from 'react-native';
import { MaterialCommunityIcons } from "@expo/vector-icons";
import { LinearGradient } from 'expo-linear-gradient';
import { COLORS } from "../../src/constants";
import { TimeDistribution } from "../../src/types";
import Animated, { FadeIn } from 'react-native-reanimated';

interface TimeDistributionCardProps {
  timeData: TimeDistribution;
}

type TimeSlot = 'morning' | 'afternoon' | 'evening' | 'night';

const COLORS_MAP: Record<TimeSlot, string> = {
  morning: '#FFB74D',
  afternoon: '#4FC3F7',
  evening: '#7986CB',
  night: '#9575CD',
};

const ICONS_MAP: Record<TimeSlot, keyof typeof MaterialCommunityIcons.glyphMap> = {
  morning: 'weather-sunny',
  afternoon: 'weather-partly-cloudy',
  evening: 'weather-sunset',
  night: 'weather-night',
};

const TimeDistributionCard = ({ timeData }: TimeDistributionCardProps) => {
  const total = Object.values(timeData).reduce((sum, val) => sum + val, 0);

  const TimeSlotComponent = ({ type, value }: { type: TimeSlot; value: number }) => {
    const percentage = total === 0 ? 0 : (value / total) * 100;
    const barWidth = Math.max(0, Math.min(100, percentage));

    return (
      <Animated.View 
        entering={FadeIn.delay(type === 'morning' ? 200 : type === 'afternoon' ? 400 : type === 'evening' ? 600 : 800)}
        style={styles.timeSlot}
      >
        <View style={styles.timeSlotContent}>
          <View style={styles.timeSlotHeader}>
            <LinearGradient
              colors={[`${COLORS_MAP[type]}40`, `${COLORS_MAP[type]}20`]}
              style={styles.iconContainer}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 1 }}
            >
              <MaterialCommunityIcons 
                name={ICONS_MAP[type]} 
                size={18} 
                color={COLORS_MAP[type]} 
              />
            </LinearGradient>
            <Text style={styles.timeSlotText}>
              {type.charAt(0).toUpperCase() + type.slice(1)}
            </Text>
            <Text style={styles.percentageText}>
              {percentage.toFixed(0)}%
            </Text>
          </View>
          <View style={styles.barContainer}>
            <LinearGradient
              colors={[`${COLORS_MAP[type]}`, `${COLORS_MAP[type]}80`]}
              style={[styles.bar, { width: `${barWidth}%` }]}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 0 }}
            />
          </View>
        </View>
      </Animated.View>
    );
  };

  return (
    <Animated.View 
      entering={FadeIn.duration(400)}
      style={styles.container}
    >
      <LinearGradient
        colors={[
          'rgba(0,230,118,0.15)',
          'rgba(0,230,118,0.05)',
          'transparent'
        ]}
        style={StyleSheet.absoluteFill}
        start={{ x: 0, y: 0 }}
        end={{ x: 0, y: 1 }}
      />
      
      <View style={styles.content}>
        <View style={styles.headerRow}>
          <View style={styles.titleContainer}>
            <Text style={styles.title}>Time Distribution</Text>
            <Text style={styles.subtitle}>
              Activity patterns throughout the day
            </Text>
          </View>
          
          <LinearGradient
            colors={['rgba(0,230,118,0.2)', 'rgba(0,230,118,0.1)']}
            style={styles.headerIconContainer}
            start={{ x: 0, y: 0 }}
            end={{ x: 1, y: 1 }}
          >
            <MaterialCommunityIcons 
              name="clock-outline" 
              size={24} 
              color={COLORS.primary}
            />
          </LinearGradient>
        </View>

        <View style={styles.distributionContent}>
          <TimeSlotComponent type="morning" value={timeData.morning} />
          <TimeSlotComponent type="afternoon" value={timeData.afternoon} />
          <TimeSlotComponent type="evening" value={timeData.evening} />
          <TimeSlotComponent type="night" value={timeData.night} />
        </View>
      </View>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  container: {
    borderRadius: 20,
    overflow: 'hidden',
    backgroundColor: Platform.select({
      ios: 'rgba(26, 26, 26, 0.8)',
      android: 'rgba(26, 26, 26, 0.95)',
    }),
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
    ...Platform.select({
      ios: {
        shadowColor: COLORS.primary,
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.15,
        shadowRadius: 12,
      },
      android: {
        elevation: 6,
      },
    }),
  },
  content: {
    padding: 20,
  },
  headerRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 24,
  },
  titleContainer: {
    flex: 1,
  },
  title: {
    fontSize: 22,
    fontWeight: '600',
    color: COLORS.text.primary,
    marginBottom: 8,
    letterSpacing: 0.35,
  },
  subtitle: {
    fontSize: 16,
    color: COLORS.text.secondary,
    letterSpacing: 0.25,
  },
  headerIconContainer: {
    width: 44,
    height: 44,
    borderRadius: 22,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 16,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
  },
  distributionContent: {
    gap: 16,
  },
  timeSlot: {
    marginBottom: 4,
  },
  timeSlotContent: {
    gap: 8,
  },
  timeSlotHeader: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  iconContainer: {
    width: 32,
    height: 32,
    borderRadius: 16,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.1)',
  },
  timeSlotText: {
    flex: 1,
    fontSize: 15,
    color: COLORS.text.primary,
    marginLeft: 12,
    letterSpacing: -0.24,
  },
  percentageText: {
    fontSize: 15,
    fontWeight: '600',
    color: COLORS.text.primary,
    width: 40,
    textAlign: 'right',
    letterSpacing: -0.24,
  },
  barContainer: {
    height: 6,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    borderRadius: 3,
    overflow: 'hidden',
    marginTop: 4,
  },
  bar: {
    height: '100%',
    borderRadius: 3,
  },
});

export default TimeDistributionCard; 

================================================================================
File: app/components/trending/CompareBar.tsx
================================================================================

import React, { memo } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, FlatList } from 'react-native';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { COLORS } from '../../../src/constants';
import { Strain } from '../../../src/dbManager';
import Animated, { FadeIn } from 'react-native-reanimated';

interface CompareBarProps {
  compareList: Strain[];
  onCompareToggle: (strain: Strain) => void;
  onCompare: () => void;
}

const CompareBar = memo(({
  compareList,
  onCompareToggle,
  onCompare
}: CompareBarProps) => (
  <Animated.View 
    entering={FadeIn}
    style={styles.compareBar}
  >
    <FlatList
      horizontal
      data={compareList}
      keyExtractor={item => item.id!.toString()}
      renderItem={({ item }) => (
        <View style={styles.compareItem}>
          <Text style={styles.compareItemText}>{item.name}</Text>
          <TouchableOpacity 
            onPress={() => onCompareToggle(item)}
            style={styles.compareItemRemove}
          >
            <MaterialCommunityIcons 
              name="close" 
              size={20} 
              color={COLORS.text.secondary} 
            />
          </TouchableOpacity>
        </View>
      )}
    />
    <TouchableOpacity 
      style={[
        styles.compareButton,
        compareList.length < 2 && styles.compareButtonDisabled
      ]}
      onPress={onCompare}
      disabled={compareList.length < 2}
    >
      <Text style={styles.compareButtonText}>
        Compare ({compareList.length})
      </Text>
    </TouchableOpacity>
  </Animated.View>
));

const styles = StyleSheet.create({
  compareBar: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: 'rgba(26, 26, 26, 0.95)',
    borderTopWidth: 1,
    borderTopColor: 'rgba(0, 230, 118, 0.1)',
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    gap: 12,
  },
  compareItem: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(26, 26, 26, 0.9)',
    borderRadius: 8,
    paddingVertical: 6,
    paddingHorizontal: 12,
    marginRight: 8,
    gap: 8,
    borderWidth: 1,
    borderColor: 'rgba(0, 230, 118, 0.1)',
  },
  compareItemText: {
    color: COLORS.text.primary,
    fontSize: 14,
    maxWidth: 120,
    letterSpacing: 0.2,
  },
  compareItemRemove: {
    padding: 2,
  },
  compareButton: {
    backgroundColor: COLORS.primary,
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 8,
    opacity: 1,
  },
  compareButtonDisabled: {
    opacity: 0.5,
  },
  compareButtonText: {
    color: COLORS.background,
    fontWeight: '600',
    fontSize: 14,
    letterSpacing: 0.2,
  },
});

export default CompareBar; 

================================================================================
File: app/components/trending/Header.tsx
================================================================================

// components/trending/Header.tsx
import React from 'react';
import { View, Text, StyleSheet, TextInput, TouchableOpacity } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { LinearGradient } from 'expo-linear-gradient';
import { COLORS } from '../../../src/constants';
import { StrainSearchFilters } from '../../../src/services/StrainService';
import { hasActiveFilters } from '../../../src/utils/filters';

interface HeaderProps {
  searchQuery: string;
  setSearchQuery: (query: string) => void;
  showFilters: boolean;
  setShowFilters: (show: boolean) => void;
  filters: StrainSearchFilters;
  handleClearSearch: () => void;
}

const Header = ({ 
  searchQuery, 
  setSearchQuery, 
  showFilters, 
  setShowFilters,
  filters,
  handleClearSearch
}: HeaderProps) => {
  const insets = useSafeAreaInsets();
  const hasFilters = hasActiveFilters(filters);
  const hasSearchOrFilters = searchQuery.trim() || hasFilters;

  return (
    <View style={[styles.container, { paddingTop: insets.top + 10 }]}>
      <LinearGradient
        colors={['rgba(0, 230, 118, 0.15)', 'transparent']}
        style={[styles.headerGradient, { top: 0 }]}
        start={{ x: 0.5, y: 0 }}
        end={{ x: 0.5, y: 1 }}
      />
      
      <Text style={styles.title}>Trending</Text>
      
      <View style={styles.searchContainer}>
        <View style={styles.searchInputContainer}>
          <Ionicons name="search" size={20} color={COLORS.text.secondary} style={styles.searchIcon} />
          <TextInput
            style={styles.searchInput}
            placeholder="Search strains..."
            placeholderTextColor={COLORS.text.placeholder}
            value={searchQuery}
            onChangeText={setSearchQuery}
            returnKeyType="search"
          />
          {searchQuery.length > 0 && (
            <TouchableOpacity onPress={() => setSearchQuery('')} style={styles.clearButton}>
              <Ionicons name="close-circle" size={18} color={COLORS.text.secondary} />
            </TouchableOpacity>
          )}
        </View>
        
        <TouchableOpacity 
          style={[
            styles.filterButton, 
            hasFilters && styles.activeFilterButton
          ]} 
          onPress={() => setShowFilters(!showFilters)}
        >
          <Ionicons 
            name="options-outline" 
            size={20} 
            color={hasFilters ? COLORS.accent : COLORS.text.secondary} 
          />
        </TouchableOpacity>
      </View>
      
      {hasSearchOrFilters && (
        <View style={styles.clearSearchContainer}>
          <TouchableOpacity 
            style={styles.clearSearchButton}
            onPress={handleClearSearch}
          >
            <Text style={styles.clearSearchText}>Clear All</Text>
          </TouchableOpacity>
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    paddingHorizontal: 20,
    paddingBottom: 16,
    position: 'relative',
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(255, 255, 255, 0.05)',
  },
  headerGradient: {
    position: 'absolute',
    left: 0,
    right: 0,
    height: 150,
  },
  title: {
    fontSize: 34,
    fontWeight: '700',
    color: 'white',
    marginBottom: 20,
    letterSpacing: 0.5,
    textShadowColor: 'rgba(0, 230, 118, 0.6)',
    textShadowOffset: { width: 0, height: 0 },
    textShadowRadius: 8,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  searchInputContainer: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.06)',
    borderRadius: 12,
    paddingHorizontal: 12,
    height: 46,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.08)',
  },
  searchIcon: {
    marginRight: 8,
  },
  searchInput: {
    flex: 1,
    height: 46,
    color: COLORS.text.primary,
    fontSize: 16,
  },
  clearButton: {
    padding: 6,
  },
  filterButton: {
    width: 46,
    height: 46,
    borderRadius: 12,
    backgroundColor: 'rgba(255, 255, 255, 0.06)',
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 10,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.08)',
  },
  activeFilterButton: {
    backgroundColor: 'rgba(0, 230, 118, 0.1)',
    borderColor: 'rgba(0, 230, 118, 0.3)',
  },
  clearSearchContainer: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    marginBottom: 4,
  },
  clearSearchButton: {
    paddingVertical: 6,
    paddingHorizontal: 10,
  },
  clearSearchText: {
    color: COLORS.accent,
    fontSize: 14,
    fontWeight: '500',
  },
});

export default Header;

================================================================================
File: app/components/trending/SearchBar.tsx
================================================================================

// app/components/trending/SearchBar.tsx
import React, { memo } from 'react';
import { View, TextInput, TouchableOpacity, StyleSheet, Platform } from 'react-native';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { COLORS } from '../../../src/constants';
import { LinearGradient } from 'expo-linear-gradient';
import { StrainSearchFilters } from '../../../src/services/StrainService';
import { hasActiveFilters } from '../../../src/utils/filters';
import Animated, { useAnimatedStyle, useSharedValue, withSpring } from 'react-native-reanimated';

interface SearchBarProps {
  searchQuery: string;
  setSearchQuery: (query: string) => void;
  showFilters: boolean;
  setShowFilters: (show: boolean) => void;
  filters: StrainSearchFilters;
  onClear: () => void;
}

const SearchBar = memo(({
  searchQuery,
  setSearchQuery,
  showFilters,
  setShowFilters,
  filters,
  onClear
}: SearchBarProps) => {
  // Determine if we need the clear button
  const showClearButton = searchQuery.trim() || hasActiveFilters(filters);
  
  // Define filter button states
  const hasFilters = hasActiveFilters(filters);
  const isFilterActive = showFilters || hasFilters;
  
  return (
    <View style={styles.searchContainer}>
      {/* Main search input with enhanced styling */}
      <View style={styles.searchBar}>
        <LinearGradient
          colors={['rgba(0,0,0,0.2)', 'rgba(0,0,0,0.1)']}
          style={StyleSheet.absoluteFillObject}
          start={{ x: 0, y: 0 }}
          end={{ x: 0, y: 1 }}
        />
        
        <MaterialCommunityIcons 
          name="magnify" 
          size={22} 
          color={COLORS.text.secondary} 
          style={styles.searchIcon}
        />
        
        <TextInput
          style={styles.searchInput}
          placeholder="Search strains..."
          placeholderTextColor="rgba(255,255,255,0.4)"
          value={searchQuery}
          onChangeText={setSearchQuery}
          returnKeyType="search"
          autoCapitalize="none"
          autoCorrect={false}
          clearButtonMode="while-editing"
        />
        
        {Platform.OS === 'android' && showClearButton && (
          <TouchableOpacity 
            onPress={onClear}
            style={styles.clearButton}
          >
            <MaterialCommunityIcons 
              name="close-circle" 
              size={18} 
              color={COLORS.text.secondary} 
            />
          </TouchableOpacity>
        )}
      </View>

      {/* Enhanced filter button with states */}
      <TouchableOpacity 
        style={[styles.filterButton, isFilterActive && styles.filterButtonActive]}
        onPress={() => setShowFilters(!showFilters)}
        activeOpacity={0.7}
      >
        <LinearGradient
          colors={
            isFilterActive 
              ? ['rgba(0,230,118,0.2)', 'rgba(0,230,118,0.1)']
              : ['rgba(0,0,0,0.2)', 'rgba(0,0,0,0.1)']
          }
          style={StyleSheet.absoluteFillObject}
          start={{ x: 0, y: 0 }}
          end={{ x: 0, y: 1 }}
        />
        
        <MaterialCommunityIcons 
          name="filter-variant" 
          size={22} 
          color={isFilterActive ? COLORS.primary : COLORS.text.secondary} 
        />
        
        {/* Badge indicator if filters are active */}
        {hasFilters && (
          <View style={styles.filterBadge}>
            <LinearGradient
              colors={['#00E676', '#00C853']}
              style={StyleSheet.absoluteFillObject}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 1 }}
            />
          </View>
        )}
      </TouchableOpacity>
    </View>
  );
});

const styles = StyleSheet.create({
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  searchBar: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.25)',
    borderRadius: 12,
    height: 44,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.12)',
    overflow: 'hidden',
    ...Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
      android: {
        elevation: 2,
      },
    }),
  },
  searchIcon: {
    marginLeft: 12,
    marginRight: 4,
  },
  searchInput: {
    flex: 1,
    color: '#000000',
    fontSize: 16,
    fontWeight: '400',
    paddingVertical: 10,
    paddingHorizontal: 8,
  },
  clearButton: {
    padding: 8,
    marginRight: 4,
  },
  filterButton: {
    width: 44,
    height: 44,
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.25)',
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.12)',
    overflow: 'hidden',
    position: 'relative',
    ...Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
      android: {
        elevation: 2,
      },
    }),
  },
  filterButtonActive: {
    borderColor: 'rgba(0, 230, 118, 0.3)',
  },
  filterBadge: {
    position: 'absolute',
    top: 10,
    right: 10,
    width: 8,
    height: 8,
    borderRadius: 4,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.3)',
    overflow: 'hidden',
  },
});

export default SearchBar;

================================================================================
File: app/components/trending/SearchFilters.tsx
================================================================================

import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, ScrollView } from 'react-native';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { COLORS } from '../../../src/constants';
import { StrainSearchFilters } from '../../../src/services/StrainService';
import { LinearGradient } from 'expo-linear-gradient';

interface SearchFiltersProps {
  filters: StrainSearchFilters;
  onFilterChange: (filters: StrainSearchFilters) => void;
  onApplyFilters: () => void;
  categories: { [key: string]: number };
}

const SORT_OPTIONS = [
  { key: 'rating', label: 'Rating', icon: 'star' },
  { key: 'name', label: 'Name', icon: 'sort-alphabetical-ascending' },
  { key: 'thc', label: 'THC', icon: 'percent' },
] as const;

const COMMON_EFFECTS = [
  'Relaxed',
  'Energetic',
  'Creative',
  'Focused',
  'Euphoric',
  'Sleepy',
  'Happy',
  'Uplifted'
];

export default function SearchFilters({ 
  filters, 
  onFilterChange, 
  onApplyFilters,
  categories 
}: SearchFiltersProps) {
  const [localFilters, setLocalFilters] = useState<StrainSearchFilters>(filters);

  const handleSortChange = (sort: StrainSearchFilters['sort']) => {
    setLocalFilters(prev => ({ ...prev, sort }));
  };

  const handleEffectToggle = (effect: string) => {
    const currentEffects = localFilters.effects || [];
    const newEffects = currentEffects.includes(effect)
      ? currentEffects.filter(e => e !== effect)
      : [...currentEffects, effect];
    setLocalFilters(prev => ({ ...prev, effects: newEffects }));
  };

  const handleGeneticTypeChange = (geneticType: string | undefined) => {
    setLocalFilters(prev => ({ ...prev, geneticType }));
  };

  const handleApply = () => {
    onFilterChange(localFilters);
    onApplyFilters();
  };

  return (
    <View style={styles.container}>
      {/* Sort Options */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Sort By</Text>
        <View style={styles.sortOptions}>
          {SORT_OPTIONS.map(({ key, label, icon }) => (
            <TouchableOpacity
              key={key}
              style={[
                styles.sortOption,
                localFilters.sort === key && styles.sortOptionActive
              ]}
              onPress={() => handleSortChange(key)}
            >
              <MaterialCommunityIcons
                name={icon}
                size={18}
                color={localFilters.sort === key ? COLORS.primary : COLORS.text.secondary}
              />
              <Text style={[
                styles.sortOptionText,
                localFilters.sort === key && styles.sortOptionTextActive
              ]}>
                {label}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>

      {/* Genetic Types */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Genetic Type</Text>
        <ScrollView 
          horizontal 
          showsHorizontalScrollIndicator={false}
          style={styles.geneticTypes}
        >
          <TouchableOpacity
            style={[
              styles.typeChip,
              !localFilters.geneticType && styles.typeChipActive
            ]}
            onPress={() => handleGeneticTypeChange(undefined)}
          >
            <Text style={[
              styles.typeChipText,
              !localFilters.geneticType && styles.typeChipTextActive
            ]}>
              All
            </Text>
          </TouchableOpacity>
          {Object.entries(categories).map(([type, count]) => (
            <TouchableOpacity
              key={type}
              style={[
                styles.typeChip,
                localFilters.geneticType === type && styles.typeChipActive
              ]}
              onPress={() => handleGeneticTypeChange(type)}
            >
              <Text style={[
                styles.typeChipText,
                localFilters.geneticType === type && styles.typeChipTextActive
              ]}>
                {type} ({count})
              </Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
      </View>

      {/* Effects */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Effects</Text>
        <View style={styles.effectsGrid}>
          {COMMON_EFFECTS.map(effect => (
            <TouchableOpacity
              key={effect}
              style={[
                styles.effectChip,
                (localFilters.effects || []).includes(effect) && styles.effectChipActive
              ]}
              onPress={() => handleEffectToggle(effect)}
            >
              <Text style={[
                styles.effectChipText,
                (localFilters.effects || []).includes(effect) && styles.effectChipTextActive
              ]}>
                {effect}
              </Text>
            </TouchableOpacity>
          ))}
        </View>
      </View>

      {/* Apply Button */}
      <TouchableOpacity 
        style={styles.applyButton}
        onPress={handleApply}
      >
        <LinearGradient
          colors={[COLORS.primary, COLORS.primaryDark]}
          style={styles.applyButtonGradient}
          start={{ x: 0, y: 0 }}
          end={{ x: 1, y: 1 }}
        >
          <Text style={styles.applyButtonText}>Apply Filters</Text>
          <MaterialCommunityIcons 
            name="check" 
            size={20} 
            color="#FFF" 
          />
        </LinearGradient>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    backgroundColor: COLORS.cardBackground,
    borderRadius: 12,
    padding: 16,
  },
  section: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: COLORS.text.primary,
    marginBottom: 12,
  },
  sortOptions: {
    flexDirection: 'row',
    gap: 12,
  },
  sortOption: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
    gap: 6,
  },
  sortOptionActive: {
    backgroundColor: 'rgba(0, 230, 118, 0.1)',
  },
  sortOptionText: {
    fontSize: 14,
    color: COLORS.text.secondary,
  },
  sortOptionTextActive: {
    color: COLORS.primary,
  },
  geneticTypes: {
    flexDirection: 'row',
  },
  typeChip: {
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    marginRight: 8,
  },
  typeChipActive: {
    backgroundColor: 'rgba(0, 230, 118, 0.1)',
  },
  typeChipText: {
    fontSize: 14,
    color: COLORS.text.secondary,
  },
  typeChipTextActive: {
    color: COLORS.primary,
  },
  effectsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  effectChip: {
    backgroundColor: 'rgba(255, 255, 255, 0.05)',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
  },
  effectChipActive: {
    backgroundColor: 'rgba(0, 230, 118, 0.1)',
  },
  effectChipText: {
    fontSize: 14,
    color: COLORS.text.secondary,
  },
  effectChipTextActive: {
    color: COLORS.primary,
  },
  applyButton: {
    marginTop: 20,
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
  },
  applyButtonGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 16,
    borderRadius: 8,
    width: '100%',
  },
  applyButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFF',
    marginRight: 8,
  },
});

================================================================================
File: app/components/trending/Section.tsx
================================================================================

import React, { memo } from 'react';
import { View, Text, StyleSheet, Platform } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { COLORS } from '../../../src/constants';

interface SectionProps {
  title: string;
  children: React.ReactNode;
}

const Section = memo(({ title, children }: SectionProps) => (
  <View style={styles.sectionWrapper}>
    <LinearGradient
      colors={['rgba(0,230,118,0.1)', 'transparent']}
      style={styles.sectionDivider}
      start={{ x: 0, y: 0 }}
      end={{ x: 1, y: 0 }}
    />
    <View style={styles.section}>
      <LinearGradient
        colors={['rgba(0,230,118,0.1)', 'rgba(0,230,118,0.02)', 'transparent']}
        style={styles.sectionGradient}
        start={{ x: 0, y: 0 }}
        end={{ x: 0, y: 1 }}
      />
      <View style={styles.sectionHeader}>
        <Text style={styles.sectionTitle}>{title}</Text>
      </View>
      <View style={styles.sectionContent}>
        {children}
      </View>
    </View>
  </View>
));

const styles = StyleSheet.create({
  sectionWrapper: {
    marginBottom: 32,
    position: 'relative',
  },
  sectionDivider: {
    height: 1,
    width: '100%',
    marginBottom: 16,
  },
  section: {
    borderRadius: 16,
    overflow: 'hidden',
    backgroundColor: Platform.select({
      ios: 'rgba(26, 26, 26, 0.75)',
      android: 'rgba(26, 26, 26, 0.9)',
    }),
  },
  sectionGradient: {
    ...StyleSheet.absoluteFillObject,
    opacity: 0.5,
  },
  sectionHeader: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0, 230, 118, 0.1)',
    marginBottom: 8,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: COLORS.text.primary,
    letterSpacing: 0.5,
  },
  sectionContent: {
    padding: 12,
    gap: 12,
  },
});

export default Section; 

================================================================================
File: app/components/trending/StrainsList.tsx
================================================================================

// app/components/trending/StrainsList.tsx
import React, { memo, useCallback } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  TouchableOpacity, 
  FlatList, 
  Platform
} from 'react-native';
import { useRouter } from 'expo-router';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import { COLORS } from '../../../src/constants';
import { Strain } from '../../../src/dbManager';
import Animated, { FadeIn } from 'react-native-reanimated';

interface StrainsListProps {
  strains: Strain[];
  onCompareToggle: (strain: Strain) => void;
  onFavoriteToggle: (strainId: number) => void;
  compareList: Strain[];
  isFavorite: (strainId: number) => boolean;
  isLoading: boolean;
  onEndReached: () => void;
}

// Rating badge component for cleaner code
const RatingBadge = ({ rating }: { rating: number }) => (
  <LinearGradient
    colors={[
      rating >= 9 ? '#00E676' : rating >= 8 ? '#1DE9B6' : '#26C6DA', 
      rating >= 9 ? '#00C853' : rating >= 8 ? '#00BFA5' : '#00ACC1'
    ]}
    style={styles.ratingBadge}
    start={{ x: 0, y: 0 }}
    end={{ x: 1, y: 1 }}
  >
    <Text style={styles.ratingText}>{rating.toFixed(1)}</Text>
  </LinearGradient>
);

// Strain type badge
const TypeBadge = ({ type }: { type: string }) => {
  let gradientColors;
  
  // Different colors for different strain types
  switch(type.toLowerCase()) {
    case 'sativa':
    case 'sativa-dominant':
    case 'sativa-dominant hybrid':
      gradientColors = ['rgba(255, 160, 0, 0.2)', 'rgba(255, 160, 0, 0.1)'];
      break;
    case 'indica':
    case 'indica-dominant':
    case 'indica-dominant hybrid':
      gradientColors = ['rgba(123, 31, 162, 0.2)', 'rgba(123, 31, 162, 0.1)'];
      break;
    case 'hybrid':
      gradientColors = ['rgba(0, 176, 255, 0.2)', 'rgba(0, 176, 255, 0.1)'];
      break;
    default:
      gradientColors = ['rgba(120, 144, 156, 0.2)', 'rgba(120, 144, 156, 0.1)'];
  }
  
  return (
    <LinearGradient
      colors={gradientColors}
      style={styles.typeBadge}
      start={{ x: 0, y: 0 }}
      end={{ x: 1, y: 1 }}
    >
      <Text style={styles.typeBadgeText}>{type}</Text>
    </LinearGradient>
  );
};

export const StrainsList = memo(({
  strains,
  onCompareToggle,
  onFavoriteToggle,
  compareList,
  isFavorite,
  isLoading,
  onEndReached,
}: StrainsListProps) => {
  const router = useRouter();

  // Optimize with useCallback
  const renderStrainItem = useCallback(({ item: strain, index }: { item: Strain, index: number }) => (
    <Animated.View 
    entering={FadeIn.duration(150)} // Much shorter duration, no delay
    style={styles.strainItemContainer}
  >
      <TouchableOpacity
        onPress={() => router.push({
          pathname: "/strains/details",
          params: { id: strain.id }
        } as any)}
        style={styles.strainItem}
        activeOpacity={0.8}
      >
        <LinearGradient
          colors={['rgba(0, 230, 118, 0.1)', 'rgba(0, 230, 118, 0.05)', 'rgba(0, 230, 118, 0)']}
          style={StyleSheet.absoluteFill}
          start={{ x: 0, y: 0 }}
          end={{ x: 1, y: 1 }}
        />
        
        {/* Left content */}
        <View style={styles.strainContent}>
          <View style={styles.strainHeader}>
            <Text style={styles.strainName}>{strain.name}</Text>
            <RatingBadge rating={strain.combined_rating} />
          </View>

          <TypeBadge type={strain.genetic_type} />
          
          <Text 
            numberOfLines={2} 
            style={styles.strainDescription}
          >
            {strain.overview}
          </Text>

          {strain.effects && (
            <View style={styles.effectsContainer}>
              {strain.effects.split(',').slice(0, 3).map((effect, idx) => (
                <View key={idx} style={styles.effectBadge}>
                  <Text style={styles.effectText}>{effect.trim()}</Text>
                </View>
              ))}
            </View>
          )}
        </View>

        {/* Action buttons */}
        <View style={styles.actionButtons}>
          <TouchableOpacity 
            onPress={() => onFavoriteToggle(strain.id!)}
            style={[
              styles.actionButton,
              isFavorite(strain.id!) && styles.favoriteButton
            ]}
          >
            <MaterialCommunityIcons 
              name={isFavorite(strain.id!) ? "heart" : "heart-outline"} 
              size={22} 
              color={isFavorite(strain.id!) ? '#FFFFFF' : COLORS.text.secondary} 
            />
          </TouchableOpacity>
          
          <TouchableOpacity 
            onPress={() => onCompareToggle(strain)}
            style={[
              styles.actionButton,
              compareList.some(s => s.id === strain.id) && styles.compareButton
            ]}
            disabled={compareList.length >= 3 && !compareList.some(s => s.id === strain.id)}
          >
            <MaterialCommunityIcons 
              name={compareList.some(s => s.id === strain.id) ? "compare" : "compare-horizontal"} 
              size={22} 
              color={compareList.some(s => s.id === strain.id) ? '#FFFFFF' : COLORS.text.secondary} 
            />
          </TouchableOpacity>
        </View>
      </TouchableOpacity>
    </Animated.View>
  ), [onCompareToggle, onFavoriteToggle, compareList, isFavorite, router]);

  const keyExtractor = useCallback((item: Strain, index: number) => {
    // Use unique combination of id and index if id exists, otherwise use index-based fallback
    return item.id ? `strain-${item.id}-${index}` : `strain-index-${index}`;
  }, []);
  

  if (!strains.length && !isLoading) {
    return (
      <View style={styles.emptyContainer}>
        <MaterialCommunityIcons 
          name="cannabis" 
          size={48} 
          color={COLORS.primary}
          style={{ opacity: 0.5 }}
        />
        <Text style={styles.emptyText}>
          No strains found matching your criteria
        </Text>
      </View>
    );
  }

  return (
    <FlatList
      data={strains}
      renderItem={renderStrainItem}
      keyExtractor={keyExtractor}
      contentContainerStyle={styles.content}
      onEndReached={onEndReached}
      onEndReachedThreshold={0.5}
      showsVerticalScrollIndicator={false}
      // Performance optimizations
      removeClippedSubviews={Platform.OS === 'android'}
      windowSize={5}
      maxToRenderPerBatch={5}
      initialNumToRender={8}  // Limit initial render batch
      updateCellsBatchingPeriod={50}  // Group cell updates to optimize performance
      // Add key tracking for debugging
      maintainVisibleContentPosition={{
        minIndexForVisible: 0,
      }}
    />
  );
  
});

const styles = StyleSheet.create({
  content: {
    paddingBottom: 80, // Space for the compare bar
  },
  strainItemContainer: {
    marginBottom: 16,
    borderRadius: 16,
    shadowColor: COLORS.primary,
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  strainItem: {
    backgroundColor: 'rgba(26, 32, 28, 0.95)',
    borderRadius: 16,
    overflow: 'hidden',
    flexDirection: 'row',
    padding: 16,
    borderWidth: 1,
    borderColor: 'rgba(0, 230, 118, 0.15)',
  },
  strainContent: {
    flex: 1,
  },
  strainHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  strainName: {
    fontSize: 18,
    fontWeight: '700',
    color: COLORS.text.primary,
    letterSpacing: 0.5,
    flex: 1,
    marginRight: 8,
  },
  ratingBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 8,
    alignItems: 'center',
    justifyContent: 'center',
  },
  ratingText: {
    color: '#FFFFFF',
    fontWeight: '700',
    fontSize: 16,
  },
  typeBadge: {
    alignSelf: 'flex-start',
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 8,
    marginBottom: 10,
  },
  typeBadgeText: {
    fontSize: 13,
    color: COLORS.text.primary,
    fontWeight: '500',
  },
  strainDescription: {
    fontSize: 14,
    color: COLORS.text.secondary,
    lineHeight: 20,
    marginBottom: 12,
  },
  effectsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  effectBadge: {
    backgroundColor: 'rgba(255, 255, 255, 0.08)',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 6,
  },
  effectText: {
    fontSize: 12,
    color: COLORS.text.secondary,
  },
  actionButtons: {
    marginLeft: 16,
    justifyContent: 'space-around',
    alignItems: 'center',
  },
  actionButton: {
    width: 40,
    height: 40,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.08)',
    marginVertical: 6,
  },
  favoriteButton: {
    backgroundColor: 'rgba(255, 82, 82, 0.8)',
  },
  compareButton: {
    backgroundColor: 'rgba(0, 230, 118, 0.8)',
  },
  emptyContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(26, 32, 28, 0.5)',
    padding: 40,
    borderRadius: 16,
    borderWidth: 1,
    borderColor: 'rgba(0, 230, 118, 0.1)',
    marginVertical: 30,
  },
  emptyText: {
    fontSize: 16,
    color: COLORS.text.primary,
    textAlign: 'center',
    marginTop: 16,
    opacity: 0.8,
  },
});

export default StrainsList;

================================================================================
File: app/mydata/_layout.tsx
================================================================================

import { Stack } from 'expo-router';

export default function MyDataLayout() {
  return (
    <Stack>
      <Stack.Screen 
        name="daily-average" 
        options={{ 
          title: "Daily Average",
          headerTintColor: "#00E676",
          headerStyle: { backgroundColor: "#000000" },
        }} 
      />
      <Stack.Screen 
        name="weekly-average" 
        options={{ 
          title: "Weekly Average",
          headerTintColor: "#00E676",
          headerStyle: { backgroundColor: "#000000" },
        }} 
      />
      <Stack.Screen 
        name="weekly-overview" 
        options={{ 
          title: "Weekly Overview",
          headerTintColor: "#00E676",
          headerStyle: { backgroundColor: "#000000" },
        }} 
      />
      <Stack.Screen 
        name="monthly-overview" 
        options={{ 
          title: "Monthly Overview",
          headerTintColor: "#00E676",
          headerStyle: { backgroundColor: "#000000" },
        }} 
      />
    </Stack>
  );
}

================================================================================
File: app/mydata/daily-average.tsx
================================================================================

import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { COLORS } from '../../src/constants';

export default function DailyAverageOverview() {
  return (
    <View style={{ flex: 1, backgroundColor: COLORS.background, padding: 20 }}>
      <Text style={{ color: COLORS.text.primary, fontSize: 18 }}>
        Daily Average Overview
      </Text>
    </View>
  );
}

================================================================================
File: app/mydata/monthly-overview.tsx
================================================================================

import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { COLORS } from '../../src/constants';

export default function MonthlyOverview() {
  return (
    <View style={{ flex: 1, backgroundColor: COLORS.background, padding: 20 }}>
      <Text style={{ color: COLORS.text.primary, fontSize: 18 }}>
        Monthly Overview
      </Text>
    </View>
  );
}

================================================================================
File: app/mydata/weekly-average.tsx
================================================================================

import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { COLORS } from '../../src/constants';

export default function WeeklyAverage() {
  return (
    <View style={{ flex: 1, backgroundColor: COLORS.background, padding: 20 }}>
      <Text style={{ color: COLORS.text.primary, fontSize: 18 }}>
        Weekly Average
      </Text>
    </View>
  );
}

================================================================================
File: app/mydata/weekly-overview.tsx
================================================================================

import React from 'react';
import { View, Text, StyleSheet, ScrollView } from 'react-native';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import { COLORS } from '../../src/constants';
import { useDataService } from '../../src/hooks/useDataService';
import LoadingView from '../components/shared/LoadingView';
import ErrorView from '../components/shared/ErrorView';
import BarChart from '../components/charts/BarChart';

export default function WeeklyOverview() {
  return (
    <View style={{ flex: 1, backgroundColor: COLORS.background, padding: 20 }}>
      <Text style={{ color: COLORS.text.primary, fontSize: 18 }}>
        Weekly Overview
      </Text>
    </View>
  );
}

================================================================================
File: app/strains/_layout.tsx
================================================================================

import { Stack } from 'expo-router';

export default function StrainsLayout() {
  return (
    <Stack>
      <Stack.Screen 
        name="popular" 
        options={{ 
          title: "Popular Strains",
          headerTintColor: "#00E676",
          headerStyle: { backgroundColor: "#000000" },
        }} 
      />
      <Stack.Screen 
        name="details" 
        options={{ 
          title: "Strain Details",
          headerTintColor: "#00E676",
          headerStyle: { backgroundColor: "#000000" },
        }} 
      />
      <Stack.Screen 
        name="compare" 
        options={{ 
          title: "Compare Strains",
          headerTintColor: "#00E676",
          headerStyle: { backgroundColor: "#000000" },
        }} 
      />
    </Stack>
  );
}

================================================================================
File: app/strains/compare.tsx
================================================================================

import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity } from 'react-native';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { COLORS } from '../../src/constants';
import { Strain } from '../../src/dbManager';
import StrainService from '../../src/services/StrainService';

export default function CompareStrains() {
  const { ids } = useLocalSearchParams();
  const strainIds = typeof ids === 'string' ? ids.split(',') : [];
  
  return (
    <View style={{ flex: 1, backgroundColor: COLORS.background, padding: 20 }}>
      <Text style={{ color: COLORS.text.primary, fontSize: 18 }}>
        Compare Strains
      </Text>
      <Text style={{ color: COLORS.text.secondary, marginTop: 8 }}>
        Comparing IDs: {strainIds.join(', ')}
      </Text>
    </View>
  );
}

================================================================================
File: app/strains/details.tsx
================================================================================

import React from 'react';
import { View, Text } from 'react-native';
import { Redirect, useLocalSearchParams } from 'expo-router';
import { COLORS } from '@/src/constants';

export default function StrainDetailsRedirect() {
  const { id } = useLocalSearchParams();
  return <Redirect href={`/dataOverviews/strains/strainDetails?id=${id}`} />;
}

================================================================================
File: app/strains/popular.tsx
================================================================================

import React, { useEffect, useState } from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  FlatList,
  TouchableOpacity,
  Platform 
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import { COLORS } from '../../src/constants';
import { Strain } from '../../src/dbManager';
import StrainService from '../../src/services/StrainService';

// Define strain type
interface Strain {
  id: string;
  name: string;
  description: string;
  thcContent?: string;
  type: 'sativa' | 'indica' | 'hybrid';
}

// Sample data
const strains: Strain[] = [
  { 
    id: '1', 
    name: 'Blue Dream', 
    description: 'Hybrid strain with sweet berry aroma',
    thcContent: '18-24%',
    type: 'hybrid'
  },
  { 
    id: '2', 
    name: 'OG Kush', 
    description: 'Classic strain with earthy pine scent',
    thcContent: '20-25%',
    type: 'hybrid'
  },
  { 
    id: '3', 
    name: 'Gorilla Glue', 
    description: 'Powerful hybrid with diesel notes',
    thcContent: '25-28%',
    type: 'hybrid'
  },
  { 
    id: '4', 
    name: 'Gelato', 
    description: 'Sweet and creamy hybrid strain',
    thcContent: '17-22%',
    type: 'hybrid'
  },
  { 
    id: '5', 
    name: 'Sour Diesel', 
    description: 'Energetic sativa with diesel aroma',
    thcContent: '19-25%',
    type: 'sativa'
  }
];

const PopularStrains = () => {
  const router = useRouter();

  const renderItem = ({ item }: { item: Strain }) => (
    <TouchableOpacity 
      style={styles.strainItem}
      onPress={() => router.push(`/strains/${item.id}`)}
    >
      <View style={styles.iconContainer}>
        <MaterialCommunityIcons name="cannabis" size={24} color="#fff" />
      </View>
      <View style={styles.textContainer}>
        <Text style={styles.strainName}>{item.name}</Text>
        <Text style={styles.strainDescription}>{item.description}</Text>
        {item.thcContent && (
          <Text style={styles.thcContent}>THC: {item.thcContent}</Text>
        )}
      </View>
      <MaterialCommunityIcons 
        name="chevron-right" 
        size={24} 
        color={colors.label.secondary} 
      />
    </TouchableOpacity>
  );

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.header}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={() => router.back()}
        >
          <MaterialCommunityIcons 
            name="chevron-left" 
            size={28} 
            color={colors.label.primary} 
          />
        </TouchableOpacity>
        <Text style={styles.headerText}>Popular Strains</Text>
      </View>
      <FlatList
        data={strains}
        renderItem={renderItem}
        keyExtractor={item => item.id}
        contentContainerStyle={styles.listContainer}
        showsVerticalScrollIndicator={false}
      />
    </SafeAreaView>
  );
};

const colors = {
  label: {
    primary: "#FFFFFF",
    secondary: "#8E8E93",
    tertiary: "#636366",
  },
  background: {
    primary: "#000000",
    secondary: "#1C1C1E",
    tertiary: "#2C2C2E",
  }
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background.primary,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    paddingTop: 8,
    borderBottomWidth: 1,
    borderBottomColor: colors.background.secondary,
  },
  backButton: {
    marginRight: 8,
    padding: 4,
  },
  headerText: {
    fontSize: 24,
    fontWeight: Platform.select({ ios: '600', android: 'bold' }),
    color: colors.label.primary,
  },
  listContainer: {
    padding: 16,
  },
  strainItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    backgroundColor: colors.background.secondary,
    borderRadius: 12,
    marginBottom: 12,
  },
  iconContainer: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: colors.background.tertiary,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  textContainer: {
    flex: 1,
  },
  strainName: {
    fontSize: 17,
    fontWeight: Platform.select({ ios: '600', android: 'bold' }),
    color: colors.label.primary,
    marginBottom: 4,
  },
  strainDescription: {
    fontSize: 14,
    color: colors.label.secondary,
    marginBottom: 4,
  },
  thcContent: {
    fontSize: 12,
    color: colors.label.tertiary,
    fontWeight: '500',
  },
});

export default PopularStrains; 

================================================================================
File: components/charts/WeeklyOverviewChart.tsx
================================================================================

import { Card } from "@/components/Card";
import { StyleSheet, View, Text, Dimensions } from "react-native";
import { MaterialCommunityIcons } from "@expo/vector-icons";
import { BarChart } from "react-native-chart-kit";
import { LinearGradient } from "expo-linear-gradient";
import { Datapoint } from "@/src/types";
import { useMemo } from "react";

// Keep COLORS here for now, we'll move it to constants later
const COLORS = {
  background: '#000000',
  cardBackground: '#1A1A1A',
  primary: '#00E676',       // Neon green 
  primaryLight: '#69F0AE',  // Light neon green
  primaryDark: '#00C853',   // Darker green
  text: {
    primary: '#FFFFFF',
    secondary: '#FFFFFFCC',  // 80% white
    tertiary: '#FFFFFF99',   // 60% white
  },
  chart: {
    primary: '#00E676',
    secondary: '#69F0AE',
    background: '#1A1A1A',
  },
  gradientColors: {
    start: 'rgba(0,230,118,0.4)',
    middle: 'rgba(105,240,174,0.2)',
    end: 'rgba(0,0,0,0)',
  }
};

const windowWidth = Dimensions.get("window").width;

interface WeeklyOverviewChartProps {
  data: Datapoint[];
  onPress?: () => void;
}

export function WeeklyOverviewChart({ data }: WeeklyOverviewChartProps) {
  // Memoize the chart width calculation
  const chartWidth = useMemo(() => Math.max(windowWidth - 64, 200), [windowWidth]);

  // Base chart config with optimizations
  const baseChartConfig = useMemo(() => ({
    backgroundColor: COLORS.chart.background,
    backgroundGradientFrom: COLORS.chart.background,
    backgroundGradientTo: COLORS.chart.background,
    decimalPlaces: 0,
    color: (opacity = 1) => `rgba(0, 230, 118, ${opacity})`,
    labelColor: (opacity = 0.8) => `rgba(255, 255, 255, ${opacity})`,
    barPercentage: 0.7,
    useShadowColorFromDataset: false,
    withInnerLines: false,
    withVerticalLabels: true,
    withHorizontalLabels: true,
    withVerticalLines: false,
    withHorizontalLines: true,
    propsForBackgroundLines: {
      stroke: COLORS.text.tertiary,
      strokeWidth: 1,
    },
    propsForDots: {
      r: "4",
      strokeWidth: "2",
      stroke: COLORS.primaryLight,
    },
    style: {
      borderRadius: 16,
    },
    formatYLabel: (value: string) => Math.round(Number(value)).toString(),
    formatXLabel: (label: string) => label.substring(0, 3),
    segments: 4,
  }), []);

  // Memoize the data transformation
  const chartData = useMemo(() => ({
    labels: data.map((d) => d.label),
    datasets: [{ 
      data: data.map((d) => d.value),
      color: (opacity = 1) => `rgba(0, 230, 118, ${opacity})`,
      strokeWidth: 2,
    }]
  }), [data]);

  if (!data?.length) {
    return (
      <Card style={styles.card}>
        <View style={styles.cardHeader}>
          <MaterialCommunityIcons name="calendar-week" size={24} color={COLORS.primary} />
          <Text style={styles.cardTitle}>Weekly Overview</Text>
        </View>
        <View style={styles.chartContainer}>
          <Text style={styles.noDataText}>No data available</Text>
        </View>
      </Card>
    );
  }

  return (
    <Card style={styles.card}>
      <View style={styles.cardHeader}>
        <MaterialCommunityIcons name="calendar-week" size={24} color={COLORS.primary} />
        <Text style={styles.cardTitle}>Weekly Overview</Text>
      </View>
      <Text style={styles.cardDescription}>Compare your usage across different days</Text>
      <View style={styles.chartContainer}>
        <LinearGradient
          colors={[
            COLORS.gradientColors.start,
            COLORS.gradientColors.middle,
            COLORS.gradientColors.end
          ]}
          start={{ x: 0, y: 0 }}
          end={{ x: 0, y: 1 }}
          style={styles.chartGradient}
        />
        <BarChart
          data={chartData}
          width={chartWidth}
          height={180}
          chartConfig={baseChartConfig}
          style={styles.chart}
          showValuesOnTopOfBars
          fromZero
          segments={4}
          flatColor={true}
          withCustomBarColorFromData={true}
        />
      </View>
    </Card>
  );
}

const styles = StyleSheet.create({
  card: {
    backgroundColor: '#1A1A1A',
    marginHorizontal: 16,
    marginVertical: 8,
    borderRadius: 16,
    padding: 16,
    shadowColor: '#00E676',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 10,
    elevation: 4,
    borderWidth: 1,
    borderColor: 'rgba(0, 230, 118, 0.1)',
  },
  cardHeader: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 8,
  },
  cardTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: COLORS.text.primary,
    marginLeft: 10,
  },
  cardDescription: {
    fontSize: 15,
    color: COLORS.text.secondary,
    marginTop: 4,
    marginBottom: 16,
    lineHeight: 20,
  },
  chartContainer: {
    marginTop: 16,
    alignItems: "center",
    paddingHorizontal: 8,
    backgroundColor: COLORS.cardBackground,
    borderRadius: 16,
    shadowColor: COLORS.primary,
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 0.2,
    shadowRadius: 12,
    elevation: 4,
  },
  chart: {
    marginVertical: 8,
    borderRadius: 16,
    backgroundColor: COLORS.cardBackground,
    shadowColor: COLORS.primary,
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 0.15,
    shadowRadius: 16,
    elevation: 6,
  },
  chartGradient: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    borderRadius: 16,
  },
  noDataText: {
    fontSize: 16,
    color: COLORS.text.secondary,
    padding: 20,
  }
}); 

================================================================================
File: components/Leaderboard.tsx
================================================================================

import React from 'react';
import { View, Text, FlatList, StyleSheet } from 'react-native';

interface LeaderboardEntry {
  id: string;
  name: string;
  score: number;
}

interface LeaderboardProps {
  data: LeaderboardEntry[];
  title: string;
}

const Leaderboard: React.FC<LeaderboardProps> = ({ title, data }) => {
  const renderItem = ({ item, index }: { item: LeaderboardEntry; index: number }) => (
    <View style={[styles.row, index === 0 ? styles.topRank : {}]}>
      <Text style={styles.rank}>{index + 1}</Text>
      <Text style={styles.name}>{item.name}</Text>
    </View>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.title}>{title}</Text>
      <FlatList
        data={data.sort((a, b) => b.score - a.score)} // Sort by score in descending order
        keyExtractor={(item) => item.id}
        renderItem={renderItem}
        ListEmptyComponent={<Text style={styles.empty}>No entries yet!</Text>}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 16,
    color: '#333',
  },
  row: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 12,
    marginVertical: 4,
    backgroundColor: '#fff',
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  topRank: {
    backgroundColor: '#ffd700', // Gold for top rank
  },
  rank: {
    fontSize: 18,
    fontWeight: 'bold',
    width: 40,
    textAlign: 'center',
  },
  name: {
    flex: 1,
    fontSize: 16,
    fontWeight: '500',
    color: '#333',
    marginLeft: 8,
  },
  score: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#12a35f',
  },
  empty: {
    textAlign: 'center',
    fontSize: 16,
    color: '#aaa',
    marginTop: 20,
  },
});

export default Leaderboard;

================================================================================
File: package.json
================================================================================

{
  "name": "canovareactnativeapp",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web",
    "test": "jest --watchAll",
    "lint": "expo lint"
  },
  "jest": {
    "preset": "jest-expo"
  },
  "dependencies": {
    "@expo/vector-icons": "^14.0.2",
    "@react-native-async-storage/async-storage": "1.23.1",
    "@react-navigation/bottom-tabs": "^7.2.0",
    "@react-navigation/native": "^7.0.14",
    "expo": "~52.0.23",
    "expo-blur": "~14.0.3",
    "expo-constants": "~17.0.3",
    "expo-dev-client": "~5.0.8",
    "expo-device": "^7.0.2",
    "expo-font": "~13.0.2",
    "expo-haptics": "~14.0.0",
    "expo-linear-gradient": "~14.0.2",
    "expo-linking": "~7.0.3",
    "expo-router": "~4.0.15",
    "expo-splash-screen": "~0.29.18",
    "expo-sqlite": "~15.1.2",
    "expo-status-bar": "~2.0.0",
    "expo-symbols": "~0.2.0",
    "expo-system-ui": "~4.0.6",
    "expo-web-browser": "~14.0.1",
    "lucide-react": "^0.475.0",
    "papaparse": "^5.5.2",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-native": "0.76.5",
    "react-native-base64": "^0.2.1",
    "react-native-ble-plx": "^3.4.0",
    "react-native-calendars": "^1.1308.0",
    "react-native-chart-kit": "^6.12.0",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-reanimated": "~3.16.1",
    "react-native-safe-area-context": "4.12.0",
    "react-native-screens": "~4.4.0",
    "react-native-svg": "^15.10.1",
    "react-native-web": "~0.19.13",
    "react-native-webview": "13.12.5"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@react-native-community/cli": "latest",
    "@types/jest": "^29.5.12",
    "@types/react": "~18.3.12",
    "@types/react-native-base64": "^0.2.2",
    "@types/react-test-renderer": "^18.3.0",
    "jest": "^29.2.1",
    "jest-expo": "~52.0.2",
    "react-test-renderer": "18.3.1",
    "typescript": "^5.3.3"
  },
  "private": true
}


================================================================================
File: src/constants.ts
================================================================================

export const BONG_HITS_DATABASE_NAME: string = "BongHits";
export const SAVED_DEVICES_DATABASE_NAME: string = "SavedDevices";
export const STRAINS_DATABASE_NAME: string = "Strains";

export const dayLookUpTable = new Map<number, string>()
dayLookUpTable.set(0, "Sun");
dayLookUpTable.set(1, "Mon");
dayLookUpTable.set(2, "Tue");
dayLookUpTable.set(3, "Wed");
dayLookUpTable.set(4, "Thu");
dayLookUpTable.set(5, "Fri");
dayLookUpTable.set(6, "Sat");

// Function to generate strain insert statements
export function getStrainInsertStatements(): string {
  return '';  // Empty implementation for now
}

export const COLORS = {
  background: '#000000',
  cardBackground: '#1A1A1A',
  primary: '#00E676',       // Neon green 
  primaryLight: '#69F0AE',  // Light neon green
  primaryDark: '#00C853',   // Darker green
  text: {
    primary: '#FFFFFF',
    secondary: '#FFFFFFCC',  // 80% white
    tertiary: '#FFFFFF99',   // 60% white
  },
  chart: {
    primary: '#00E676',
    secondary: '#69F0AE',
    background: '#1A1A1A',
  },
  gradientColors: {
    start: 'rgba(0,230,118,0.4)',
    middle: 'rgba(105,240,174,0.2)',
    end: 'rgba(0,0,0,0)',
  }
};

/**
 * Stupid goofy hardcoded function for testing
 * https://www.mockaroo.com/
 * @returns 
 */
export function getInsertStatements(): string {
    return(`
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 18:28:33', 27050);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 03:31:57', 12228);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 23:51:43', 13319);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 17:23:17', 18857);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 11:04:59', 10164);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 12:15:16', 17533);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 14:02:16', 6253);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 08:19:24', 16822);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 08:59:23', 22545);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 00:18:00', 8259);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 04:04:13', 2611);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 07:48:33', 22620);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 21:38:17', 15988);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 14:01:32', 22414);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 01:11:03', 15364);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 15:27:55', 4427);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 20:31:00', 4238);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 06:22:38', 15957);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 14:39:58', 26633);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 08:48:03', 13728);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 08:49:51', 15266);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 20:12:41', 28871);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 10:54:11', 21137);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 19:39:11', 15547);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 23:10:19', 26405);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 23:16:18', 26609);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 00:47:56', 14683);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 12:40:53', 8349);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 13:22:24', 2529);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 05:51:30', 27163);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 18:13:22', 2017);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 14:04:39', 16879);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 19:32:07', 21005);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 14:58:39', 11376);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 12:38:21', 10324);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 11:38:52', 12010);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 22:09:03', 25025);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 20:06:15', 23315);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 23:46:27', 5947);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 09:35:11', 28873);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 05:31:18', 9933);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 08:16:19', 11598);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 02:06:41', 5220);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 18:26:53', 29317);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 18:31:28', 9696);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 03:01:15', 1722);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 22:53:09', 11971);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 23:41:27', 1696);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 21:20:11', 1938);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 00:02:10', 8739);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 22:30:33', 23382);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 09:09:16', 3101);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 12:25:42', 13340);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 05:44:07', 19667);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 23:58:50', 14682);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 19:07:30', 24476);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 08:40:40', 14354);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 07:49:21', 1256);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 00:56:24', 10278);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 01:15:44', 7190);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 06:26:27', 27299);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 14:33:52', 15905);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 06:11:55', 19032);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 23:02:27', 18370);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 15:54:03', 11882);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 02:46:22', 7576);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 19:05:26', 25154);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 20:10:40', 12887);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 07:33:01', 6308);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 00:25:59', 25113);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 09:01:27', 8963);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 22:59:58', 18095);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 10:12:03', 22986);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 00:00:28', 4289);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 10:17:33', 24578);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 03:02:28', 27227);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 15:25:26', 12128);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 15:44:36', 13216);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 03:35:02', 21264);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 19:39:28', 16349);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 11:37:03', 1560);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 03:02:07', 9661);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 07:55:44', 14209);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 23:56:43', 15217);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 18:34:17', 21324);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 11:23:57', 8449);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 23:25:34', 10440);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 17:27:45', 16397);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 06:48:50', 17728);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 02:50:59', 28456);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 15:22:11', 2355);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 02:26:45', 22264);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 13:52:29', 11556);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 15:50:53', 15389);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 00:46:53', 20501);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 14:42:23', 23826);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 08:20:24', 23469);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 00:48:39', 4673);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 12:46:37', 6143);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 19:15:14', 17958);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 09:31:58', 12818);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 19:27:55', 17130);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 00:29:24', 26745);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 20:09:06', 6774);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 12:21:58', 20714);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 23:34:50', 25222);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 23:31:36', 8294);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 08:25:24', 22141);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 15:25:19', 15331);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 12:35:28', 23559);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 11:17:03', 18771);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 13:09:37', 19791);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 18:35:08', 16599);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 00:56:47', 2883);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 23:31:56', 28255);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 09:01:04', 5614);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 21:18:19', 8019);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 14:47:23', 9281);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 03:04:53', 14525);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 22:24:55', 4877);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 08:20:46', 21000);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 03:28:26', 18682);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 16:31:38', 12361);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 18:48:14', 17469);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 15:58:50', 8781);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 22:55:12', 9940);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 15:39:19', 27739);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 19:10:57', 6675);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 18:02:28', 9229);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 23:34:43', 21950);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 05:49:14', 17697);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 09:50:53', 3006);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 14:37:41', 12970);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 11:07:08', 14972);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 11:34:03', 28490);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 05:29:49', 3179);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 23:39:20', 3344);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 18:43:45', 11380);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 16:29:56', 25279);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 13:11:15', 2086);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 20:23:14', 13442);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 13:30:30', 9339);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 13:26:47', 4365);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 19:31:06', 15770);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 17:26:04', 8196);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 09:07:00', 18517);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 23:24:35', 8582);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 08:59:00', 25597);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 18:48:47', 18583);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 14:29:09', 3844);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 19:40:33', 4154);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 22:05:57', 20669);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 15:32:01', 22298);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 13:38:55', 14931);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 14:33:46', 19567);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 14:38:00', 6719);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 09:02:46', 20582);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 18:43:08', 1940);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 22:58:56', 13892);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 04:29:41', 5393);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 11:48:46', 20049);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 18:10:55', 10213);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 04:22:49', 5747);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 05:13:01', 1401);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 04:24:00', 13341);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 18:13:48', 8321);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 14:18:48', 20796);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 02:09:42', 29228);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 23:19:13', 1473);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 21:02:12', 1753);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 13:09:18', 29396);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 15:09:11', 5841);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 04:44:01', 25423);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 02:28:48', 19248);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 23:44:06', 20424);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 14:43:24', 21147);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 22:00:51', 17591);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 18:08:44', 11846);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 22:26:38', 1607);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 04:19:19', 19273);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 11:48:01', 23188);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 13:51:19', 21280);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 15:25:48', 3904);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 03:34:27', 4270);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 21:58:58', 14515);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 10:20:38', 16545);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 00:22:13', 8443);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 12:26:12', 1432);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 14:00:45', 20597);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 02:18:06', 27981);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 20:43:28', 1833);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 22:50:56', 12268);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 01:37:54', 26719);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 11:36:50', 1959);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 08:10:44', 5918);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 16:07:11', 23560);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 05:22:31', 2195);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 04:31:30', 9281);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 04:44:11', 11141);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 14:28:49', 20490);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 10:25:12', 21551);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 12:25:46', 21114);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 02:22:33', 22851);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 14:58:55', 28280);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 08:11:17', 22100);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 17:48:13', 26793);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 16:56:21', 13085);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 22:36:34', 1183);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 00:45:27', 7545);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 16:17:44', 9817);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 02:09:12', 19452);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 23:44:59', 1775);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 20:30:57', 24365);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 04:42:10', 20488);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 08:49:35', 11969);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 05:10:43', 4718);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 00:36:52', 6532);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 06:00:07', 2964);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 03:30:11', 2792);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 08:55:12', 29073);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 23:24:27', 12784);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 13:48:03', 18556);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 08:10:53', 4315);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 23:31:21', 4884);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 06:24:57', 20050);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 18:45:20', 24488);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 22:04:00', 7904);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 02:05:28', 2817);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 18:08:42', 22405);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 12:55:07', 15391);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 21:36:35', 4364);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 04:09:30', 14833);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 09:43:30', 14447);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 04:12:23', 6487);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 06:21:34', 1953);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 10:06:41', 23735);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 01:25:39', 26339);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 02:00:56', 16085);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 19:29:57', 26554);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 19:51:31', 6156);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 07:03:40', 9443);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 20:40:50', 16029);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 01:15:51', 16188);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 17:02:52', 1990);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 17:33:31', 8163);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 01:03:50', 13352);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 04:13:22', 29982);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 18:50:23', 28909);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 09:00:19', 11230);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 04:55:05', 29399);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 19:53:25', 28447);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 14:06:16', 14004);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 23:47:36', 28681);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 19:21:46', 22242);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 08:04:26', 10230);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 03:18:10', 29103);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 11:36:18', 15670);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 08:32:36', 25891);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 00:43:47', 25134);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 16:57:37', 21671);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 21:39:58', 23569);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 20:21:11', 11529);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 00:10:44', 22232);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 17:52:51', 2600);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 03:46:13', 6850);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 18:00:29', 12308);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 01:53:48', 22742);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 00:49:37', 23289);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 18:25:19', 18954);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 13:33:15', 24082);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 02:47:45', 19382);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 23:22:49', 21350);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 01:48:44', 14901);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 22:06:59', 22882);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 22:07:46', 25474);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 05:59:40', 11558);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 09:13:10', 16217);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 23:01:04', 24839);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 07:06:53', 27923);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 15:09:48', 6425);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 11:09:20', 6536);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 00:15:36', 5754);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 18:31:58', 16608);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 16:01:33', 2565);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 02:41:41', 24875);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 23:39:15', 27481);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 09:51:30', 29456);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 09:27:11', 2759);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 18:10:17', 23121);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 21:13:22', 26974);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 03:29:48', 19583);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 20:35:37', 19799);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 08:42:12', 25335);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 16:09:59', 21197);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 03:36:19', 29852);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 16:42:10', 29568);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 20:56:25', 4824);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 09:27:20', 29735);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 18:39:02', 3114);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 07:38:42', 19765);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 17:35:06', 8208);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 12:16:44', 10238);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 02:06:24', 5430);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 20:43:56', 15531);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 23:21:02', 3030);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 15:54:22', 10465);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 09:26:16', 3439);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 15:46:30', 9416);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 14:44:41', 4069);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 14:28:25', 25070);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 22:52:05', 5400);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 05:57:30', 18851);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 19:23:51', 11139);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 17:14:17', 5761);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 01:55:03', 3969);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 14:28:55', 13416);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 01:57:22', 4251);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 01:27:34', 15220);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 19:59:45', 12514);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 05:45:41', 10036);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 00:31:07', 29512);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 07:54:00', 1998);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 02:24:24', 25692);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 07:45:34', 16259);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 09:17:48', 9367);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 20:01:39', 19067);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 16:24:27', 8343);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 15:06:09', 22859);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 05:53:55', 24721);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 12:34:16', 12123);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 13:03:04', 15336);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 00:22:58', 26799);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 02:28:39', 23453);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 02:49:20', 8332);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 17:21:24', 12961);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 17:50:55', 14636);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 07:30:24', 20414);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 07:40:23', 29070);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 13:04:53', 22082);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 06:17:53', 6053);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 03:00:21', 18137);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 13:17:20', 9537);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 19:54:05', 27472);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 12:12:35', 1641);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 23:43:48', 14055);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 14:21:33', 20924);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 10:26:06', 14534);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 11:19:47', 18564);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 03:27:35', 23549);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 10:05:28', 17265);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 09:49:25', 22426);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 11:55:27', 2238);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 08:38:23', 23557);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 23:28:36', 12506);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 21:47:23', 11052);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 14:40:05', 5367);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 05:41:55', 18727);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 09:35:32', 11867);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 18:58:29', 23122);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 15:24:16', 24627);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 13:13:43', 24051);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 13:45:36', 18388);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 12:03:13', 18629);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 18:32:25', 14724);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 10:29:18', 13976);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 04:05:04', 27438);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 15:48:00', 7551);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 20:27:44', 18195);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 17:25:14', 13291);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 09:23:12', 4080);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 16:31:06', 10816);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 05:36:54', 18519);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 00:30:13', 5290);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 17:03:29', 3736);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 11:54:00', 21882);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 14:09:50', 26173);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 06:04:10', 29624);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 22:35:39', 17801);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 14:14:09', 4294);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 07:07:20', 9000);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 13:46:15', 6109);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 02:44:27', 27295);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 18:37:04', 3947);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 09:09:51', 7800);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 15:19:26', 4910);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 04:38:44', 10800);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 01:46:35', 22625);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 03:53:15', 12428);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 14:44:15', 2854);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 10:36:49', 11191);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 23:34:52', 9553);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 18:38:08', 8519);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 13:16:06', 5532);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 02:39:06', 9681);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 07:40:17', 14701);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 09:11:40', 29446);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 17:00:04', 29779);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 12:54:01', 28144);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 07:11:16', 24677);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 03:45:49', 7052);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 09:56:25', 13163);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 08:01:07', 2374);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 03:11:07', 21367);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 09:05:18', 25581);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 15:07:47', 7510);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 05:20:33', 12441);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 22:26:18', 1062);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 00:43:29', 16946);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 09:52:43', 21759);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 02:20:03', 18991);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 18:31:48', 27594);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 10:24:42', 7588);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 12:50:29', 9607);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 08:18:18', 10598);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 23:51:47', 2989);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 18:13:31', 7804);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 14:33:14', 29222);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 04:40:20', 23484);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 02:43:15', 21995);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 22:10:28', 10812);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 12:45:47', 23486);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 17:58:03', 15955);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 19:51:28', 15801);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 11:55:21', 10458);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 02:27:07', 15711);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 15:31:46', 7600);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 04:09:40', 6180);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 09:53:24', 29747);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 22:19:09', 3260);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 12:29:56', 19390);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 21:36:59', 7541);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 12:32:19', 13900);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 06:20:04', 19917);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 02:45:34', 29118);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 12:25:10', 12181);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 20:58:05', 5013);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 02:38:02', 8810);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 09:11:32', 7966);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 14:15:14', 18683);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 10:39:37', 13640);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 04:55:37', 23251);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 21:56:35', 5173);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 19:54:28', 7348);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 21:14:49', 18018);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 13:57:07', 3834);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 19:30:36', 6917);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 02:26:11', 5416);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 22:27:56', 11363);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 16:12:37', 12834);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 05:27:14', 3697);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 11:20:02', 28791);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 04:21:20', 20301);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 19:01:55', 28113);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 09:51:03', 4978);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 07:03:23', 12305);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 11:46:43', 4049);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 04:50:47', 11326);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 02:13:00', 6826);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 18:50:17', 2072);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 11:33:45', 19223);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 09:36:03', 25528);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 15:18:32', 29726);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 08:14:11', 3761);
insert into BongHits (timestamp, duration_ms) values ('2025-01-05 04:17:52', 25327);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 10:49:25', 14247);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 04:56:54', 13485);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 12:56:13', 15813);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 02:15:35', 6773);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 16:48:37', 25586);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 05:28:24', 15341);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 15:42:12', 20580);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 16:13:18', 26037);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 00:43:21', 10891);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 00:35:08', 16042);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 03:28:45', 11956);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 01:36:22', 3039);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 05:04:03', 2865);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 16:23:25', 7787);
insert into BongHits (timestamp, duration_ms) values ('2024-12-30 14:05:22', 5178);
insert into BongHits (timestamp, duration_ms) values ('2024-12-27 04:25:42', 21285);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 18:07:21', 18783);
insert into BongHits (timestamp, duration_ms) values ('2024-12-29 17:54:10', 18837);
insert into BongHits (timestamp, duration_ms) values ('2024-12-31 20:49:38', 2061);
insert into BongHits (timestamp, duration_ms) values ('2025-01-02 05:08:46', 13926);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 11:57:02', 8834);
insert into BongHits (timestamp, duration_ms) values ('2024-12-24 02:29:40', 5202);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 05:59:56', 2499);
insert into BongHits (timestamp, duration_ms) values ('2024-12-25 15:51:47', 16481);
insert into BongHits (timestamp, duration_ms) values ('2024-12-26 17:58:32', 15400);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 07:39:18', 28475);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 08:18:54', 23077);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 00:24:12', 16786);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 16:59:17', 5920);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 12:38:06', 5413);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 15:30:39', 27002);
insert into BongHits (timestamp, duration_ms) values ('2025-01-01 04:28:13', 17167);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 07:44:17', 12518);
insert into BongHits (timestamp, duration_ms) values ('2025-01-04 22:13:21', 2641);
insert into BongHits (timestamp, duration_ms) values ('2025-01-03 15:20:32', 25185);
insert into BongHits (timestamp, duration_ms) values ('2024-12-28 15:13:36', 10003);
`)
}

export function getStrainsCSV(): string {
  return `"Strain Name","Overview","Genetic Type","Lineage","THC Range","CBD Level","Dominant Terpenes","Qualitative Insights","Effects","Negatives","Uses","THC-Based Potency Rating (1-10)","User Rating (1-10)","Combined Potency / User Rating (1-10)"
"Trainwreck","Sativa-dominant hybrid known for its explosive cerebral high and rapid onset.","Sativa-dominant Hybrid","Mexican, Thai, Afghani","18-22%","Minimal","Myrcene, Pinene","Spicy, citrus aroma with a hint of pine; dense, energetic buds","Energized, Creative, Uplifted","dry mouth, dry eyes, dizziness","Ideal for creative pursuits, social settings, combating fatigue","7.5","7","7.25"
"Blue Dream","Balanced sativa-dominant hybrid offering gentle cerebral invigoration and full-body relaxation.","Sativa-dominant Hybrid","Blueberry x Haze","17-24%","Low","Myrcene, Pinene, Caryophyllene","Sweet berry aroma with earthy undertones; smooth buds","Euphoric, Relaxed, Creative","dry mouth, dry eyes","Great for stress relief, daytime use, creative tasks","7.75","7.5","7.63"
"Girl Scout Cookies","Popular hybrid known for its euphoric and relaxing effects with a sweet, earthy aroma.","Indica-dominant Hybrid","OG Kush x Durban Poison","18-28%","Low","Caryophyllene, Limonene","Sweet, earthy scent with hints of mint; dense, resinous buds","Happy, Relaxed, Euphoric","dry mouth, drowsiness","Effective for pain relief and mood elevation","9","8.5","8.75"
"Sour Diesel","Energetic sativa-dominant strain with a pungent diesel aroma.","Sativa-dominant","Chemdawg x Super Skunk","20-25%","Low","Limonene, Caryophyllene","Pungent, fuel-like scent with citrus hints; airy buds","Energetic, Uplifted, Focused","dry mouth, anxiety","Ideal for daytime use and creative projects","8.75","8","8.38"
"OG Kush","Iconic hybrid delivering a balanced high with earthy pine and citrus flavors.","Hybrid","Chemdawg x Hindu Kush","19-26%","Low","Myrcene, Limonene","Earthy, pine aroma with a touch of citrus; dense, resinous buds","Relaxed, Euphoric, Uplifted","dry mouth, dry eyes","Used for stress relief and pain management","8.75","8","8.38"
"Pineapple Express","Tropical sativa-dominant hybrid offering a sweet, fruity flavor and energetic high.","Sativa-dominant Hybrid","Trainwreck x Hawaiian","19-25%","Low","Limonene, Myrcene","Tropical pineapple aroma with hints of earthiness; vibrant buds","Energetic, Uplifted, Creative","dry mouth, dry eyes","Perfect for social settings and daytime activities","8.5","8","8.25"
"Granddaddy Purple","Renowned indica-dominant strain with a deep purple hue and grape-like aroma.","Indica-dominant","Purple Urkle x Big Bud","17-23%","Low","Myrcene, Pinene","Sweet, grape aroma with a relaxing, heavy bud structure","Relaxed, Sleepy, Euphoric","dry mouth, drowsiness","Ideal for pain relief and insomnia","7.5","7","7.25"
"White Widow","Balanced hybrid known for its potent resin production and earthy pine flavor.","Hybrid","Brazilian Sativa x South Indian Indica","18-25%","Low","Myrcene, Caryophyllene","Earthy, woody aroma with a subtle sweet note; frosty buds","Energetic, Euphoric, Creative","dry mouth, dry eyes","Suitable for stress relief and social use","8.25","8","8.13"
"AK-47","Sativa-dominant hybrid offering a mellow, long-lasting cerebral high with a sweet, sour flavor.","Sativa-dominant Hybrid","Colombian, Mexican, Thai, Afghani","13-20%","Low","Myrcene, Limonene","Sweet and sour aroma with a light, airy bud structure","Relaxed, Uplifted, Creative","dry mouth, fatigue","Great for relaxation and creative inspiration","5.75","6","5.88"
"Durban Poison","Pure sativa known for its energizing effects and sweet, earthy aroma.","Pure Sativa","South African Landrace","15-25%","Low","Terpinolene, Myrcene","Sweet, earthy scent with hints of pine; light, fluffy buds","Energizing, Uplifting, Focused","dry mouth, insomnia","Ideal for daytime use and outdoor activities","7.5","7","7.25"
"Purple Haze","Sativa-dominant strain with a distinctive purple hue and uplifting high.","Sativa-dominant Hybrid","Haze lineage","15-20%","Low","Myrcene, Limonene","Fruity, berry aroma with a hint of spice; colorful buds","Uplifted, Creative, Euphoric","dry mouth, dry eyes","Suitable for creative endeavors and social gatherings","6.25","6.5","6.38"
"Green Crack","Intense sativa-dominant strain known for its energizing and focused high.","Sativa-dominant","Afghani x Skunk #1","15-25%","Low","Myrcene, Pinene","Citrus and tropical fruit aroma; tight, potent buds","Energetic, Focused, Uplifted","dry mouth, anxiety","Perfect for daytime energy and focus","7.5","7.25","7.38"
"Jack Herer","Award-winning sativa-dominant hybrid celebrated for its clear-headed and creative high.","Sativa-dominant Hybrid","Haze x Northern Lights x Shiva Skunk","18-24%","Low","Terpinolene, Caryophyllene","Spicy, pine aroma with hints of citrus; frosty buds","Uplifted, Creative, Euphoric","dry mouth, paranoia","Ideal for creative tasks and stress relief","8","8","8.00"
"Chemdawg","Potent hybrid with a strong diesel aroma and robust cerebral high.","Hybrid","Likely Chemdawg #4 x Unknown","15-20%","Low","Myrcene, Caryophyllene","Pungent diesel scent with a hint of spice; dense buds","Focused, Euphoric, Relaxed","dry mouth, dry eyes","Used for mood enhancement and pain relief","6.25","6.5","6.38"
"Lemon Haze","Sativa-dominant hybrid with a zesty lemon flavor and invigorating high.","Sativa-dominant Hybrid","Lemon Skunk x Silver Haze","15-22%","Low","Limonene, Terpinolene","Bright citrus aroma with a sweet undertone; light, airy buds","Energized, Uplifted, Happy","dry mouth, anxiety","Great for daytime use and creative activities","6.75","6.5","6.63"
"Northern Lights","Classic indica-dominant strain known for its deeply relaxing and sedative effects.","Indica-dominant","Afghani x Thai","16-21%","Low","Myrcene, Pinene","Sweet and spicy aroma with resinous, compact buds","Relaxed, Sleepy, Euphoric","dry mouth, drowsiness","Ideal for pain relief and insomnia","6.75","6.25","6.50"
"Critical Mass","Indica-dominant strain famous for its heavy yields and potent body high.","Indica-dominant","Afghani x Skunk #1","19-21%","Low","Myrcene, Caryophyllene","Earthy and sweet aroma; large, dense buds","Relaxed, Sedated, Happy","dry mouth, couch-lock","Suitable for chronic pain and stress relief","7.5","7","7.25"
"Bubble Gum","Balanced hybrid with a sweet, bubble gum flavor and uplifting effects.","Hybrid","Unknown (landrace blend)","15-20%","Low","Caryophyllene, Limonene","Sweet, fruity aroma reminiscent of bubble gum; soft buds","Happy, Euphoric, Relaxed","dry mouth, dizziness","Good for mood elevation and mild pain relief","6.25","6","6.13"
"Amnesia Haze","Sativa-dominant hybrid known for its potent, uplifting high and complex flavor profile.","Sativa-dominant Hybrid","Haze lineage","20-25%","Low","Terpinolene, Myrcene","Earthy and citrus aroma with a hint of spice; airy buds","Uplifted, Creative, Euphoric","dry mouth, paranoia","Ideal for creative tasks and social settings","8.75","8.25","8.50"
"Strawberry Cough","Sativa-dominant strain celebrated for its sweet strawberry aroma and smooth, uplifting high.","Sativa-dominant","Possibly Haze-based","15-20%","Low","Limonene, Myrcene","Sweet berry scent with a subtle herbal note; light buds","Uplifted, Euphoric, Focused","dry mouth, coughing","Great for stress relief and creative pursuits","6.25","6","6.13"
"Maui Wowie","Tropical sativa-dominant strain delivering an energetic high with a fruity, exotic flavor.","Sativa-dominant","Hawaiian Landrace","15-20%","Low","Limonene, Terpinolene","Tropical pineapple and citrus aroma; light, airy buds","Energizing, Uplifted, Creative","dry mouth, dizziness","Perfect for daytime energy and relaxation","6.25","6.5","6.38"
"Grape Ape","Indica-dominant strain known for its distinct grape aroma and deeply relaxing effects.","Indica-dominant","Afghani x Mendocino Purps","15-22%","Low","Myrcene, Pinene","Sweet, grape-like aroma; colorful, dense buds","Relaxed, Sedated, Happy","dry mouth, drowsiness","Ideal for stress relief and pain management","6.75","6.5","6.63"
"Blueberry","Indica-dominant strain with a renowned blueberry aroma and soothing effects.","Indica-dominant","Blueberry x Afghan","16-24%","Low","Myrcene, Pinene","Sweet blueberry scent with earthy undertones; frosty buds","Relaxed, Euphoric, Sleepy","dry mouth, drowsiness","Used for relaxation and mild pain relief","7.5","7","7.25"
"Cherry Pie","Hybrid strain offering a sweet and tart cherry flavor with balanced effects.","Hybrid","Granddaddy Purple x Durban Poison","16-22%","Low","Limonene, Caryophyllene","Sweet, tart cherry aroma; sticky, dense buds","Happy, Relaxed, Euphoric","dry mouth, dry eyes","Suitable for mood elevation and pain relief","7","7","7.00"
"Super Silver Haze","Sativa-dominant hybrid with a potent, energetic high and complex citrus-spice profile.","Sativa-dominant Hybrid","Skunk, Northern Lights, Haze","18-23%","Low","Terpinolene, Myrcene","Citrus and earthy aroma with spicy notes; frosty buds","Energized, Uplifted, Focused","dry mouth, anxiety","Ideal for daytime creativity and stress relief","7.75","7.5","7.63"
"Bruce Banner","Potent hybrid known for its explosive high and pungent, sweet diesel aroma.","Hybrid","OG Kush x Strawberry Diesel","20-25%","Low","Myrcene, Caryophyllene","Sweet, diesel-like aroma with a hint of fruit; dense buds","Euphoric, Energetic, Creative","dry mouth, paranoia","Used for mood enhancement and pain management","8.75","8.5","8.63"
"Wedding Cake","Indica-dominant hybrid with a rich, tangy flavor and a potent, relaxing high.","Indica-dominant Hybrid","Cherry Pie x Girl Scout Cookies","20-25%","Low","Caryophyllene, Limonene","Sweet, earthy aroma with a hint of vanilla; dense buds","Relaxed, Happy, Euphoric","dry mouth, drowsiness","Ideal for stress relief and pain management","8.75","8.25","8.50"
"Gelato","Balanced hybrid celebrated for its dessert-like flavor and euphoric, calming effects.","Hybrid","Sunset Sherbet x Thin Mint GSC","20-25%","Low","Limonene, Caryophyllene","Sweet, creamy aroma with hints of citrus; sticky buds","Relaxed, Happy, Uplifted","dry mouth, dizziness","Great for relaxation and mood enhancement","8.75","8.5","8.63"
"Sunset Sherbet","Indica-dominant hybrid known for its fruity dessert flavor and soothing high.","Indica-dominant Hybrid","Girl Scout Cookies x Pink Panties","18-22%","Low","Limonene, Myrcene","Fruity, sherbet-like aroma; vibrant, dense buds","Relaxed, Euphoric, Happy","dry mouth, drowsiness","Suitable for evening relaxation and stress relief","7.5","7","7.25"
"GMO (Garlic Cookies)","Indica-dominant hybrid with a pungent garlic aroma and deeply relaxing effects.","Indica-dominant Hybrid","Chemdawg x GSC","18-25%","Low","Caryophyllene, Myrcene","Pungent, savory aroma with earthy undertones; sticky buds","Relaxed, Sedated, Euphoric","dry mouth, dry eyes","Ideal for pain relief and stress reduction","8.25","8","8.13"
"Do-Si-Dos","Indica-dominant hybrid offering a sweet and earthy flavor with potent relaxing effects.","Indica-dominant Hybrid","Girl Scout Cookies x Face Off OG","18-22%","Low","Limonene, Caryophyllene","Sweet, floral aroma with hints of mint; dense, resinous buds","Relaxed, Euphoric, Sedated","dry mouth, drowsiness","Used for anxiety relief and relaxation","7.5","7","7.25"
"Runtz","Balanced hybrid known for its sweet, candy-like flavor and powerful, euphoric high.","Hybrid","Zkittlez x Gelato","19-29%","Low","Limonene, Caryophyllene","Fruity, candy-like aroma; vibrant, colorful buds","Happy, Euphoric, Relaxed","dry mouth, dizziness","Ideal for creative pursuits and mood enhancement","9.5","9","9.25"
"Zkittlez","Indica-dominant hybrid with a sweet, fruity flavor and a relaxing, mellow high.","Indica-dominant Hybrid","Grape Ape x Grapefruit","15-22%","Low","Myrcene, Limonene","Intensely sweet, fruity aroma; compact, resinous buds","Relaxed, Happy, Euphoric","dry mouth, dry eyes","Great for stress relief and relaxation","6.75","6.5","6.63"
"Biscotti","Hybrid strain offering a rich, cookie-like flavor paired with a balanced high.","Hybrid","Girl Scout Cookies x South Florida OG","18-25%","Low","Limonene, Caryophyllene","Sweet, baked aroma with hints of spice; dense, trichome-rich buds","Happy, Relaxed, Uplifted","dry mouth, drowsiness","Suitable for creative tasks and relaxation","8.25","8","8.13"
"Tahoe OG","Indica-dominant strain with a robust, earthy pine flavor and potent body effects.","Indica-dominant","OG Kush lineage","20-25%","Low","Myrcene, Limonene","Earthy, pine aroma with a hint of spice; compact, sticky buds","Relaxed, Sedated, Euphoric","dry mouth, couch-lock","Ideal for pain relief and stress management","8.75","8.5","8.63"
"Forbidden Fruit","Hybrid strain known for its tropical, fruity flavor and deeply relaxing high.","Hybrid","Tangie x Cherry Pie","18-23%","Low","Limonene, Caryophyllene","Tropical, citrusy aroma with sweet undertones; resinous buds","Relaxed, Happy, Euphoric","dry mouth, drowsiness","Great for evening relaxation and mood enhancement","7.75","7.5","7.63"
"Agent Orange","Sativa-dominant hybrid offering a zesty citrus flavor and uplifting effects.","Sativa-dominant Hybrid","Orange Velvet x Jack the Ripper","18-25%","Low","Limonene, Terpinolene","Vibrant citrus aroma with sweet, tangy notes; frosty buds","Energized, Uplifted, Creative","dry mouth, dry eyes","Ideal for daytime use and creative inspiration","8.25","8","8.13"
"Sour Tangie","Sativa-dominant hybrid blending sour diesel with tangy citrus flavors for a vibrant high.","Sativa-dominant Hybrid","Sour Diesel x Tangie","18-24%","Low","Limonene, Caryophyllene","Tangy citrus aroma with a hint of sour diesel; dense buds","Energized, Uplifted, Focused","dry mouth, anxiety","Suitable for creative projects and daytime activities","8","7.75","7.88"
"Critical Kush","Indica-dominant hybrid merging heavy yields with a potent, relaxing high.","Indica-dominant Hybrid","Critical Mass x OG Kush","20-25%","Low","Myrcene, Caryophyllene","Earthy, pine aroma with subtle sweetness; chunky buds","Relaxed, Sedated, Happy","dry mouth, drowsiness","Great for pain relief and evening relaxation","8.75","8.25","8.50"
"Alaskan Thunder Fuck","Sativa-dominant hybrid known for its strong, uplifting high and pungent, piney aroma.","Sativa-dominant Hybrid","Afghani x Unknown","18-25%","Low","Pinene, Myrcene","Pungent, piney scent with earthy undertones; frosty, energizing buds","Energized, Uplifted, Creative","dry mouth, anxiety","Ideal for boosting energy and focus","8.25","8","8.13"
"Harlequin","CBD-rich sativa-dominant strain celebrated for its clear-headed, medicinal effects.","Sativa-dominant Hybrid","Colombian Gold x Nepalese","7-15%","High","Myrcene, Pinene","Earthy, herbal aroma with subtle sweetness; lighter buds","Clear-headed, Relaxed, Focused","dry mouth, dizziness","Used for pain relief and anxiety management","3","3.5","3.25"
"Cannatonic","Balanced hybrid renowned for its low THC and high CBD content, offering gentle relief.","Hybrid","MK Ultra x G13","6-17%","High","Limonene, Caryophyllene","Earthy and citrus aroma; soft, resinous buds","Calm, Relaxed, Focused","dry mouth, fatigue","Ideal for medical use and anxiety relief","3.25","3.5","3.38"
"Charlotte's Web","CBD-dominant strain with minimal psychoactive effects, designed for therapeutic use.","CBD-dominant","High CBD phenotype of hemp","0-0.3%","Very High","Myrcene, Limonene","Mild, herbal aroma; less resinous buds","Calm, Focused, Clear-headed","none","Used for epilepsy and chronic pain management","0.5","0.5","0.5"
"Remedy","Balanced hybrid with high CBD content offering mild relaxation without strong psychoactive effects.","Hybrid","CBD-rich phenotype","1-4%","High","Limonene, Caryophyllene","Earthy, citrus notes; soft buds","Relaxed, Clear-headed, Calm","dry mouth, sedation","Ideal for anxiety and pain relief","3.5","3.75","3.63"
"Pennywise","Indica-dominant strain with a near 1:1 THC to CBD ratio, offering balanced effects.","Indica-dominant Hybrid","Harle-Tsu x Jack the Ripper","4-8%","Balanced","Myrcene, Caryophyllene","Earthy aroma with subtle spice; compact buds","Calm, Focused, Euphoric","dry mouth, dizziness","Suitable for medical use and stress relief","3.5","3.75","3.63"
"Canna-Tsu","Hybrid strain featuring balanced levels of THC and CBD for a mild, uplifting experience.","Hybrid","Cannatonic x Sour Tsunami","4-8%","Balanced","Limonene, Pinene","Subtle citrus aroma with herbal notes; light buds","Calm, Happy, Clear-headed","dry mouth, fatigue","Used for mild pain and anxiety relief","3.5","3.75","3.63"
"ACDC","CBD-dominant strain with minimal psychoactive effects, prized for its therapeutic benefits.","CBD-dominant","Cannatonic phenotype","1-6%","Very High","Myrcene, Limonene","Earthy, herbal aroma; non-resinous buds","Clear-headed, Relaxed, Focused","none","Ideal for chronic pain, inflammation, anxiety","1.5","1.75","1.63"
"Ringo's Gift","Hybrid strain with high CBD offering a balanced and clear-headed experience.","Hybrid","Harle-Tsu x ACDC","Varies (1:1–24:1 ratio)","High","Limonene, Caryophyllene","Mild, earthy aroma with sweet undertones; moderate buds","Calm, Focused, Relaxed","dry mouth, sedation","Used for pain, anxiety, seizure management","2","2.25","2.13"
"Sour Tsunami","CBD-dominant strain known for its low THC content and effective pain relief properties.","CBD-dominant","Sour Diesel phenotype","6-10%","High","Limonene, Myrcene","Tangy, diesel aroma with earthy notes; less resinous","Calm, Relaxed, Focused","dry mouth, sedation","Ideal for chronic pain and inflammation","1.5","1.75","1.63"
"Harle-Tsu","Balanced CBD-rich hybrid offering mild euphoria with significant therapeutic benefits.","Hybrid","Harlequin x Canna-Tsu","4-10%","High","Myrcene, Caryophyllene","Earthy, herbal scent with subtle citrus; light buds","Clear-headed, Calm, Relaxed","dry mouth, fatigue","Used for anxiety and pain relief","2","2.25","2.13"
"Blue Cheese","Indica-dominant hybrid with a pungent, cheese-like aroma and deeply relaxing effects.","Indica-dominant Hybrid","Blueberry x UK Cheese","18-22%","Low","Myrcene, Caryophyllene","Strong cheesy aroma with sweet berry undertones; dense buds","Relaxed, Euphoric, Sedated","dry mouth, drowsiness","Great for stress relief and relaxation","7.5","7.25","7.38"
"Orange Bud","Sativa-dominant strain celebrated for its vibrant citrus flavor and uplifting effects.","Sativa-dominant","Afghani x Thai","15-22%","Low","Limonene, Terpinolene","Bright citrus aroma with a hint of spice; light, airy buds","Energetic, Uplifted, Happy","dry mouth, dry eyes","Ideal for daytime use and mood elevation","6.75","6.5","6.63"
"LA Confidential","Indica-dominant strain known for its smooth, pine and spice flavors and calming effects.","Indica-dominant","Afghani x OG Kush","16-22%","Low","Myrcene, Limonene","Earthy, pine aroma with subtle sweetness; resinous buds","Relaxed, Sedated, Euphoric","dry mouth, drowsiness","Used for stress relief and insomnia","7","7","7.00"
"God's Gift","Indica-dominant hybrid offering a powerful, euphoric high with a sweet, grape aroma.","Indica-dominant Hybrid","Granddaddy Purple x OG Kush","20-25%","Low","Myrcene, Caryophyllene","Rich, sweet grape aroma with sticky, dense buds","Relaxed, Euphoric, Sedated","dry mouth, couch-lock","Ideal for pain relief and stress management","8.75","8.5","8.63"
"NYC Diesel","Sativa-dominant strain with a strong diesel aroma and uplifting, creative effects.","Sativa-dominant","Diesel x Unknown","18-25%","Low","Limonene, Caryophyllene","Pungent diesel scent with hints of citrus; frosty buds","Energized, Creative, Uplifted","dry mouth, anxiety","Great for daytime creativity and focus","8.25","8","8.13"
"Skunk #1","Classic hybrid known for its strong, skunky aroma and balanced, long-lasting effects.","Hybrid","Skunk #1 lineage","15-20%","Low","Myrcene, Caryophyllene","Pungent, skunky odor with earthy undertones; sticky buds","Happy, Relaxed, Euphoric","dry mouth, drowsiness","Ideal for stress relief and mood elevation","6.25","6","6.13"
"Lemon Skunk","Hybrid strain offering a zesty lemon flavor and an energetic, uplifting high.","Hybrid","Skunk x Lemon Thai","15-22%","Low","Limonene, Terpinolene","Bright lemon aroma with skunky undertones; light buds","Energized, Uplifted, Happy","dry mouth, anxiety","Great for daytime use and creative tasks","6.75","6.5","6.63"
"Master Kush","Indica-dominant strain renowned for its earthy, spicy flavor and deeply calming effects.","Indica-dominant","Afghani lineage","15-22%","Low","Myrcene, Limonene","Earthy, herbal aroma with a subtle spice; dense buds","Relaxed, Sedated, Euphoric","dry mouth, drowsiness","Ideal for stress relief and pain management","6.75","6.5","6.63"
"Hindu Kush","Pure indica known for its earthy, woody flavors and deeply relaxing effects.","Indica (Pure)","Hindu Kush Landrace","16-21%","Low","Myrcene, Pinene","Earthy, woody aroma with a hint of spice; compact buds","Calm, Relaxed, Sedated","dry mouth, couch-lock","Used for relaxation and pain relief","6.75","6.5","6.63"
"Afghani","Pure indica landrace with a strong, earthy aroma and heavy, sedative effects.","Indica (Pure)","Afghani Landrace","18-23%","Low","Myrcene, Caryophyllene","Earthy, hash-like aroma; resinous, dense buds","Relaxed, Sedated, Euphoric","dry mouth, drowsiness","Ideal for pain relief and insomnia","7.5","7.25","7.38"
"Pakistani Chitral Kush","Robust pure indica with a distinct earthy and spicy flavor profile and potent effects.","Indica (Pure)","Pakistani Landrace","18-25%","Low","Myrcene, Pinene","Earthy, spicy aroma with resinous buds","Relaxed, Sedated, Euphoric","dry mouth, couch-lock","Used for chronic pain and insomnia","8.25","8","8.13"
"Blueberry Kush","Hybrid strain combining fruity blueberry flavors with classic Kush earthiness.","Hybrid","Blueberry x Kush","18-24%","Low","Myrcene, Caryophyllene","Sweet blueberry aroma with earthy, herbal notes; dense buds","Relaxed, Happy, Euphoric","dry mouth, drowsiness","Ideal for stress relief and mood enhancement","8","7.75","7.88"
"Cherry OG","Hybrid strain known for its sweet cherry flavor and potent, balanced high.","Hybrid","Cherry Pie x OG Kush","20-26%","Low","Limonene, Caryophyllene","Sweet cherry aroma with earthy undertones; sticky buds","Relaxed, Euphoric, Creative","dry mouth, dry eyes","Used for stress relief and pain management","9","8.75","8.88"
"Jack Flash","Indica-dominant hybrid delivering a potent, sedative high with a spicy, herbal flavor.","Indica-dominant Hybrid","Jack the Ripper x Flashback","20-25%","Low","Myrcene, Caryophyllene","Herbal, spicy aroma with a hint of citrus; dense buds","Relaxed, Sedated, Euphoric","dry mouth, drowsiness","Ideal for nighttime use and pain relief","8.75","8.5","8.63"
"White Rhino","Indica-dominant strain known for its heavy, resinous buds and powerful body high.","Indica-dominant","Afghani x Unknown","18-22%","Low","Myrcene, Caryophyllene","Earthy, pine aroma with a hint of sweetness; chunky buds","Relaxed, Sedated, Euphoric","dry mouth, couch-lock","Used for severe pain and stress relief","7.5","7.25","7.38"
"Alien OG","Hybrid strain celebrated for its potent, spacey high and complex pine-citrus flavors.","Hybrid","Tahoe OG x Alien Kush","20-25%","Low","Limonene, Myrcene","Pine and citrus aroma with a touch of earthiness; frosty buds","Euphoric, Creative, Relaxed","dry mouth, dry eyes","Ideal for creative sessions and relaxation","8.75","8.5","8.63"
"Critical Jack","Hybrid that merges the uplifting effects of Jack Herer with the heavy yields of Critical Mass.","Hybrid","Jack Herer x Critical Mass","18-25%","Low","Myrcene, Caryophyllene","Balanced aroma with hints of spice and earth; robust buds","Happy, Relaxed, Euphoric","dry mouth, drowsiness","Great for stress relief and creative inspiration","8.25","8","8.13"
"Agent Diesel","Hybrid strain with a robust diesel aroma and a balanced, energizing high.","Hybrid","Diesel x Unknown","18-24%","Low","Limonene, Caryophyllene","Strong diesel scent with citrus hints; resinous buds","Energized, Uplifted, Focused","dry mouth, anxiety","Ideal for daytime focus and creativity","8","7.75","7.88"
"Candyland","Sativa-dominant hybrid offering a sweet, candy-like flavor with an uplifting high.","Sativa-dominant Hybrid","Unknown (landrace blend)","16-22%","Low","Limonene, Myrcene","Sweet, sugary aroma; light, airy buds","Happy, Euphoric, Energetic","dry mouth, dry eyes","Suitable for daytime energy and creativity","7","7","7.00"
"Tangie","Sativa-dominant strain famous for its strong citrus aroma and euphoric, uplifting effects.","Sativa-dominant Hybrid","Grapefruit x California Orange","18-25%","Low","Limonene, Terpinolene","Vibrant citrus scent with sweet undertones; frosty buds","Uplifted, Energetic, Creative","dry mouth, anxiety","Perfect for boosting mood and creativity","8.25","8","8.13"
"Chernobyl","Hybrid strain with an earthy, pungent aroma and a balanced mix of cerebral and body effects.","Hybrid","Unknown (landrace blend)","16-20%","Low","Myrcene, Caryophyllene","Earthy, spicy aroma; compact, dense buds","Balanced, Euphoric, Relaxed","dry mouth, dry eyes","Ideal for daytime use and mild pain relief","6.5","6.25","6.38"
"LSD","Sativa-dominant hybrid renowned for its psychedelic, mind-bending high and complex flavor profile.","Sativa-dominant Hybrid","Unknown (Haze lineage)","18-25%","Low","Terpinolene, Myrcene","Psychedelic, earthy aroma with hints of citrus; trichome-rich buds","Creative, Euphoric, Uplifted","dry mouth, paranoia","Great for creative exploration and social settings","8.25","8","8.13"
"Romulan","Indica-dominant strain delivering a potent, sedative high with an earthy, pine flavor.","Indica-dominant Hybrid","Indica landrace","20-26%","Low","Myrcene, Caryophyllene","Earthy, pine aroma with spicy undertones; dense buds","Relaxed, Sedated, Euphoric","dry mouth, couch-lock","Ideal for evening use and pain management","9","8.75","8.88"
"Berry White","Hybrid strain offering a sweet berry flavor with a balanced, uplifting high.","Hybrid","Unknown (landrace blend)","15-21%","Low","Limonene, Caryophyllene","Sweet berry aroma with subtle earthy notes; light buds","Happy, Euphoric, Relaxed","dry mouth, dry eyes","Great for mood elevation and relaxation","6.5","6.25","6.38"
"Blackberry Kush","Indica-dominant hybrid known for its rich, blackberry flavor and calming effects.","Indica-dominant Hybrid","Unknown (Kush lineage)","18-25%","Low","Myrcene, Limonene","Sweet, berry aroma with earthy, herbal notes; compact buds","Relaxed, Sedated, Happy","dry mouth, drowsiness","Ideal for stress relief and insomnia","8.25","8","8.13"
"Forbidden Berry","Hybrid strain combining sweet berry flavors with a potent, relaxing high.","Hybrid","Forbidden Fruit x Blackberry Kush","18-24%","Low","Limonene, Caryophyllene","Fruity, berry aroma with earthy undertones; resinous buds","Relaxed, Euphoric, Happy","dry mouth, dry eyes","Suitable for evening relaxation and mood enhancement","8","7.75","7.88"
"Sour OG","Hybrid strain featuring a sour, pungent aroma with powerful, sedative effects.","Hybrid","OG Kush x Sour Diesel","20-26%","Low","Myrcene, Caryophyllene","Sour, pungent aroma with earthy undertones; sticky buds","Relaxed, Sedated, Euphoric","dry mouth, couch-lock","Great for pain relief and heavy relaxation","9","8.5","8.75"
"God Bud","Indica-dominant strain revered for its heavy, sedative high and earthy, herbal flavor.","Indica-dominant Hybrid","Unknown (classic strain)","15-22%","Low","Myrcene, Caryophyllene","Earthy, herbal aroma with a subtle sweetness; dense buds","Relaxed, Sedated, Happy","dry mouth, drowsiness","Ideal for chronic pain and insomnia","6.75","6.5","6.63"
"Cheese","Indica-dominant hybrid noted for its pungent, cheesy aroma and balanced, relaxing effects.","Indica-dominant Hybrid","UK Cheese Landrace","18-22%","Low","Caryophyllene, Myrcene","Strong cheesy odor with earthy undertones; dense, sticky buds","Relaxed, Euphoric, Happy","dry mouth, dry eyes","Perfect for stress relief and creative pursuits","7.5","7.25","7.38"
"G13","Potent hybrid with a mysterious lineage offering a powerful, euphoric high.","Hybrid","Urban legend strain","20-26%","Low","Myrcene, Caryophyllene","Pungent, earthy aroma with hints of diesel; compact buds","Euphoric, Creative, Relaxed","dry mouth, dizziness","Ideal for experienced users seeking strong effects","9","8.75","8.88"
"Blueberry OG","Hybrid strain merging the sweet flavors of Blueberry with the potency of OG Kush.","Hybrid","Blueberry x OG Kush","18-25%","Low","Myrcene, Caryophyllene","Sweet blueberry aroma with earthy, pine undertones; resinous buds","Relaxed, Euphoric, Happy","dry mouth, drowsiness","Great for relaxation and mood enhancement","8.25","8","8.13"
"Cherry Bomb","Hybrid strain with an explosive cherry flavor and a dynamic, balanced high.","Hybrid","Cherry Pie x Unknown","18-24%","Low","Limonene, Caryophyllene","Bold cherry aroma with a hint of spice; dense buds","Euphoric, Energetic, Creative","dry mouth, dry eyes","Ideal for creative pursuits and social gatherings","8","8","8.00"
"Mango Kush","Indica-dominant hybrid offering a tropical mango flavor with deeply relaxing effects.","Indica-dominant Hybrid","Afghani x Mango","20-26%","Low","Myrcene, Limonene","Tropical mango aroma with earthy undertones; dense, resinous buds","Relaxed, Sedated, Euphoric","dry mouth, drowsiness","Used for stress relief and relaxation","9","8.75","8.88"
"Pineapple Chunk","Indica-dominant hybrid featuring a sweet pineapple aroma and a heavy, sedative high.","Indica-dominant Hybrid","Pineapple x Chunk","16-23%","Low","Limonene, Myrcene","Tropical pineapple scent with earthy notes; chunky buds","Relaxed, Sedated, Happy","dry mouth, couch-lock","Ideal for evening use and pain management","7.25","7","7.13"
"Jillybean","Hybrid strain known for its fruity, floral flavor and uplifting, creative effects.","Hybrid","Unknown (landrace blend)","15-20%","Low","Limonene, Caryophyllene","Fruity, floral aroma with a sweet finish; light buds","Uplifted, Euphoric, Creative","dry mouth, dry eyes","Great for daytime use and creative inspiration","6.25","6","6.13"
"Strawberry Banana","Hybrid strain combining sweet strawberry and banana flavors with a balanced high.","Hybrid","Unknown (blend)","18-26%","Low","Limonene, Myrcene","Sweet, tropical aroma with a creamy finish; resinous buds","Happy, Relaxed, Euphoric","dry mouth, dizziness","Ideal for mood elevation and relaxation","8.5","8.25","8.38"
"Tropicana Cookies","Sativa-dominant hybrid delivering a burst of citrus and cookie flavors with an energetic high.","Sativa-dominant Hybrid","Cookie genetics x Tangie","20-28%","Low","Limonene, Caryophyllene","Zesty citrus aroma with a sweet, baked undertone; frosty buds","Energized, Uplifted, Creative","dry mouth, dry eyes","Perfect for daytime creativity and social events","9.5","9","9.25"
"UK Cheese","Indica-dominant variant of Cheese known for its pungent aroma and relaxing, euphoric effects.","Indica-dominant Hybrid","UK Landrace","15-20%","Low","Caryophyllene, Myrcene","Strong cheesy odor with herbal undertones; sticky buds","Relaxed, Euphoric, Happy","dry mouth, dry eyes","Great for stress relief and relaxation","6.25","6","6.13"
"Raspberry Kush","Indica-dominant hybrid with a sweet raspberry flavor and a deeply calming high.","Indica-dominant Hybrid","Afghani x Unknown","18-24%","Low","Myrcene, Caryophyllene","Sweet raspberry aroma with earthy notes; dense buds","Relaxed, Sedated, Euphoric","dry mouth, drowsiness","Ideal for evening use and pain relief","8","7.75","7.88"
"Orange Cookies","Hybrid strain combining citrus and sweet cookie flavors with a balanced, uplifting high.","Hybrid","Girl Scout Cookies x Orange Velvet","18-25%","Low","Limonene, Caryophyllene","Citrus-infused aroma with sweet undertones; resinous buds","Happy, Relaxed, Uplifted","dry mouth, dry eyes","Suitable for mood enhancement and stress relief","8.25","8","8.13"
"White Tahoe Cookies","Indica-dominant hybrid featuring a sweet, citrusy flavor and potent, relaxing effects.","Indica-dominant Hybrid","Tahoe OG x Cookies","20-25%","Low","Limonene, Caryophyllene","Sweet citrus aroma with earthy hints; dense, sticky buds","Relaxed, Euphoric, Sedated","dry mouth, couch-lock","Ideal for evening relaxation and pain management","8.75","8.5","8.63"
"Fire OG","Indica-dominant strain known for its intense, spicy pine flavor and powerful sedative effects.","Indica-dominant Hybrid","OG Kush lineage","20-25%","Low","Myrcene, Limonene","Spicy, pine aroma with a hint of earthiness; chunky buds","Relaxed, Sedated, Euphoric","dry mouth, drowsiness","Used for severe pain relief and stress reduction","8.75","8.5","8.63"
"Headband","Hybrid strain recognized for its tight, band-like effect and a balanced cerebral and body high.","Hybrid","Super Silver Haze x OG Kush","18-22%","Low","Myrcene, Caryophyllene","Subtle, earthy aroma with hints of diesel; compact buds","Euphoric, Relaxed, Focused","dry mouth, fatigue","Great for migraine relief and creative focus","7.5","7.25","7.38"
"Jack the Ripper","Potent hybrid with a sharp, spicy flavor and a fast-acting, cerebral high.","Hybrid","Jack Herer x Unknown","18-24%","Low","Limonene, Caryophyllene","Spicy, herbal aroma with a hint of citrus; dense buds","Euphoric, Creative, Energetic","dry mouth, dry eyes","Ideal for creative inspiration and stress relief","8","8","8.00"
"Cinderella 99","Sativa-dominant hybrid known for its uplifting, energetic high and sweet, citrus flavor.","Sativa-dominant Hybrid","Unknown (landrace blend)","18-24%","Low","Limonene, Terpinolene","Sweet citrus aroma with floral hints; airy buds","Energized, Uplifted, Creative","dry mouth, anxiety","Great for daytime energy and creativity","8","8.25","8.13"
"Blue Cookies","Hybrid strain combining sweet blueberry flavors with a calming, balanced high.","Hybrid","Blueberry x Girl Scout Cookies","20-25%","Low","Myrcene, Caryophyllene","Sweet blueberry aroma with earthy undertones; resinous buds","Relaxed, Euphoric, Happy","dry mouth, drowsiness","Ideal for relaxation and mood enhancement","8.75","8.5","8.63"
"Mimosa","Sativa-dominant hybrid offering a vibrant citrus and sweet, tangy flavor with an uplifting high.","Sativa-dominant Hybrid","Citrus x Purple Punch","20-25%","Low","Limonene, Caryophyllene","Bright citrus aroma with sweet, fruity notes; light buds","Energized, Uplifted, Happy","dry mouth, dry eyes","Perfect for daytime use and social gatherings","8.75","8.5","8.63"
"LA Kush","Hybrid strain known for its spicy, earthy flavor and balanced, calming effects.","Hybrid","LA x Kush lineage","17-22%","Low","Myrcene, Limonene","Earthy, spicy aroma with subtle floral hints; moderate buds","Relaxed, Euphoric, Focused","dry mouth, drowsiness","Ideal for stress relief and relaxation","7.25","7","7.13"
"Amnesia Lemon","Sativa-dominant hybrid blending citrus and earthy flavors for an energizing, creative high.","Sativa-dominant Hybrid","Amnesia x Lemon Skunk","18-24%","Low","Limonene, Terpinolene","Bright lemon aroma with earthy undertones; light, airy buds","Energized, Uplifted, Creative","dry mouth, anxiety","Great for daytime creativity and mood boost","8","8","8.00"
"Forbidden Jack","Hybrid strain merging tropical fruit notes with a potent, balanced high for a unique experience.","Hybrid","Forbidden Fruit x Jack Herer","19-25%","Low","Limonene, Caryophyllene","Tropical, fruity aroma with spicy hints; resinous buds","Euphoric, Relaxed, Creative","dry mouth, drowsiness","Ideal for creative sessions and stress relief","8.5","8.25","8.38"
`;
}


export const SAMPLE_STRAINS = [
  {
    name: "Trainwreck",
    overview: "Sativa-dominant hybrid known for its explosive cerebral high and rapid onset.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Mexican, Thai, Afghani",
    thc_range: "18-22%",
    cbd_level: "Minimal",
    dominant_terpenes: "Myrcene, Pinene",
    qualitative_insights: "Spicy, citrus aroma with a hint of pine; dense, energetic buds",
    effects: "Energized, Creative, Uplifted",
    negatives: "dry mouth, dry eyes, dizziness",
    uses: "Ideal for creative pursuits, social settings, combating fatigue",
    thc_rating: 7.5,
    user_rating: 7.0,
    combined_rating: 7.25
  },
  {
    name: "Blue Dream",
    overview: "Balanced sativa-dominant hybrid offering gentle cerebral invigoration and full-body relaxation.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Blueberry x Haze",
    thc_range: "17-24%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Pinene, Caryophyllene",
    qualitative_insights: "Sweet berry aroma with earthy undertones; smooth buds",
    effects: "Euphoric, Relaxed, Creative",
    negatives: "dry mouth, dry eyes",
    uses: "Great for stress relief, daytime use, creative tasks",
    thc_rating: 7.75,
    user_rating: 7.5,
    combined_rating: 7.63
  },
  {
    name: "Girl Scout Cookies",
    overview: "Popular hybrid known for its euphoric and relaxing effects with a sweet, earthy aroma.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "OG Kush x Durban Poison",
    thc_range: "18-28%",
    cbd_level: "Low",
    dominant_terpenes: "Caryophyllene, Limonene",
    qualitative_insights: "Sweet, earthy scent with hints of mint; dense, resinous buds",
    effects: "Happy, Relaxed, Euphoric",
    negatives: "dry mouth, drowsiness",
    uses: "Effective for pain relief and mood elevation",
    thc_rating: 9,
    user_rating: 8.5,
    combined_rating: 8.75
  },
  {
    name: "Sour Diesel",
    overview: "Energetic sativa-dominant strain with a pungent diesel aroma.",
    genetic_type: "Sativa-dominant",
    lineage: "Chemdawg x Super Skunk",
    thc_range: "20-25%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Pungent, fuel-like scent with citrus hints; airy buds",
    effects: "Energetic, Uplifted, Focused",
    negatives: "dry mouth, anxiety",
    uses: "Ideal for daytime use and creative projects",
    thc_rating: 8.75,
    user_rating: 8,
    combined_rating: 8.38
  },
  {
    name: "OG Kush",
    overview: "Iconic hybrid delivering a balanced high with earthy pine and citrus flavors.",
    genetic_type: "Hybrid",
    lineage: "Chemdawg x Hindu Kush",
    thc_range: "19-26%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Limonene",
    qualitative_insights: "Earthy, pine aroma with a touch of citrus; dense, resinous buds",
    effects: "Relaxed, Euphoric, Uplifted",
    negatives: "dry mouth, dry eyes",
    uses: "Used for stress relief and pain management",
    thc_rating: 8.75,
    user_rating: 8,
    combined_rating: 8.38
  },
  {
    name: "Pineapple Express",
    overview: "Tropical sativa-dominant hybrid offering a sweet, fruity flavor and energetic high.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Trainwreck x Hawaiian",
    thc_range: "19-25%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Myrcene",
    qualitative_insights: "Tropical pineapple aroma with hints of earthiness; vibrant buds",
    effects: "Energetic, Uplifted, Creative",
    negatives: "dry mouth, dry eyes",
    uses: "Perfect for social settings and daytime activities",
    thc_rating: 8.5,
    user_rating: 8,
    combined_rating: 8.25
  },
  {
    name: "Granddaddy Purple",
    overview: "Renowned indica-dominant strain with a deep purple hue and grape-like aroma.",
    genetic_type: "Indica-dominant",
    lineage: "Purple Urkle x Big Bud",
    thc_range: "17-23%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Pinene",
    qualitative_insights: "Sweet, grape aroma with a relaxing, heavy bud structure",
    effects: "Relaxed, Sleepy, Euphoric",
    negatives: "dry mouth, drowsiness",
    uses: "Ideal for pain relief and insomnia",
    thc_rating: 7.5,
    user_rating: 7,
    combined_rating: 7.25
  },
  {
    name: "White Widow",
    overview: "Balanced hybrid known for its potent resin production and earthy pine flavor.",
    genetic_type: "Hybrid",
    lineage: "Brazilian Sativa x South Indian Indica",
    thc_range: "18-25%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Earthy, woody aroma with a subtle sweet note; frosty buds",
    effects: "Energetic, Euphoric, Creative",
    negatives: "dry mouth, dry eyes",
    uses: "Suitable for stress relief and social use",
    thc_rating: 8.25,
    user_rating: 8,
    combined_rating: 8.13
  },
  {
    name: "AK-47",
    overview: "Sativa-dominant hybrid offering a mellow, long-lasting cerebral high with a sweet, sour flavor.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Colombian, Mexican, Thai, Afghani",
    thc_range: "13-20%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Limonene",
    qualitative_insights: "Sweet and sour aroma with a light, airy bud structure",
    effects: "Relaxed, Uplifted, Creative",
    negatives: "dry mouth, fatigue",
    uses: "Great for relaxation and creative inspiration",
    thc_rating: 5.75,
    user_rating: 6,
    combined_rating: 5.88
  },
  {
    name: "Durban Poison",
    overview: "Pure sativa known for its energizing effects and sweet, earthy aroma.",
    genetic_type: "Pure Sativa",
    lineage: "South African Landrace",
    thc_range: "15-25%",
    cbd_level: "Low",
    dominant_terpenes: "Terpinolene, Myrcene",
    qualitative_insights: "Sweet, earthy scent with hints of pine; light, fluffy buds",
    effects: "Energizing, Uplifting, Focused",
    negatives: "dry mouth, insomnia",
    uses: "Ideal for daytime use and outdoor activities",
    thc_rating: 7.5,
    user_rating: 7,
    combined_rating: 7.25
  },
  {
    name: "Purple Haze",
    overview: "Sativa-dominant strain with a distinctive purple hue and uplifting high.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Haze lineage",
    thc_range: "15-20%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Limonene",
    qualitative_insights: "Fruity, berry aroma with a hint of spice; colorful buds",
    effects: "Uplifted, Creative, Euphoric",
    negatives: "dry mouth, dry eyes",
    uses: "Suitable for creative endeavors and social gatherings",
    thc_rating: 6.25,
    user_rating: 6.5,
    combined_rating: 6.38
  },
  {
    name: "Green Crack",
    overview: "Intense sativa-dominant strain known for its energizing and focused high.",
    genetic_type: "Sativa-dominant",
    lineage: "Afghani x Skunk #1",
    thc_range: "15-25%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Pinene",
    qualitative_insights: "Citrus and tropical fruit aroma; tight, potent buds",
    effects: "Energetic, Focused, Uplifted",
    negatives: "dry mouth, anxiety",
    uses: "Perfect for daytime energy and focus",
    thc_rating: 7.5,
    user_rating: 7.25,
    combined_rating: 7.38
  },
  {
    name: "Jack Herer",
    overview: "Award-winning sativa-dominant hybrid celebrated for its clear-headed and creative high.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Haze x Northern Lights x Shiva Skunk",
    thc_range: "18-24%",
    cbd_level: "Low",
    dominant_terpenes: "Terpinolene, Caryophyllene",
    qualitative_insights: "Spicy, pine aroma with hints of citrus; frosty buds",
    effects: "Uplifted, Creative, Euphoric",
    negatives: "dry mouth, paranoia",
    uses: "Ideal for creative tasks and stress relief",
    thc_rating: 8,
    user_rating: 8,
    combined_rating: 8.00
  },
  {
    name: "Chemdawg",
    overview: "Potent hybrid with a strong diesel aroma and robust cerebral high.",
    genetic_type: "Hybrid",
    lineage: "Likely Chemdawg #4 x Unknown",
    thc_range: "15-20%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Pungent diesel scent with a hint of spice; dense buds",
    effects: "Focused, Euphoric, Relaxed",
    negatives: "dry mouth, dry eyes",
    uses: "Used for mood enhancement and pain relief",
    thc_rating: 6.25,
    user_rating: 6.5,
    combined_rating: 6.38
  },
  {
    name: "Lemon Haze",
    overview: "Sativa-dominant hybrid with a zesty lemon flavor and invigorating high.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Lemon Skunk x Silver Haze",
    thc_range: "15-22%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Terpinolene",
    qualitative_insights: "Bright citrus aroma with a sweet undertone; light, airy buds",
    effects: "Energized, Uplifted, Happy",
    negatives: "dry mouth, anxiety",
    uses: "Great for daytime use and creative activities",
    thc_rating: 6.75,
    user_rating: 6.5,
    combined_rating: 6.63
  },
  {
    name: "Northern Lights",
    overview: "Classic indica-dominant strain known for its deeply relaxing and sedative effects.",
    genetic_type: "Indica-dominant",
    lineage: "Afghani x Thai",
    thc_range: "16-21%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Pinene",
    qualitative_insights: "Sweet and spicy aroma with resinous, compact buds",
    effects: "Relaxed, Sleepy, Euphoric",
    negatives: "dry mouth, drowsiness",
    uses: "Ideal for pain relief and insomnia",
    thc_rating: 6.75,
    user_rating: 6.25,
    combined_rating: 6.50
  },
  {
    name: "Critical Mass",
    overview: "Indica-dominant strain famous for its heavy yields and potent body high.",
    genetic_type: "Indica-dominant",
    lineage: "Afghani x Skunk #1",
    thc_range: "19-21%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Earthy and sweet aroma; large, dense buds",
    effects: "Relaxed, Sedated, Happy",
    negatives: "dry mouth, couch-lock",
    uses: "Suitable for chronic pain and stress relief",
    thc_rating: 7.5,
    user_rating: 7,
    combined_rating: 7.25
  },
  {
    name: "Bubble Gum",
    overview: "Balanced hybrid with a sweet, bubble gum flavor and uplifting effects.",
    genetic_type: "Hybrid",
    lineage: "Unknown (landrace blend)",
    thc_range: "15-20%",
    cbd_level: "Low",
    dominant_terpenes: "Caryophyllene, Limonene",
    qualitative_insights: "Sweet, fruity aroma reminiscent of bubble gum; soft buds",
    effects: "Happy, Euphoric, Relaxed",
    negatives: "dry mouth, dizziness",
    uses: "Good for mood elevation and mild pain relief",
    thc_rating: 6.25,
    user_rating: 6,
    combined_rating: 6.13
  },
  {
    name: "Amnesia Haze",
    overview: "Sativa-dominant hybrid known for its potent, uplifting high and complex flavor profile.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Haze lineage",
    thc_range: "20-25%",
    cbd_level: "Low",
    dominant_terpenes: "Terpinolene, Myrcene",
    qualitative_insights: "Earthy and citrus aroma with a hint of spice; airy buds",
    effects: "Uplifted, Creative, Euphoric",
    negatives: "dry mouth, paranoia",
    uses: "Ideal for creative tasks and social settings",
    thc_rating: 8.75,
    user_rating: 8.25,
    combined_rating: 8.50
  },
  {
    name: "Strawberry Cough",
    overview: "Sativa-dominant strain celebrated for its sweet strawberry aroma and smooth, uplifting high.",
    genetic_type: "Sativa-dominant",
    lineage: "Possibly Haze-based",
    thc_range: "15-20%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Myrcene",
    qualitative_insights: "Sweet berry scent with a subtle herbal note; light buds",
    effects: "Uplifted, Euphoric, Focused",
    negatives: "dry mouth, coughing",
    uses: "Great for stress relief and creative pursuits",
    thc_rating: 6.25,
    user_rating: 6,
    combined_rating: 6.13
  },
  {
    name: "Maui Wowie",
    overview: "Tropical sativa-dominant strain delivering an energetic high with a fruity, exotic flavor.",
    genetic_type: "Sativa-dominant",
    lineage: "Hawaiian Landrace",
    thc_range: "15-20%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Terpinolene",
    qualitative_insights: "Tropical pineapple and citrus aroma; light, airy buds",
    effects: "Energizing, Uplifted, Creative",
    negatives: "dry mouth, dizziness",
    uses: "Perfect for daytime energy and relaxation",
    thc_rating: 6.25,
    user_rating: 6.5,
    combined_rating: 6.38
  },
  {
    name: "Grape Ape",
    overview: "Indica-dominant strain known for its distinct grape aroma and deeply relaxing effects.",
    genetic_type: "Indica-dominant",
    lineage: "Afghani x Mendocino Purps",
    thc_range: "15-22%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Pinene",
    qualitative_insights: "Sweet, grape-like aroma; colorful, dense buds",
    effects: "Relaxed, Sedated, Happy",
    negatives: "dry mouth, drowsiness",
    uses: "Ideal for stress relief and pain management",
    thc_rating: 6.75,
    user_rating: 6.5,
    combined_rating: 6.63
  },
  {
    name: "Blueberry",
    overview: "Indica-dominant strain with a renowned blueberry aroma and soothing effects.",
    genetic_type: "Indica-dominant",
    lineage: "Blueberry x Afghan",
    thc_range: "16-24%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Pinene",
    qualitative_insights: "Sweet blueberry scent with earthy undertones; frosty buds",
    effects: "Relaxed, Euphoric, Sleepy",
    negatives: "dry mouth, drowsiness",
    uses: "Used for relaxation and mild pain relief",
    thc_rating: 7.5,
    user_rating: 7,
    combined_rating: 7.25
  },
  {
    name: "Cherry Pie",
    overview: "Hybrid strain offering a sweet and tart cherry flavor with balanced effects.",
    genetic_type: "Hybrid",
    lineage: "Granddaddy Purple x Durban Poison",
    thc_range: "16-22%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Sweet, tart cherry aroma; sticky, dense buds",
    effects: "Happy, Relaxed, Euphoric",
    negatives: "dry mouth, dry eyes",
    uses: "Suitable for mood elevation and pain relief",
    thc_rating: 7,
    user_rating: 7,
    combined_rating: 7.00
  },
  {
    name: "Super Silver Haze",
    overview: "Sativa-dominant hybrid with a potent, energetic high and complex citrus-spice profile.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Skunk, Northern Lights, Haze",
    thc_range: "18-23%",
    cbd_level: "Low",
    dominant_terpenes: "Terpinolene, Myrcene",
    qualitative_insights: "Citrus and earthy aroma with spicy notes; frosty buds",
    effects: "Energized, Uplifted, Focused",
    negatives: "dry mouth, anxiety",
    uses: "Ideal for daytime creativity and stress relief",
    thc_rating: 7.75,
    user_rating: 7.5,
    combined_rating: 7.63
  },
  {
    name: "Bruce Banner",
    overview: "Potent hybrid known for its explosive high and pungent, sweet diesel aroma.",
    genetic_type: "Hybrid",
    lineage: "OG Kush x Strawberry Diesel",
    thc_range: "20-25%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Sweet, diesel-like aroma with a hint of fruit; dense buds",
    effects: "Euphoric, Energetic, Creative",
    negatives: "dry mouth, paranoia",
    uses: "Used for mood enhancement and pain management",
    thc_rating: 8.75,
    user_rating: 8.5,
    combined_rating: 8.63
  },
  {
    name: "Wedding Cake",
    overview: "Indica-dominant hybrid with a rich, tangy flavor and a potent, relaxing high.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Cherry Pie x Girl Scout Cookies",
    thc_range: "20-25%",
    cbd_level: "Low",
    dominant_terpenes: "Caryophyllene, Limonene",
    qualitative_insights: "Sweet, earthy aroma with a hint of vanilla; dense buds",
    effects: "Relaxed, Happy, Euphoric",
    negatives: "dry mouth, drowsiness",
    uses: "Ideal for stress relief and pain management",
    thc_rating: 8.75,
    user_rating: 8.25,
    combined_rating: 8.50
  },
  {
    name: "Gelato",
    overview: "Balanced hybrid celebrated for its dessert-like flavor and euphoric, calming effects.",
    genetic_type: "Hybrid",
    lineage: "Sunset Sherbet x Thin Mint GSC",
    thc_range: "20-25%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Sweet, creamy aroma with hints of citrus; sticky buds",
    effects: "Relaxed, Happy, Uplifted",
    negatives: "dry mouth, dizziness",
    uses: "Great for relaxation and mood enhancement",
    thc_rating: 8.75,
    user_rating: 8.5,
    combined_rating: 8.63
  },
  {
    name: "Sunset Sherbet",
    overview: "Indica-dominant hybrid known for its fruity dessert flavor and soothing high.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Girl Scout Cookies x Pink Panties",
    thc_range: "18-22%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Myrcene",
    qualitative_insights: "Fruity, sherbet-like aroma; vibrant, dense buds",
    effects: "Relaxed, Euphoric, Happy",
    negatives: "dry mouth, drowsiness",
    uses: "Suitable for evening relaxation and stress relief",
    thc_rating: 7.5,
    user_rating: 7,
    combined_rating: 7.25
  },
  {
    name: "GMO (Garlic Cookies)",
    overview: "Indica-dominant hybrid with a pungent garlic aroma and deeply relaxing effects.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Chemdawg x GSC",
    thc_range: "18-25%",
    cbd_level: "Low",
    dominant_terpenes: "Caryophyllene, Myrcene",
    qualitative_insights: "Pungent, savory aroma with earthy undertones; sticky buds",
    effects: "Relaxed, Sedated, Euphoric",
    negatives: "dry mouth, dry eyes",
    uses: "Ideal for pain relief and stress reduction",
    thc_rating: 8.25,
    user_rating: 8,
    combined_rating: 8.13
  },
  {
    name: "Do-Si-Dos",
    overview: "Indica-dominant hybrid offering a sweet and earthy flavor with potent relaxing effects.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Girl Scout Cookies x Face Off OG",
    thc_range: "18-22%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Sweet, floral aroma with hints of mint; dense, resinous buds",
    effects: "Relaxed, Euphoric, Sedated",
    negatives: "dry mouth, drowsiness",
    uses: "Used for anxiety relief and relaxation",
    thc_rating: 7.5,
    user_rating: 7,
    combined_rating: 7.25
  },
  {
    name: "Runtz",
    overview: "Balanced hybrid known for its sweet, candy-like flavor and powerful, euphoric high.",
    genetic_type: "Hybrid",
    lineage: "Zkittlez x Gelato",
    thc_range: "19-29%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Fruity, candy-like aroma; vibrant, colorful buds",
    effects: "Happy, Euphoric, Relaxed",
    negatives: "dry mouth, dizziness",
    uses: "Ideal for creative pursuits and mood enhancement",
    thc_rating: 9.5,
    user_rating: 9,
    combined_rating: 9.25
  },
  {
    name: "Zkittlez",
    overview: "Indica-dominant hybrid with a sweet, fruity flavor and a relaxing, mellow high.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Grape Ape x Grapefruit",
    thc_range: "15-22%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Limonene",
    qualitative_insights: "Intensely sweet, fruity aroma; compact, resinous buds",
    effects: "Relaxed, Happy, Euphoric",
    negatives: "dry mouth, dry eyes",
    uses: "Great for stress relief and relaxation",
    thc_rating: 6.75,
    user_rating: 6.5,
    combined_rating: 6.63
  },
  {
    name: "Biscotti",
    overview: "Hybrid strain offering a rich, cookie-like flavor paired with a balanced high.",
    genetic_type: "Hybrid",
    lineage: "Girl Scout Cookies x South Florida OG",
    thc_range: "18-25%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Sweet, baked aroma with hints of spice; dense, trichome-rich buds",
    effects: "Happy, Relaxed, Uplifted",
    negatives: "dry mouth, drowsiness",
    uses: "Suitable for creative tasks and relaxation",
    thc_rating: 8.25,
    user_rating: 8,
    combined_rating: 8.13
  },
  {
    name: "Tahoe OG",
    overview: "Indica-dominant strain with a robust, earthy pine flavor and potent body effects.",
    genetic_type: "Indica-dominant",
    lineage: "OG Kush lineage",
    thc_range: "20-25%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Limonene",
    qualitative_insights: "Earthy, pine aroma with a hint of spice; compact, sticky buds",
    effects: "Relaxed, Sedated, Euphoric",
    negatives: "dry mouth, couch-lock",
    uses: "Ideal for pain relief and stress management",
    thc_rating: 8.75,
    user_rating: 8.5,
    combined_rating: 8.63
  },
  {
    name: "Forbidden Fruit",
    overview: "Hybrid strain known for its tropical, fruity flavor and deeply relaxing high.",
    genetic_type: "Hybrid",
    lineage: "Tangie x Cherry Pie",
    thc_range: "18-23%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Tropical, citrusy aroma with sweet undertones; resinous buds",
    effects: "Relaxed, Happy, Euphoric",
    negatives: "dry mouth, drowsiness",
    uses: "Great for evening relaxation and mood enhancement",
    thc_rating: 7.75,
    user_rating: 7.5,
    combined_rating: 7.63
  },
  {
    name: "Agent Orange",
    overview: "Sativa-dominant hybrid offering a zesty citrus flavor and uplifting effects.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Orange Velvet x Jack the Ripper",
    thc_range: "18-25%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Terpinolene",
    qualitative_insights: "Vibrant citrus aroma with sweet, tangy notes; frosty buds",
    effects: "Energized, Uplifted, Creative",
    negatives: "dry mouth, dry eyes",
    uses: "Ideal for daytime use and creative inspiration",
    thc_rating: 8.25,
    user_rating: 8,
    combined_rating: 8.13
  },
  {
    name: "Sour Tangie",
    overview: "Sativa-dominant hybrid blending sour diesel with tangy citrus flavors for a vibrant high.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Sour Diesel x Tangie",
    thc_range: "18-24%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Tangy citrus aroma with a hint of sour diesel; dense buds",
    effects: "Energized, Uplifted, Focused",
    negatives: "dry mouth, anxiety",
    uses: "Suitable for creative projects and daytime activities",
    thc_rating: 8,
    user_rating: 7.75,
    combined_rating: 7.88
  },
  {
    name: "Critical Kush",
    overview: "Indica-dominant hybrid merging heavy yields with a potent, relaxing high.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Critical Mass x OG Kush",
    thc_range: "20-25%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Earthy, pine aroma with subtle sweetness; chunky buds",
    effects: "Relaxed, Sedated, Happy",
    negatives: "dry mouth, drowsiness",
    uses: "Great for pain relief and evening relaxation",
    thc_rating: 8.75,
    user_rating: 8.25,
    combined_rating: 8.50
  },
  {
    name: "Alaskan Thunder Fuck",
    overview: "Sativa-dominant hybrid known for its strong, uplifting high and pungent, piney aroma.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Afghani x Unknown",
    thc_range: "18-25%",
    cbd_level: "Low",
    dominant_terpenes: "Pinene, Myrcene",
    qualitative_insights: "Pungent, piney scent with earthy undertones; frosty, energizing buds",
    effects: "Energized, Uplifted, Creative",
    negatives: "dry mouth, anxiety",
    uses: "Ideal for boosting energy and focus",
    thc_rating: 8.25,
    user_rating: 8,
    combined_rating: 8.13
  },
  {
    name: "Harlequin",
    overview: "CBD-rich sativa-dominant strain celebrated for its clear-headed, medicinal effects.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Colombian Gold x Nepalese",
    thc_range: "7-15%",
    cbd_level: "High",
    dominant_terpenes: "Myrcene, Pinene",
    qualitative_insights: "Earthy, herbal aroma with subtle sweetness; lighter buds",
    effects: "Clear-headed, Relaxed, Focused",
    negatives: "dry mouth, dizziness",
    uses: "Used for pain relief and anxiety management",
    thc_rating: 3,
    user_rating: 3.5,
    combined_rating: 3.25
  },
  {
    name: "Cannatonic",
    overview: "Balanced hybrid renowned for its low THC and high CBD content, offering gentle relief.",
    genetic_type: "Hybrid",
    lineage: "MK Ultra x G13",
    thc_range: "6-17%",
    cbd_level: "High",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Earthy and citrus aroma; soft, resinous buds",
    effects: "Calm, Relaxed, Focused",
    negatives: "dry mouth, fatigue",
    uses: "Ideal for medical use and anxiety relief",
    thc_rating: 3.25,
    user_rating: 3.5,
    combined_rating: 3.38
  },
  {
    name: "Charlotte's Web",
    overview: "CBD-dominant strain with minimal psychoactive effects, designed for therapeutic use.",
    genetic_type: "CBD-dominant",
    lineage: "High CBD phenotype of hemp",
    thc_range: "0-0.3%",
    cbd_level: "Very High",
    dominant_terpenes: "Myrcene, Limonene",
    qualitative_insights: "Mild, herbal aroma; less resinous buds",
    effects: "Calm, Focused, Clear-headed",
    negatives: "none",
    uses: "Used for epilepsy and chronic pain management",
    thc_rating: 0.5,
    user_rating: 0.5,
    combined_rating: 0.5
  },
  {
    name: "Remedy",
    overview: "Balanced hybrid with high CBD content offering mild relaxation without strong psychoactive effects.",
    genetic_type: "Hybrid",
    lineage: "CBD-rich phenotype",
    thc_range: "1-4%",
    cbd_level: "High",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Earthy, citrus notes; soft buds",
    effects: "Relaxed, Clear-headed, Calm",
    negatives: "dry mouth, sedation",
    uses: "Ideal for anxiety and pain relief",
    thc_rating: 3.5,
    user_rating: 3.75,
    combined_rating: 3.63
  },
  {
    name: "Pennywise",
    overview: "Indica-dominant strain with a near 1:1 THC to CBD ratio, offering balanced effects.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Harle-Tsu x Jack the Ripper",
    thc_range: "4-8%",
    cbd_level: "Balanced",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Earthy aroma with subtle spice; compact buds",
    effects: "Calm, Focused, Euphoric",
    negatives: "dry mouth, dizziness",
    uses: "Suitable for medical use and stress relief",
    thc_rating: 3.5,
    user_rating: 3.75,
    combined_rating: 3.63
  },
  {
    name: "Canna-Tsu",
    overview: "Hybrid strain featuring balanced levels of THC and CBD for a mild, uplifting experience.",
    genetic_type: "Hybrid",
    lineage: "Cannatonic x Sour Tsunami",
    thc_range: "4-8%",
    cbd_level: "Balanced",
    dominant_terpenes: "Limonene, Pinene",
    qualitative_insights: "Subtle citrus aroma with herbal notes; light buds",
    effects: "Calm, Happy, Clear-headed",
    negatives: "dry mouth, fatigue",
    uses: "Used for mild pain and anxiety relief",
    thc_rating: 3.5,
    user_rating: 3.75,
    combined_rating: 3.63
  },
  {
    name: "ACDC",
    overview: "CBD-dominant strain with minimal psychoactive effects, prized for its therapeutic benefits.",
    genetic_type: "CBD-dominant",
    lineage: "Cannatonic phenotype",
    thc_range: "1-6%",
    cbd_level: "Very High",
    dominant_terpenes: "Myrcene, Limonene",
    qualitative_insights: "Earthy, herbal aroma; non-resinous buds",
    effects: "Clear-headed, Relaxed, Focused",
    negatives: "none",
    uses: "Ideal for chronic pain, inflammation, anxiety",
    thc_rating: 1.5,
    user_rating: 1.75,
    combined_rating: 1.63
  },
  {
    name: "Ringo's Gift",
    overview: "Hybrid strain with high CBD offering a balanced and clear-headed experience.",
    genetic_type: "Hybrid",
    lineage: "Harle-Tsu x ACDC",
    thc_range: "Varies (1:1–24:1 ratio)",
    cbd_level: "High",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Mild, earthy aroma with sweet undertones; moderate buds",
    effects: "Calm, Focused, Relaxed",
    negatives: "dry mouth, sedation",
    uses: "Used for pain, anxiety, seizure management",
    thc_rating: 2,
    user_rating: 2.25,
    combined_rating: 2.13
  },
  {
    name: "Sour Tsunami",
    overview: "CBD-dominant strain known for its low THC content and effective pain relief properties.",
    genetic_type: "CBD-dominant",
    lineage: "Sour Diesel phenotype",
    thc_range: "6-10%",
    cbd_level: "High",
    dominant_terpenes: "Limonene, Myrcene",
    qualitative_insights: "Tangy, diesel aroma with earthy notes; less resinous",
    effects: "Calm, Relaxed, Focused",
    negatives: "dry mouth, sedation",
    uses: "Ideal for chronic pain and inflammation",
    thc_rating: 1.5,
    user_rating: 1.75,
    combined_rating: 1.63
  },
  {
    name: "Harle-Tsu",
    overview: "Balanced CBD-rich hybrid offering mild euphoria with significant therapeutic benefits.",
    genetic_type: "Hybrid",
    lineage: "Harlequin x Canna-Tsu",
    thc_range: "4-10%",
    cbd_level: "High",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Earthy, herbal scent with subtle citrus; light buds",
    effects: "Clear-headed, Calm, Relaxed",
    negatives: "dry mouth, fatigue",
    uses: "Used for anxiety and pain relief",
    thc_rating: 2,
    user_rating: 2.25,
    combined_rating: 2.13
  },
  {
    name: "Blue Cheese",
    overview: "Indica-dominant hybrid with a pungent, cheese-like aroma and deeply relaxing effects.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Blueberry x UK Cheese",
    thc_range: "18-22%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Strong cheesy aroma with sweet berry undertones; dense buds",
    effects: "Relaxed, Euphoric, Sedated",
    negatives: "dry mouth, drowsiness",
    uses: "Great for stress relief and relaxation",
    thc_rating: 7.5,
    user_rating: 7.25,
    combined_rating: 7.38
  },
  {
    name: "Orange Bud",
    overview: "Sativa-dominant strain celebrated for its vibrant citrus flavor and uplifting effects.",
    genetic_type: "Sativa-dominant",
    lineage: "Afghani x Thai",
    thc_range: "15-22%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Terpinolene",
    qualitative_insights: "Bright citrus aroma with a hint of spice; light, airy buds",
    effects: "Energetic, Uplifted, Happy",
    negatives: "dry mouth, dry eyes",
    uses: "Ideal for daytime use and mood elevation",
    thc_rating: 6.75,
    user_rating: 6.5,
    combined_rating: 6.63
  },
  {
    name: "LA Confidential",
    overview: "Indica-dominant strain known for its smooth, pine and spice flavors and calming effects.",
    genetic_type: "Indica-dominant",
    lineage: "Afghani x OG Kush",
    thc_range: "16-22%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Limonene",
    qualitative_insights: "Earthy, pine aroma with subtle sweetness; resinous buds",
    effects: "Relaxed, Sedated, Euphoric",
    negatives: "dry mouth, drowsiness",
    uses: "Used for stress relief and insomnia",
    thc_rating: 7,
    user_rating: 7,
    combined_rating: 7.00
  },
  {
    name: "God's Gift",
    overview: "Indica-dominant hybrid offering a powerful, euphoric high with a sweet, grape aroma.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Granddaddy Purple x OG Kush",
    thc_range: "20-25%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Rich, sweet grape aroma with sticky, dense buds",
    effects: "Relaxed, Euphoric, Sedated",
    negatives: "dry mouth, couch-lock",
    uses: "Ideal for pain relief and stress management",
    thc_rating: 8.75,
    user_rating: 8.5,
    combined_rating: 8.63
  },
  {
    name: "NYC Diesel",
    overview: "Sativa-dominant strain with a strong diesel aroma and uplifting, creative effects.",
    genetic_type: "Sativa-dominant",
    lineage: "Diesel x Unknown",
    thc_range: "18-25%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Pungent diesel scent with hints of citrus; frosty buds",
    effects: "Energized, Creative, Uplifted",
    negatives: "dry mouth, anxiety",
    uses: "Great for daytime creativity and focus",
    thc_rating: 8.25,
    user_rating: 8,
    combined_rating: 8.13
  },
  {
    name: "Skunk #1",
    overview: "Classic hybrid known for its strong, skunky aroma and balanced, long-lasting effects.",
    genetic_type: "Hybrid",
    lineage: "Skunk #1 lineage",
    thc_range: "15-20%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Pungent, skunky odor with earthy undertones; sticky buds",
    effects: "Happy, Relaxed, Euphoric",
    negatives: "dry mouth, drowsiness",
    uses: "Ideal for stress relief and mood elevation",
    thc_rating: 6.25,
    user_rating: 6,
    combined_rating: 6.13
  },
  {
    name: "Lemon Skunk",
    overview: "Hybrid strain offering a zesty lemon flavor and an energetic, uplifting high.",
    genetic_type: "Hybrid",
    lineage: "Skunk x Lemon Thai",
    thc_range: "15-22%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Terpinolene",
    qualitative_insights: "Bright lemon aroma with skunky undertones; light buds",
    effects: "Energized, Uplifted, Happy",
    negatives: "dry mouth, anxiety",
    uses: "Great for daytime use and creative tasks",
    thc_rating: 6.75,
    user_rating: 6.5,
    combined_rating: 6.63
  },
  {
    name: "Master Kush",
    overview: "Indica-dominant strain renowned for its earthy, spicy flavor and deeply calming effects.",
    genetic_type: "Indica-dominant",
    lineage: "Afghani lineage",
    thc_range: "15-22%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Limonene",
    qualitative_insights: "Earthy, herbal aroma with a subtle spice; dense buds",
    effects: "Relaxed, Sedated, Euphoric",
    negatives: "dry mouth, drowsiness",
    uses: "Ideal for stress relief and pain management",
    thc_rating: 6.75,
    user_rating: 6.5,
    combined_rating: 6.63
  },
  {
    name: "Hindu Kush",
    overview: "Pure indica known for its earthy, woody flavors and deeply relaxing effects.",
    genetic_type: "Indica (Pure)",
    lineage: "Hindu Kush Landrace",
    thc_range: "16-21%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Pinene",
    qualitative_insights: "Earthy, woody aroma with a hint of spice; compact buds",
    effects: "Calm, Relaxed, Sedated",
    negatives: "dry mouth, couch-lock",
    uses: "Used for relaxation and pain relief",
    thc_rating: 6.75,
    user_rating: 6.5,
    combined_rating: 6.63
  },
  {
    name: "Afghani",
    overview: "Pure indica landrace with a strong, earthy aroma and heavy, sedative effects.",
    genetic_type: "Indica (Pure)",
    lineage: "Afghani Landrace",
    thc_range: "18-23%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Earthy, hash-like aroma; resinous, dense buds",
    effects: "Relaxed, Sedated, Euphoric",
    negatives: "dry mouth, drowsiness",
    uses: "Ideal for pain relief and insomnia",
    thc_rating: 7.5,
    user_rating: 7.25,
    combined_rating: 7.38
  },
  {
    name: "Pakistani Chitral Kush",
    overview: "Robust pure indica with a distinct earthy and spicy flavor profile and potent effects.",
    genetic_type: "Indica (Pure)",
    lineage: "Pakistani Landrace",
    thc_range: "18-25%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Pinene",
    qualitative_insights: "Earthy, spicy aroma with resinous buds",
    effects: "Relaxed, Sedated, Euphoric",
    negatives: "dry mouth, couch-lock",
    uses: "Used for chronic pain and insomnia",
    thc_rating: 8.25,
    user_rating: 8,
    combined_rating: 8.13
  },
  {
    name: "Blueberry Kush",
    overview: "Hybrid strain combining fruity blueberry flavors with classic Kush earthiness.",
    genetic_type: "Hybrid",
    lineage: "Blueberry x Kush",
    thc_range: "18-24%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Sweet blueberry aroma with earthy, herbal notes; dense buds",
    effects: "Relaxed, Happy, Euphoric",
    negatives: "dry mouth, drowsiness",
    uses: "Ideal for stress relief and mood enhancement",
    thc_rating: 8,
    user_rating: 7.75,
    combined_rating: 7.88
  },
  {
    name: "Cherry OG",
    overview: "Hybrid strain known for its sweet cherry flavor and potent, balanced high.",
    genetic_type: "Hybrid",
    lineage: "Cherry Pie x OG Kush",
    thc_range: "20-26%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Sweet cherry aroma with earthy undertones; sticky buds",
    effects: "Relaxed, Euphoric, Creative",
    negatives: "dry mouth, dry eyes",
    uses: "Used for stress relief and pain management",
    thc_rating: 9,
    user_rating: 8.75,
    combined_rating: 8.88
  },
  {
    name: "Jack Flash",
    overview: "Indica-dominant hybrid delivering a potent, sedative high with a spicy, herbal flavor.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Jack the Ripper x Flashback",
    thc_range: "20-25%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Herbal, spicy aroma with a hint of citrus; dense buds",
    effects: "Relaxed, Sedated, Euphoric",
    negatives: "dry mouth, drowsiness",
    uses: "Ideal for nighttime use and pain relief",
    thc_rating: 8.75,
    user_rating: 8.5,
    combined_rating: 8.63
  },
  {
    name: "White Rhino",
    overview: "Indica-dominant strain known for its heavy, resinous buds and powerful body high.",
    genetic_type: "Indica-dominant",
    lineage: "Afghani x Unknown",
    thc_range: "18-22%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Earthy, pine aroma with a hint of sweetness; chunky buds",
    effects: "Relaxed, Sedated, Euphoric",
    negatives: "dry mouth, couch-lock",
    uses: "Used for severe pain and stress relief",
    thc_rating: 7.5,
    user_rating: 7.25,
    combined_rating: 7.38
  },
  {
    name: "Alien OG",
    overview: "Hybrid strain celebrated for its potent, spacey high and complex pine-citrus flavors.",
    genetic_type: "Hybrid",
    lineage: "Tahoe OG x Alien Kush",
    thc_range: "20-25%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Myrcene",
    qualitative_insights: "Pine and citrus aroma with a touch of earthiness; frosty buds",
    effects: "Euphoric, Creative, Relaxed",
    negatives: "dry mouth, dry eyes",
    uses: "Ideal for creative sessions and relaxation",
    thc_rating: 8.75,
    user_rating: 8.5,
    combined_rating: 8.63
  },
  {
    name: "Critical Jack",
    overview: "Hybrid that merges the uplifting effects of Jack Herer with the heavy yields of Critical Mass.",
    genetic_type: "Hybrid",
    lineage: "Jack Herer x Critical Mass",
    thc_range: "18-25%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Balanced aroma with hints of spice and earth; robust buds",
    effects: "Happy, Relaxed, Euphoric",
    negatives: "dry mouth, drowsiness",
    uses: "Great for stress relief and creative inspiration",
    thc_rating: 8.25,
    user_rating: 8,
    combined_rating: 8.13
  },
  {
    name: "Agent Diesel",
    overview: "Hybrid strain with a robust diesel aroma and a balanced, energizing high.",
    genetic_type: "Hybrid",
    lineage: "Diesel x Unknown",
    thc_range: "18-24%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Strong diesel scent with citrus hints; resinous buds",
    effects: "Energized, Uplifted, Focused",
    negatives: "dry mouth, anxiety",
    uses: "Ideal for daytime focus and creativity",
    thc_rating: 8,
    user_rating: 7.75,
    combined_rating: 7.88
  },
  {
    name: "Candyland",
    overview: "Sativa-dominant hybrid offering a sweet, candy-like flavor with an uplifting high.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Unknown (landrace blend)",
    thc_range: "16-22%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Myrcene",
    qualitative_insights: "Sweet, sugary aroma; light, airy buds",
    effects: "Happy, Euphoric, Energetic",
    negatives: "dry mouth, dry eyes",
    uses: "Suitable for daytime energy and creativity",
    thc_rating: 7,
    user_rating: 7,
    combined_rating: 7.00
  },
  {
    name: "Tangie",
    overview: "Sativa-dominant strain famous for its strong citrus aroma and euphoric, uplifting effects.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Grapefruit x California Orange",
    thc_range: "18-25%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Terpinolene",
    qualitative_insights: "Vibrant citrus scent with sweet undertones; frosty buds",
    effects: "Uplifted, Energetic, Creative",
    negatives: "dry mouth, anxiety",
    uses: "Perfect for boosting mood and creativity",
    thc_rating: 8.25,
    user_rating: 8,
    combined_rating: 8.13
  },
  {
    name: "Chernobyl",
    overview: "Hybrid strain with an earthy, pungent aroma and a balanced mix of cerebral and body effects.",
    genetic_type: "Hybrid",
    lineage: "Unknown (landrace blend)",
    thc_range: "16-20%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Earthy, spicy aroma; compact, dense buds",
    effects: "Balanced, Euphoric, Relaxed",
    negatives: "dry mouth, dry eyes",
    uses: "Ideal for daytime use and mild pain relief",
    thc_rating: 6.5,
    user_rating: 6.25,
    combined_rating: 6.38
  },
  {
    name: "LSD",
    overview: "Sativa-dominant hybrid renowned for its psychedelic, mind-bending high and complex flavor profile.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Unknown (Haze lineage)",
    thc_range: "18-25%",
    cbd_level: "Low",
    dominant_terpenes: "Terpinolene, Myrcene",
    qualitative_insights: "Psychedelic, earthy aroma with hints of citrus; trichome-rich buds",
    effects: "Creative, Euphoric, Uplifted",
    negatives: "dry mouth, paranoia",
    uses: "Great for creative exploration and social settings",
    thc_rating: 8.25,
    user_rating: 8,
    combined_rating: 8.13
  },
  {
    name: "Romulan",
    overview: "Indica-dominant strain delivering a potent, sedative high with an earthy, pine flavor.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Indica landrace",
    thc_range: "20-26%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Earthy, pine aroma with spicy undertones; dense buds",
    effects: "Relaxed, Sedated, Euphoric",
    negatives: "dry mouth, couch-lock",
    uses: "Ideal for evening use and pain management",
    thc_rating: 9,
    user_rating: 8.75,
    combined_rating: 8.88
  },
  {
    name: "Berry White",
    overview: "Hybrid strain offering a sweet berry flavor with a balanced, uplifting high.",
    genetic_type: "Hybrid",
    lineage: "Unknown (landrace blend)",
    thc_range: "15-21%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Sweet berry aroma with subtle earthy notes; light buds",
    effects: "Happy, Euphoric, Relaxed",
    negatives: "dry mouth, dry eyes",
    uses: "Great for mood elevation and relaxation",
    thc_rating: 6.5,
    user_rating: 6.25,
    combined_rating: 6.38
  },
  {
    name: "Blackberry Kush",
    overview: "Indica-dominant hybrid known for its rich, blackberry flavor and calming effects.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Unknown (Kush lineage)",
    thc_range: "18-25%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Limonene",
    qualitative_insights: "Sweet, berry aroma with earthy, herbal notes; compact buds",
    effects: "Relaxed, Sedated, Happy",
    negatives: "dry mouth, drowsiness",
    uses: "Ideal for stress relief and insomnia",
    thc_rating: 8.25,
    user_rating: 8,
    combined_rating: 8.13
  },
  {
    name: "Forbidden Berry",
    overview: "Hybrid strain combining sweet berry flavors with a potent, relaxing high.",
    genetic_type: "Hybrid",
    lineage: "Forbidden Fruit x Blackberry Kush",
    thc_range: "18-24%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Fruity, berry aroma with earthy undertones; resinous buds",
    effects: "Relaxed, Euphoric, Happy",
    negatives: "dry mouth, dry eyes",
    uses: "Suitable for evening relaxation and mood enhancement",
    thc_rating: 8,
    user_rating: 7.75,
    combined_rating: 7.88
  },
  {
    name: "Sour OG",
    overview: "Hybrid strain featuring a sour, pungent aroma with powerful, sedative effects.",
    genetic_type: "Hybrid",
    lineage: "OG Kush x Sour Diesel",
    thc_range: "20-26%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Sour, pungent aroma with earthy undertones; sticky buds",
    effects: "Relaxed, Sedated, Euphoric",
    negatives: "dry mouth, couch-lock",
    uses: "Great for pain relief and heavy relaxation",
    thc_rating: 9,
    user_rating: 8.5,
    combined_rating: 8.75
  },
  {
    name: "God Bud",
    overview: "Indica-dominant strain revered for its heavy, sedative high and earthy, herbal flavor.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Unknown (classic strain)",
    thc_range: "15-22%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Earthy, herbal aroma with a subtle sweetness; dense buds",
    effects: "Relaxed, Sedated, Happy",
    negatives: "dry mouth, drowsiness",
    uses: "Ideal for chronic pain and insomnia",
    thc_rating: 6.75,
    user_rating: 6.5,
    combined_rating: 6.63
  },
  {
    name: "Cheese",
    overview: "Indica-dominant hybrid noted for its pungent, cheesy aroma and balanced, relaxing effects.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "UK Cheese Landrace",
    thc_range: "18-22%",
    cbd_level: "Low",
    dominant_terpenes: "Caryophyllene, Myrcene",
    qualitative_insights: "Strong cheesy odor with earthy undertones; dense, sticky buds",
    effects: "Relaxed, Euphoric, Happy",
    negatives: "dry mouth, dry eyes",
    uses: "Perfect for stress relief and creative pursuits",
    thc_rating: 7.5,
    user_rating: 7.25,
    combined_rating: 7.38
  },
  {
    name: "G13",
    overview: "Potent hybrid with a mysterious lineage offering a powerful, euphoric high.",
    genetic_type: "Hybrid",
    lineage: "Urban legend strain",
    thc_range: "20-26%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Pungent, earthy aroma with hints of diesel; compact buds",
    effects: "Euphoric, Creative, Relaxed",
    negatives: "dry mouth, dizziness",
    uses: "Ideal for experienced users seeking strong effects",
    thc_rating: 9,
    user_rating: 8.75,
    combined_rating: 8.88
  },
  {
    name: "Blueberry OG",
    overview: "Hybrid strain merging the sweet flavors of Blueberry with the potency of OG Kush.",
    genetic_type: "Hybrid",
    lineage: "Blueberry x OG Kush",
    thc_range: "18-25%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Sweet blueberry aroma with earthy, pine undertones; resinous buds",
    effects: "Relaxed, Euphoric, Happy",
    negatives: "dry mouth, drowsiness",
    uses: "Great for relaxation and mood enhancement",
    thc_rating: 8.25,
    user_rating: 8,
    combined_rating: 8.13
  },
  {
    name: "Cherry Bomb",
    overview: "Hybrid strain with an explosive cherry flavor and a dynamic, balanced high.",
    genetic_type: "Hybrid",
    lineage: "Cherry Pie x Unknown",
    thc_range: "18-24%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Bold cherry aroma with a hint of spice; dense buds",
    effects: "Euphoric, Energetic, Creative",
    negatives: "dry mouth, dry eyes",
    uses: "Ideal for creative pursuits and social gatherings",
    thc_rating: 8,
    user_rating: 8,
    combined_rating: 8.00
  },
  {
    name: "Mango Kush",
    overview: "Indica-dominant hybrid offering a tropical mango flavor with deeply relaxing effects.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Afghani x Mango",
    thc_range: "20-26%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Limonene",
    qualitative_insights: "Tropical mango aroma with earthy undertones; dense, resinous buds",
    effects: "Relaxed, Sedated, Euphoric",
    negatives: "dry mouth, drowsiness",
    uses: "Used for stress relief and relaxation",
    thc_rating: 9,
    user_rating: 8.75,
    combined_rating: 8.88
  },
  {
    name: "Pineapple Chunk",
    overview: "Indica-dominant hybrid featuring a sweet pineapple aroma and a heavy, sedative high.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Pineapple x Chunk",
    thc_range: "16-23%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Myrcene",
    qualitative_insights: "Tropical pineapple scent with earthy notes; chunky buds",
    effects: "Relaxed, Sedated, Happy",
    negatives: "dry mouth, couch-lock",
    uses: "Ideal for evening use and pain management",
    thc_rating: 7.25,
    user_rating: 7,
    combined_rating: 7.13
  },
  {
    name: "Jillybean",
    overview: "Hybrid strain known for its fruity, floral flavor and uplifting, creative effects.",
    genetic_type: "Hybrid",
    lineage: "Unknown (landrace blend)",
    thc_range: "15-20%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Fruity, floral aroma with a sweet finish; light buds",
    effects: "Uplifted, Euphoric, Creative",
    negatives: "dry mouth, dry eyes",
    uses: "Great for daytime use and creative inspiration",
    thc_rating: 6.25,
    user_rating: 6,
    combined_rating: 6.13
  },
  {
    name: "Strawberry Banana",
    overview: "Hybrid strain combining sweet strawberry and banana flavors with a balanced high.",
    genetic_type: "Hybrid",
    lineage: "Unknown (blend)",
    thc_range: "18-26%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Myrcene",
    qualitative_insights: "Sweet, tropical aroma with a creamy finish; resinous buds",
    effects: "Happy, Relaxed, Euphoric",
    negatives: "dry mouth, dizziness",
    uses: "Ideal for mood elevation and relaxation",
    thc_rating: 8.5,
    user_rating: 8.25,
    combined_rating: 8.38
  },
  {
    name: "Tropicana Cookies",
    overview: "Sativa-dominant hybrid delivering a burst of citrus and cookie flavors with an energetic high.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Cookie genetics x Tangie",
    thc_range: "20-28%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Zesty citrus aroma with a sweet, baked undertone; frosty buds",
    effects: "Energized, Uplifted, Creative",
    negatives: "dry mouth, dry eyes",
    uses: "Perfect for daytime creativity and social events",
    thc_rating: 9.5,
    user_rating: 9,
    combined_rating: 9.25
  },
  {
    name: "UK Cheese",
    overview: "Indica-dominant variant of Cheese known for its pungent aroma and relaxing, euphoric effects.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "UK Landrace",
    thc_range: "15-20%",
    cbd_level: "Low",
    dominant_terpenes: "Caryophyllene, Myrcene",
    qualitative_insights: "Strong cheesy odor with herbal undertones; sticky buds",
    effects: "Relaxed, Euphoric, Happy",
    negatives: "dry mouth, dry eyes",
    uses: "Great for stress relief and relaxation",
    thc_rating: 6.25,
    user_rating: 6,
    combined_rating: 6.13
  },
  {
    name: "Raspberry Kush",
    overview: "Indica-dominant hybrid with a sweet raspberry flavor and a deeply calming high.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Afghani x Unknown",
    thc_range: "18-24%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Sweet raspberry aroma with earthy notes; dense buds",
    effects: "Relaxed, Sedated, Euphoric",
    negatives: "dry mouth, drowsiness",
    uses: "Ideal for evening use and pain relief",
    thc_rating: 8,
    user_rating: 7.75,
    combined_rating: 7.88
  },
  {
    name: "Orange Cookies",
    overview: "Hybrid strain combining citrus and sweet cookie flavors with a balanced, uplifting high.",
    genetic_type: "Hybrid",
    lineage: "Girl Scout Cookies x Orange Velvet",
    thc_range: "18-25%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Citrus-infused aroma with sweet undertones; resinous buds",
    effects: "Happy, Relaxed, Uplifted",
    negatives: "dry mouth, dry eyes",
    uses: "Suitable for mood enhancement and stress relief",
    thc_rating: 8.25,
    user_rating: 8,
    combined_rating: 8.13
  },
  {
    name: "White Tahoe Cookies",
    overview: "Indica-dominant hybrid featuring a sweet, citrusy flavor and potent, relaxing effects.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "Tahoe OG x Cookies",
    thc_range: "20-25%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Sweet citrus aroma with earthy hints; dense, sticky buds",
    effects: "Relaxed, Euphoric, Sedated",
    negatives: "dry mouth, couch-lock",
    uses: "Ideal for evening relaxation and pain management",
    thc_rating: 8.75,
    user_rating: 8.5,
    combined_rating: 8.63
  },
  {
    name: "Fire OG",
    overview: "Indica-dominant strain known for its intense, spicy pine flavor and powerful sedative effects.",
    genetic_type: "Indica-dominant Hybrid",
    lineage: "OG Kush lineage",
    thc_range: "20-25%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Limonene",
    qualitative_insights: "Spicy, pine aroma with a hint of earthiness; chunky buds",
    effects: "Relaxed, Sedated, Euphoric",
    negatives: "dry mouth, drowsiness",
    uses: "Used for severe pain relief and stress reduction",
    thc_rating: 8.75,
    user_rating: 8.5,
    combined_rating: 8.63
  },
  {
    name: "Headband",
    overview: "Hybrid strain recognized for its tight, band-like effect and a balanced cerebral and body high.",
    genetic_type: "Hybrid",
    lineage: "Super Silver Haze x OG Kush",
    thc_range: "18-22%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Subtle, earthy aroma with hints of diesel; compact buds",
    effects: "Euphoric, Relaxed, Focused",
    negatives: "dry mouth, fatigue",
    uses: "Great for migraine relief and creative focus",
    thc_rating: 7.5,
    user_rating: 7.25,
    combined_rating: 7.38
  },
  {
    name: "Jack the Ripper",
    overview: "Potent hybrid with a sharp, spicy flavor and a fast-acting, cerebral high.",
    genetic_type: "Hybrid",
    lineage: "Jack Herer x Unknown",
    thc_range: "18-24%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Spicy, herbal aroma with a hint of citrus; dense buds",
    effects: "Euphoric, Creative, Energetic",
    negatives: "dry mouth, dry eyes",
    uses: "Ideal for creative inspiration and stress relief",
    thc_rating: 8,
    user_rating: 8,
    combined_rating: 8.00
  },
  {
    name: "Cinderella 99",
    overview: "Sativa-dominant hybrid known for its uplifting, energetic high and sweet, citrus flavor.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Unknown (landrace blend)",
    thc_range: "18-24%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Terpinolene",
    qualitative_insights: "Sweet citrus aroma with floral hints; airy buds",
    effects: "Energized, Uplifted, Creative",
    negatives: "dry mouth, anxiety",
    uses: "Great for daytime energy and creativity",
    thc_rating: 8,
    user_rating: 8.25,
    combined_rating: 8.13
  },
  {
    name: "Blue Cookies",
    overview: "Hybrid strain combining sweet blueberry flavors with a calming, balanced high.",
    genetic_type: "Hybrid",
    lineage: "Blueberry x Girl Scout Cookies",
    thc_range: "20-25%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Caryophyllene",
    qualitative_insights: "Sweet blueberry aroma with earthy undertones; resinous buds",
    effects: "Relaxed, Euphoric, Happy",
    negatives: "dry mouth, drowsiness",
    uses: "Ideal for relaxation and mood enhancement",
    thc_rating: 8.75,
    user_rating: 8.5,
    combined_rating: 8.63
  },
  {
    name: "Mimosa",
    overview: "Sativa-dominant hybrid offering a vibrant citrus and sweet, tangy flavor with an uplifting high.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Citrus x Purple Punch",
    thc_range: "20-25%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Bright citrus aroma with sweet, fruity notes; light buds",
    effects: "Energized, Uplifted, Happy",
    negatives: "dry mouth, dry eyes",
    uses: "Perfect for daytime use and social gatherings",
    thc_rating: 8.75,
    user_rating: 8.5,
    combined_rating: 8.63
  },
  {
    name: "LA Kush",
    overview: "Hybrid strain known for its spicy, earthy flavor and balanced, calming effects.",
    genetic_type: "Hybrid",
    lineage: "LA x Kush lineage",
    thc_range: "17-22%",
    cbd_level: "Low",
    dominant_terpenes: "Myrcene, Limonene",
    qualitative_insights: "Earthy, spicy aroma with subtle floral hints; moderate buds",
    effects: "Relaxed, Euphoric, Focused",
    negatives: "dry mouth, drowsiness",
    uses: "Ideal for stress relief and relaxation",
    thc_rating: 7.25,
    user_rating: 7,
    combined_rating: 7.13
  },
  {
    name: "Amnesia Lemon",
    overview: "Sativa-dominant hybrid blending citrus and earthy flavors for an energizing, creative high.",
    genetic_type: "Sativa-dominant Hybrid",
    lineage: "Amnesia x Lemon Skunk",
    thc_range: "18-24%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Terpinolene",
    qualitative_insights: "Bright lemon aroma with earthy undertones; light, airy buds",
    effects: "Energized, Uplifted, Creative",
    negatives: "dry mouth, anxiety",
    uses: "Great for daytime creativity and mood boost",
    thc_rating: 8,
    user_rating: 8,
    combined_rating: 8.00
  },
  {
    name: "Forbidden Jack",
    overview: "Hybrid strain merging tropical fruit notes with a potent, balanced high for a unique experience.",
    genetic_type: "Hybrid",
    lineage: "Forbidden Fruit x Jack Herer",
    thc_range: "19-25%",
    cbd_level: "Low",
    dominant_terpenes: "Limonene, Caryophyllene",
    qualitative_insights: "Tropical, fruity aroma with spicy hints; resinous buds",
    effects: "Euphoric, Relaxed, Creative",
    negatives: "dry mouth, drowsiness",
    uses: "Ideal for creative sessions and stress relief",
    thc_rating: 8.5,
    user_rating: 8.25,
    combined_rating: 8.38
  }
];

================================================================================
File: src/contexts/BluetoothContext.ts
================================================================================

import { createContext, useContext } from "react";
import { PermissionsAndroid, Platform } from "react-native";
import * as ExpoDevice from "expo-device";
import { BleError, BleManager, Characteristic, Device } from 'react-native-ble-plx';

type ConnectedDevice = {
    device: Device;
    serviceUUID: string;
    characteristicUUID: string
}

export class BluetoothHandler {
    private manager: BleManager;
    private connectedDevice: ConnectedDevice | null;

    constructor() {
        this.manager = new BleManager();
        this.connectedDevice = null;
    }

    public async connectToDevice(device: Device) {
        if (this.connectedDevice !== null) {
            // TODO: decide how to handle new connection when device is already connected
            return;
        }
        try {
            const deviceConnection: Device = await this.manager.connectToDevice(device.id);
            await deviceConnection.discoverAllServicesAndCharacteristics();
            const services = await deviceConnection.services();
            if (services.length !== 1) {
                throw Error("Bad number of services");
            }

            const service = services[0];
            const characteristics = await service.characteristics();
            if (characteristics.length !== 1) {
                throw Error("Bad number of characteristics");
            }
            const characteristic = characteristics[0];
            this.connectedDevice = {
                device: deviceConnection,
                serviceUUID: service.uuid,
                characteristicUUID: characteristic.uuid
            }

        } catch (error) {
            console.error('Error discovering services/characteristics:', error);
        } finally {
            this.manager.stopDeviceScan();
        }
    }

    public disconnectFromDevice(connectedDevice: Device) {
        if (connectedDevice) {
            this.manager.cancelDeviceConnection(connectedDevice.id);
          }
    }

    public streamOnConnectedDevice(streamListener: (error: BleError | null, characteristic: Characteristic | null) => void) {
        if (this.connectedDevice === null) {
            throw Error("Tried to stream with no device connected");
        } 
        this.connectedDevice.device.monitorCharacteristicForService(
            this.connectedDevice.serviceUUID,
            this.connectedDevice.characteristicUUID,
            streamListener
          );
    }

    public getBLEManager(): BleManager {
        return this.manager;
    }

    public getConnectedDevice(): Device | undefined {
        return this.connectedDevice?.device;
    }

    public getSavedDevices(): Device[] {
        // TODO query database
        return [];
    }

    /*
     * Requests bluetooth permissions, accounting for platform differences
     */
    private async requestPermissions() {
        if (Platform.OS === "android") {
            if ((ExpoDevice.platformApiLevel ?? -1) < 31) {
                // Android version below 31
                const granted = await PermissionsAndroid.request(
                    PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
                    {
                        title: "Location Permission",
                        message: "Bluetooth Low Energy requires Location",
                        buttonPositive: "OK",
                    }
                );
                return granted === PermissionsAndroid.RESULTS.GRANTED;
            } else {
                // Android version above 31
                const isAndroid31PermissionsGranted = await this.requestAndroid31Permissions();

                return isAndroid31PermissionsGranted;
            }
        } else {
            //ios
            return true;
        }
    }

    private async requestAndroid31Permissions() {
        const bluetoothScanPermission = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN,
            {
                title: "Location Permission",
                message: "Bluetooth Low Energy requires Location",
                buttonPositive: "OK",
            }
        );
        const bluetoothConnectPermission = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT,
            {
                title: "Location Permission",
                message: "Bluetooth Low Energy requires Location",
                buttonPositive: "OK",
            }
        );
        const fineLocationPermission = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
            {
                title: "Location Permission",
                message: "Bluetooth Low Energy requires Location",
                buttonPositive: "OK",
            }
        );

        return (
            bluetoothScanPermission === "granted" &&
            bluetoothConnectPermission === "granted" &&
            fineLocationPermission === "granted"
        );
    }
}

export const BluetoothContext = createContext<BluetoothHandler | undefined>(undefined);


================================================================================
File: src/dbManager.ts
================================================================================

// File: src/dbManager.ts

import AsyncStorage from "@react-native-async-storage/async-storage";
import { openDatabaseAsync, SQLiteDatabase } from "expo-sqlite";
import {
  BONG_HITS_DATABASE_NAME,
  SAVED_DEVICES_DATABASE_NAME,
  STRAINS_DATABASE_NAME,
  getInsertStatements,
  getStrainInsertStatements,
  SAMPLE_STRAINS
} from "./constants";
import { BongHitStats, Datapoint, AverageHourCount } from "./types";

const FIRST_LAUNCH_KEY = "hasLaunched";

export interface Strain {
  id?: number;
  name: string;
  overview: string;
  genetic_type: string;
  lineage: string;
  thc_range: string;
  cbd_level: string;
  dominant_terpenes: string;
  qualitative_insights: string;
  effects: string;
  negatives: string;
  uses: string;
  thc_rating: number;
  user_rating: number;
  combined_rating: number;
  created_at?: string;
}

/**
 * Checks if the application is launching for the first time.
 */
export async function isFirstLaunch(): Promise<boolean> {
  try {
    return (await AsyncStorage.getItem(FIRST_LAUNCH_KEY)) === null;
  } catch (error) {
    console.error('[dbManager] Error checking first launch:', error);
    return false;
  }
}

/**
 * Called on first launch to run any initial setup (e.g. DB creation).
 */
export async function initializeAppOnFirstLaunch() {
  try {
    await AsyncStorage.setItem(FIRST_LAUNCH_KEY, "true");
    await initializeDatabase();
  } catch (error) {
    console.error('[dbManager] Error initializing app:', error);
    throw error;
  }
}

/**
 * Initializes all databases and tables with initial data.
 */
async function initializeDatabase(): Promise<void> {
  try {
    console.log('[dbManager] Starting database initialization...');

    // Initialize BongHits database
    const bongHitsDb = await openDatabaseAsync(BONG_HITS_DATABASE_NAME);
    await bongHitsDb.execAsync(
      'PRAGMA journal_mode = WAL;' +
      `CREATE TABLE IF NOT EXISTS ${BONG_HITS_DATABASE_NAME} (
        timestamp TIMESTAMP PRIMARY KEY NOT NULL,
        duration_ms INTEGER NOT NULL
      );` +
      `CREATE INDEX IF NOT EXISTS idx_timestamp 
      ON ${BONG_HITS_DATABASE_NAME}(timestamp);` +
      getInsertStatements()
    );
    console.log('[dbManager] BongHits database initialized');

    // Initialize SavedDevices database
    const savedDevicesDb = await openDatabaseAsync(SAVED_DEVICES_DATABASE_NAME);
    await savedDevicesDb.execAsync(
      'PRAGMA journal_mode = WAL;' +
      `CREATE TABLE IF NOT EXISTS ${SAVED_DEVICES_DATABASE_NAME} (
        uuid TEXT PRIMARY KEY NOT NULL,
        name TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );` +
      `CREATE INDEX IF NOT EXISTS idx_device_name 
      ON ${SAVED_DEVICES_DATABASE_NAME}(name);`
    );
    console.log('[dbManager] SavedDevices database initialized');

    // Initialize Strains database
    const strainsDb = await openDatabaseAsync(STRAINS_DATABASE_NAME);
    await strainsDb.execAsync(
      'PRAGMA journal_mode = WAL;' +
      `CREATE TABLE IF NOT EXISTS ${STRAINS_DATABASE_NAME} (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        overview TEXT,
        genetic_type TEXT,
        lineage TEXT,
        thc_range TEXT,
        cbd_level TEXT,
        dominant_terpenes TEXT,
        qualitative_insights TEXT,
        effects TEXT,
        negatives TEXT,
        uses TEXT,
        thc_rating REAL,
        user_rating REAL,
        combined_rating REAL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );` +
      `CREATE INDEX IF NOT EXISTS idx_strain_name 
      ON ${STRAINS_DATABASE_NAME}(name);` +
      `CREATE INDEX IF NOT EXISTS idx_strain_genetic_type 
      ON ${STRAINS_DATABASE_NAME}(genetic_type);` +
      `CREATE INDEX IF NOT EXISTS idx_strain_effects 
      ON ${STRAINS_DATABASE_NAME}(effects);` +
      `CREATE INDEX IF NOT EXISTS idx_strain_rating 
      ON ${STRAINS_DATABASE_NAME}(combined_rating DESC);`
    );

    // Insert sample strain data
    await insertStrainData(strainsDb);
    console.log('[dbManager] Strains database initialized');

    console.log('[dbManager] All databases initialized successfully');
  } catch (error) {
    console.error('[dbManager] Error initializing databases:', error);
    throw error;
  }
}

/**
 * Inserts sample strain data into the database
 */
async function insertStrainData(db: SQLiteDatabase): Promise<void> {
  try {
    console.log('[dbManager] Starting strain data insertion...');
    
    // Insert strains in batches for better performance
    const batchSize = 50;
    for (let i = 0; i < SAMPLE_STRAINS.length; i += batchSize) {
      const batch = SAMPLE_STRAINS.slice(i, i + batchSize);
      
      const placeholders = batch.map(() => 
        '(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
      ).join(',');

      const values = batch.flatMap((strain: Strain) => [
        strain.name,
        strain.overview,
        strain.genetic_type,
        strain.lineage,
        strain.thc_range,
        strain.cbd_level,
        strain.dominant_terpenes,
        strain.qualitative_insights,
        strain.effects,
        strain.negatives,
        strain.uses,
        strain.thc_rating,
        strain.user_rating,
        strain.combined_rating
      ]);

      await db.execAsync(
        `INSERT OR IGNORE INTO ${STRAINS_DATABASE_NAME} (
          name, overview, genetic_type, lineage, thc_range,
          cbd_level, dominant_terpenes, qualitative_insights,
          effects, negatives, uses, thc_rating,
          user_rating, combined_rating
        ) VALUES ${placeholders}`,
        values
      );
    }

    console.log('[dbManager] Strain data insertion completed');
  } catch (error) {
    console.error('[dbManager] Error inserting strain data:', error);
    throw error;
  }
}

/* ------------------------------------------------------------------
   Helpers to validate results before returning them
 ------------------------------------------------------------------ */

const validateBongHitStats = (stats: BongHitStats): BongHitStats => ({
  averageDuration: Math.max(0, Number(stats.averageDuration) || 0),
  longestHit: Math.max(0, Number(stats.longestHit) || 0),
});

const validateDatapoint = (point: Datapoint): Datapoint => ({
  label: String(point.label || ""),
  value: Math.max(0, Number(point.value) || 0),
});

const validateAverageHourCount = (count: AverageHourCount): AverageHourCount => ({
  hourOfDay: String(count.hourOfDay || "00"),
  count: Math.max(0, Number(count.count) || 0),
});

/* ------------------------------------------------------------------
   Data-Fetching / Query Functions
   (Now using execAsync, parse the result sets)
 ------------------------------------------------------------------ */

/**
 * Retrieves average and max duration over the past 7 days.
 */
export async function getBongHitStatsFromPastWeek(): Promise<BongHitStats> {
  try {
    const db: SQLiteDatabase = await openDatabaseAsync(BONG_HITS_DATABASE_NAME);
    const results = await db.execAsync(`
      SELECT
        AVG(duration_ms) AS avg_duration,
        MAX(duration_ms) AS max_duration
      FROM ${BONG_HITS_DATABASE_NAME}
      WHERE timestamp >= DATETIME('now', '-7 days')
    `);

    // execAsync returns an array of result sets; we only have one query
    const row = results[0]?.rows?._array[0];
    if (!row) {
      // Fallback if no data
      return validateBongHitStats({ averageDuration: 0, longestHit: 0 });
    }

    return validateBongHitStats({
      averageDuration: row.avg_duration,
      longestHit: row.max_duration,
    });
  } catch (error) {
    console.error("Error in getBongHitStatsFromPastWeek:", error);
    throw error;
  }
}

/**
 * Counts hits per day over the past week (filling day indices 0..6).
 */
export async function queryNumberOfHitsFromPastWeek(): Promise<Datapoint[]> {
  try {
    const db: SQLiteDatabase = await openDatabaseAsync(BONG_HITS_DATABASE_NAME);
    const results = await db.execAsync(`
      SELECT 
        strftime('%w', timestamp) AS day,
        COUNT(*) AS hit_count
      FROM ${BONG_HITS_DATABASE_NAME}
      WHERE timestamp >= '2024-12-24'
      GROUP BY day
      ORDER BY day;
    `);

    const rows = results[0]?.rows?._array || [];
    console.log("Weekly query results:", rows);

    // Prepare an array for Sunday..Saturday
    const weekData: Datapoint[] = Array.from({ length: 7 }, (_, i) => ({
      label: dayLookUpTable.get(i) || "",
      value: 0,
    }));

    rows.forEach((row: any) => {
      const dayIndex = parseInt(row.day, 10);
      if (dayIndex >= 0 && dayIndex < 7) {
        weekData[dayIndex] = validateDatapoint({
          label: dayLookUpTable.get(dayIndex) || "",
          value: row.hit_count,
        });
      }
    });

    return weekData;
  } catch (error) {
    console.error("Error in queryNumberOfHitsFromPastWeek:", error);
    throw error;
  }
}

/**
 * Returns a list of (hourOfDay -> # of hits) since 2024-12-24,
 * filling missing hours with 0.
 */
export async function getDailyAverageDatapoints(): Promise<AverageHourCount[]> {
  try {
    const db: SQLiteDatabase = await openDatabaseAsync(BONG_HITS_DATABASE_NAME);
    const results = await db.execAsync(`
      SELECT 
        strftime('%H', timestamp) AS hourOfDay,
        COUNT(*) AS count
      FROM ${BONG_HITS_DATABASE_NAME}
      WHERE timestamp >= '2024-12-24'
      GROUP BY hourOfDay
      ORDER BY hourOfDay
    `);

    const rows = results[0]?.rows?._array || [];
    // Hours "00" through "23"
    const allHours = Array.from({ length: 24 }, (_, i) => i.toString().padStart(2, "0"));
    const dataMap = new Map<string, number>(
      rows.map((item: any) => [item.hourOfDay, item.count])
    );

    return allHours.map((hour) =>
      validateAverageHourCount({
        hourOfDay: hour,
        count: dataMap.get(hour) || 0,
      })
    );
  } catch (error) {
    console.error("Error in getDailyAverageDatapoints:", error);
    throw error;
  }
}

/**
 * Generic function to get data based on a time range (D=Day, W=Week, M=Month).
 * Returns both chartData and some aggregated stats.
 */
export async function getDailyStats(timeRange: string) {
  let query = "";

  switch (timeRange) {
    case "D":
      query = `
        SELECT strftime('%H', timestamp) as label,
               COUNT(*) as value,
               AVG(duration_ms) as avg_duration
        FROM ${BONG_HITS_DATABASE_NAME}
        WHERE date(timestamp) = date('now')
        GROUP BY label
        ORDER BY label
      `;
      break;
    case "W":
      query = `
        SELECT strftime('%w', timestamp) as label,
               COUNT(*) as value,
               AVG(duration_ms) as avg_duration
        FROM ${BONG_HITS_DATABASE_NAME}
        WHERE timestamp >= date('now', '-7 days')
        GROUP BY label
        ORDER BY label
      `;
      break;
    case "M":
      query = `
        SELECT strftime('%d', timestamp) as label,
               COUNT(*) as value,
               AVG(duration_ms) as avg_duration
        FROM ${BONG_HITS_DATABASE_NAME}
        WHERE timestamp >= date('now', '-30 days')
        GROUP BY label
        ORDER BY label
      `;
      break;
    default:
      // fallback same as 'D'
      query = `
        SELECT strftime('%H', timestamp) as label,
               COUNT(*) as value,
               AVG(duration_ms) as avg_duration
        FROM ${BONG_HITS_DATABASE_NAME}
        WHERE date(timestamp) = date('now')
        GROUP BY label
        ORDER BY label
      `;
  }

  try {
    const db: SQLiteDatabase = await openDatabaseAsync(BONG_HITS_DATABASE_NAME);
    const results = await db.execAsync(query);
    const rows = results[0]?.rows?._array || [];

    // Build chart data
    const chartData = {
      labels: rows.map((r: any) => `${r.label}h`),
      datasets: [
        {
          data: rows.map((r: any) => r.value),
          color: (opacity = 1) => `rgba(0, 122, 255, ${opacity})`,
          strokeWidth: 2,
        },
      ],
      legend: ["Hits"],
    };

    // Build aggregated stats
    // If no rows, handle safely
    if (!rows.length) {
      return {
        chartData,
        stats: {
          avgDuration: 0,
          totalHits: 0,
          peakHour: null,
        },
      };
    }

    const avgDuration =
      rows.reduce((acc: number, curr: any) => acc + curr.avg_duration, 0) /
      rows.length;
    const totalHits = rows.reduce((acc: number, curr: any) => acc + curr.value, 0);
    const peak = rows.reduce((a: any, b: any) => (a.value > b.value ? a : b));
    const peakHour = peak.label;

    return {
      chartData,
      stats: {
        avgDuration,
        totalHits,
        peakHour,
      },
    };
  } catch (error) {
    console.error("Error in getDailyStats:", error);
    throw error;
  }
}

// Export query functions


================================================================================
File: src/hooks/useDataService.ts
================================================================================

import { useState, useEffect } from 'react';
import { DataService } from '@/src/services/DataService';
import { DataState, ChartDataPoint, UsageStats, WeekdayStats } from '@/src/types';

const DEFAULT_STATE: DataState = {
  weeklyData: [],
  monthlyData: [],
  usageStats: {
    averageHitsPerDay: 0,
    totalHits: 0,
    peakDayHits: 0,
    lowestDayHits: 0,
    averageDuration: 0,
    longestHit: 0,
    shortestHit: 0,
    mostActiveHour: 0,
    leastActiveHour: 0,
    totalDuration: 0,
    averageHitsPerHour: 0,
    consistency: 0,
    weekdayStats: {
      weekday: { avg: 0, total: 0 },
      weekend: { avg: 0, total: 0 }
    }
  },
  timeDistribution: {
    morning: 0,
    afternoon: 0,
    evening: 0,
    night: 0
  },
  isLoading: true,
  error: null
};

export function useDataService() {
  const [state, setState] = useState<DataState>(DEFAULT_STATE);

  useEffect(() => {
    let isMounted = true;
    const service = DataService.getInstance();

    const loadData = async () => {
      try {
        // Log for debugging
        console.log('[useDataService] Starting data fetch...');

        // Set initial loading state
        if (!isMounted) return;
        setState(prev => ({ ...prev, isLoading: true, error: null }));

        // Fetch data sequentially to avoid race conditions
        console.log('[useDataService] Fetching weekly stats...');
        const weeklyStats = await service.getWeeklyStats();
        if (!isMounted) return;
        console.log('[useDataService] Weekly stats:', weeklyStats);

        console.log('[useDataService] Fetching monthly stats...');
        const monthlyStats = await service.getMonthlyStats();
        if (!isMounted) return;
        console.log('[useDataService] Monthly stats:', monthlyStats);

        console.log('[useDataService] Fetching usage stats...');
        const usageStats = await service.getUsageStats();
        if (!isMounted) return;
        console.log('[useDataService] Usage stats:', usageStats);

        console.log('[useDataService] Fetching time distribution...');
        const timeDistribution = await service.getTimeDistribution();
        if (!isMounted) return;
        console.log('[useDataService] Time distribution:', timeDistribution);

        // Collect any errors from the responses
        const errors: string[] = [];
        if (!weeklyStats.success) errors.push(`Weekly stats: ${weeklyStats.error}`);
        if (!monthlyStats.success) errors.push(`Monthly stats: ${monthlyStats.error}`);
        if (!usageStats.success) errors.push(`Usage stats: ${usageStats.error}`);
        if (!timeDistribution.success) errors.push(`Time distribution: ${timeDistribution.error}`);

        if (errors.length > 0) {
          const errorMessage = errors.join('; ');
          console.error('[useDataService] Data fetch errors:', errorMessage);
          if (isMounted) {
            setState(prev => ({
              ...prev,
              isLoading: false,
              error: errorMessage
            }));
          }
          return;
        }

        // Update state only if all requests succeeded and component is mounted
        console.log('[useDataService] All data fetched successfully, updating state...');
        if (isMounted) {
          setState({
            ...DEFAULT_STATE,
            weeklyData: weeklyStats.data!,
            monthlyData: monthlyStats.data!,
            usageStats: {
              ...DEFAULT_STATE.usageStats,
              ...usageStats.data!
            },
            timeDistribution: timeDistribution.data!,
            isLoading: false,
            error: null
          });
        }
      } catch (error) {
        console.error('[useDataService] Unexpected error in loadData:', error);
        if (isMounted) {
          setState(prev => ({
            ...prev,
            isLoading: false,
            error: error instanceof Error ? error.message : 'An unexpected error occurred while fetching data'
          }));
        }
      }
    };

    loadData();

    return () => {
      console.log('[useDataService] Cleaning up...');
      isMounted = false;
      service.cleanup().catch(error => {
        console.error('[useDataService] Error during cleanup:', error);
      });
    };
  }, []); // Empty dependency array as we only want to run this once

  return state;
} 

================================================================================
File: src/hooks/useStrains.ts
================================================================================

import { useState, useEffect, useCallback } from 'react';
import StrainService, { StrainSearchFilters } from '../services/StrainService';
import { Strain } from '../dbManager';

export interface UseStrainState {
  strains: Strain[];
  popularStrains: Strain[];
  categories: { [key: string]: number };
  isLoading: boolean;
  error: string | null;
  pagination: {
    total: number;
    currentPage: number;
    totalPages: number;
    hasMore: boolean;
  };
}

export interface UseStrainActions {
  searchStrains: (query: string, filters: StrainSearchFilters) => Promise<void>;
  loadMore: () => void;
  toggleFavorite: (strainId: number) => Promise<void>;
  isFavorite: (strainId: number) => boolean;
  clearSearch: () => void;
  getStrainDetails: (id: number) => Promise<Strain | null>;
  getRelatedStrains: (strain: Strain) => Promise<Strain[]>;
}

const INITIAL_STATE: UseStrainState = {
  strains: [],
  popularStrains: [],
  categories: {},
  isLoading: false,
  error: null,
  pagination: {
    total: 0,
    currentPage: 1,
    totalPages: 1,
    hasMore: false
  }
};

export function useStrains(): UseStrainState & UseStrainActions {
  const [state, setState] = useState<UseStrainState>(INITIAL_STATE);
  const [filters, setFilters] = useState<StrainSearchFilters>({});
  const [favoriteStrains, setFavoriteStrains] = useState<number[]>([]);

  // Load initial data
  useEffect(() => {
    loadInitialData();
  }, []);

  const loadInitialData = async () => {
    try {
      setState(prev => ({ ...prev, isLoading: true }));
      
      const [popularStrains, categories] = await Promise.all([
        StrainService.getPopularStrains(),
        StrainService.getStrainCategories()
      ]);

      setState(prev => ({
        ...prev,
        popularStrains,
        categories,
        isLoading: false
      }));
    } catch (error) {
      setState(prev => ({
        ...prev,
        error: 'Failed to load initial data',
        isLoading: false
      }));
    }
  };

  const searchStrains = useCallback(async (
    query: string,
    newFilters: StrainSearchFilters = {},
    page: number = 1
  ) => {
    try {
      setState(prev => ({ ...prev, isLoading: true }));
      setFilters(newFilters);

      const result = await StrainService.searchStrains(query, newFilters, { page, limit: 10 });

      setState(prev => ({
        ...prev,
        strains: page === 1 ? result.data : [...prev.strains, ...result.data],
        pagination: {
          total: result.total,
          currentPage: result.currentPage,
          totalPages: result.totalPages,
          hasMore: result.hasMore
        },
        isLoading: false
      }));
    } catch (error) {
      setState(prev => ({
        ...prev,
        error: 'Search failed',
        isLoading: false
      }));
    }
  }, []);

  const loadMore = useCallback(() => {
    if (state.pagination.hasMore && !state.isLoading) {
      const nextPage = state.pagination.currentPage + 1;
      searchStrains('', filters, nextPage);
    }
  }, [state.pagination, state.isLoading, filters, searchStrains]);

  const toggleFavorite = useCallback(async (strainId: number) => {
    setFavoriteStrains(prev => {
      const isFavorited = prev.includes(strainId);
      return isFavorited 
        ? prev.filter(id => id !== strainId)
        : [...prev, strainId];
    });
  }, []);

  const isFavorite = useCallback((strainId: number) => {
    return favoriteStrains.includes(strainId);
  }, [favoriteStrains]);

  const clearSearch = useCallback(() => {
    setState(prev => ({
      ...prev,
      strains: [],
      pagination: {
        total: 0,
        currentPage: 1,
        totalPages: 1,
        hasMore: false
      }
    }));
  }, []);

  const getStrainDetails = useCallback(async (id: number): Promise<Strain | null> => {
    try {
      return await StrainService.getStrainById(id);
    } catch (error) {
      console.error('[useStrains] Error getting strain details:', error);
      return null;
    }
  }, []);

  const getRelatedStrains = useCallback(async (strain: Strain): Promise<Strain[]> => {
    try {
      return await StrainService.getRelatedStrains(strain);
    } catch (error) {
      console.error('[useStrains] Error getting related strains:', error);
      return [];
    }
  }, []);

  return {
    ...state,
    searchStrains,
    loadMore,
    toggleFavorite,
    isFavorite,
    clearSearch,
    getStrainDetails,
    getRelatedStrains
  };
} 

================================================================================
File: src/hooks/useTimeRangeData.ts
================================================================================

import { useState, useCallback, useEffect } from 'react';
import { useDataService } from './useDataService';

export type TimeRange = 'D' | 'W' | 'M' | 'Y';

interface TimeRangeData {
  chartData: number[];
  chartLabels: string[];
  averageValue: number;
  maxValue: number;
  minValue: number;
  weekdayAvg?: number;
  weekendAvg?: number;
}

export function useTimeRangeData(initialRange: TimeRange = 'W') {
  const { weeklyData, monthlyData, usageStats, isLoading: isDataLoading, error: dataError } = useDataService();
  const [timeRange, setTimeRange] = useState<TimeRange>(initialRange);
  const [data, setData] = useState<TimeRangeData>({
    chartData: [],
    chartLabels: [],
    averageValue: 0,
    maxValue: 0,
    minValue: 0,
    weekdayAvg: 0,
    weekendAvg: 0
  });
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Function to fetch data based on time range
  const fetchDataByTimeRange = useCallback(async (range: TimeRange) => {
    if (isDataLoading || dataError) return;
    const averageValue = usageStats.averageHitsPerDay;
    const maxValue = usageStats.peakDayHits; // Use the peak day value
    const minValue = usageStats.lowestDayHits > 0 ? usageStats.lowestDayHits : 0;
    setIsLoading(true);
    setError(null);
    
    try {
      // In a real implementation, this would call your data service
      // For now, we'll use the existing data and simulate different time ranges
      let chartData: number[] = [];
      let chartLabels: string[] = [];
      
      switch(range) {
        case 'D': // Daily (hours)
          // Simulate hourly data for today
          chartData = Array.from({ length: 24 }, () => Math.floor(Math.random() * 10));
          chartLabels = Array.from({ length: 24 }, (_, i) => `${i}:00`);
          break;
        case 'W': // Weekly (days)
          // Use the existing weekly data
          chartData = weeklyData.map(d => d.value);
          chartLabels = weeklyData.map(d => d.label);
          break;
        case 'M': // Monthly (days)
          // Simulate daily data for a month
          chartData = Array.from({ length: 30 }, () => Math.floor(Math.random() * 20));
          chartLabels = Array.from({ length: 30 }, (_, i) => `${i+1}`);
          break;
        case 'Y': // Yearly (months)
          // Use the existing monthly data
          chartData = monthlyData.map(d => d.value);
          chartLabels = monthlyData.map(d => d.label);
          break;
      }

      let weekdayAvg = usageStats.weekdayStats?.weekday.avg || 0;
      let weekendAvg = usageStats.weekdayStats?.weekend.avg || 0;
      
      if (range !== 'W') {
        // Simulate different stats for other time ranges
        weekdayAvg = averageValue * 0.9; // Slightly lower for weekdays
        weekendAvg = averageValue * 1.2; // Slightly higher for weekends
      }
      
      setData({
        chartData,
        chartLabels,
        averageValue,
        maxValue,
        minValue,
        weekdayAvg,
        weekendAvg
      });
    } catch (err) {
      console.error("Error fetching time range data:", err);
      setError(err instanceof Error ? err.message : "An unknown error occurred");
    } finally {
      setIsLoading(false);
    }
  }, [weeklyData, monthlyData, usageStats, isDataLoading, dataError]);

  // Update data when time range changes
  useEffect(() => {
    fetchDataByTimeRange(timeRange);
  }, [timeRange, fetchDataByTimeRange]);

  return {
    timeRange,
    setTimeRange,
    data,
    isLoading: isLoading || isDataLoading,
    error: error || dataError,
    fetchDataByTimeRange
  };
} 

================================================================================
File: src/services/DataService.ts
================================================================================

import { openDatabaseAsync, SQLiteDatabase } from "expo-sqlite";
import { 
  BongHit, 
  ChartDataPoint, 
  DatabaseResponse, 
  UsageStats,
  TimeDistribution,
  DatabaseRow 
} from "@/src/types";
import { BONG_HITS_DATABASE_NAME, dayLookUpTable, getInsertStatements } from "@/src/constants";

interface CountResult {
  count: number;
}

export class DataService {
  private static instance: DataService;
  private db: SQLiteDatabase | null = null;
  private initializationPromise: Promise<void> | null = null;
  
  private constructor() {}

  static getInstance(): DataService {
    if (!DataService.instance) {
      DataService.instance = new DataService();
    }
    return DataService.instance;
  }

  private async initialize(): Promise<void> {
    try {
      console.log('[DataService] Initializing database...');
      this.db = await openDatabaseAsync(BONG_HITS_DATABASE_NAME);

      // Set up database with proper schema and mock data
      await this.db.execAsync(`
        PRAGMA journal_mode = WAL;
        
        DROP TABLE IF EXISTS ${BONG_HITS_DATABASE_NAME};
        
        CREATE TABLE IF NOT EXISTS ${BONG_HITS_DATABASE_NAME} (
          timestamp TIMESTAMP PRIMARY KEY NOT NULL,
          duration_ms INTEGER NOT NULL
        );
        
        CREATE INDEX IF NOT EXISTS idx_timestamp 
        ON ${BONG_HITS_DATABASE_NAME}(timestamp);
      `.concat(getInsertStatements()));

      // Verify data was inserted
      const [countResult] = await this.db.getAllAsync<CountResult>('SELECT COUNT(*) as count FROM ' + BONG_HITS_DATABASE_NAME);
      console.log('[DataService] Initialized database with', countResult.count, 'records');

    } catch (error) {
      console.error('[DataService] Failed to initialize database:', error);
      this.db = null;
      throw error;
    }
  }

  private async getDatabase(): Promise<SQLiteDatabase> {
    if (!this.db) {
      if (!this.initializationPromise) {
        this.initializationPromise = this.initialize();
      }
      await this.initializationPromise;
      this.initializationPromise = null;
    }

    if (!this.db) {
      throw new Error('Database initialization failed');
    }

    // Verify database has data
    const [countResult] = await this.db.getAllAsync<CountResult>(`
      SELECT COUNT(*) as count FROM ${BONG_HITS_DATABASE_NAME}
    `);
    console.log('[DataService] Current database record count:', countResult.count);

    return this.db;
  }

  private handleError<T>(error: unknown, operation: string): DatabaseResponse<T> {
    const errorMessage = error instanceof Error ? error.message : `Failed to ${operation}`;
    console.error(`[DataService] Error in ${operation}:`, error);
    return {
      success: false,
      error: errorMessage
    };
  }

  private validateWeeklyData(data: DatabaseRow[]): ChartDataPoint[] {
    console.log('[DataService] Validating weekly data:', data);
    const weekData = Array.from({ length: 7 }, (_, i) => ({
      label: dayLookUpTable.get(i) || "",
      value: 0
    }));
    
    data.forEach(row => {
      const dayIndex = Number(row.day);
      if (dayIndex >= 0 && dayIndex < 7) {
        weekData[dayIndex].value = Number(row.hit_count || 0);
      }
    });
    
    console.log('[DataService] Validated weekly data:', weekData);
    return weekData;
  }

  private validateMonthlyData(data: DatabaseRow[]): ChartDataPoint[] {
    console.log('[DataService] Validating monthly data:', data);
    const monthlyData = data.map(row => ({
      label: new Date(2024, Number(row.month) - 1).toLocaleString('default', { month: 'short' }),
      value: Number(row.hit_count || 0)
    }));
    console.log('[DataService] Validated monthly data:', monthlyData);
    return monthlyData;
  }

  async getWeeklyStats(): Promise<DatabaseResponse<ChartDataPoint[]>> {
    try {
      console.log('[DataService] Fetching weekly stats...');
      const db = await this.getDatabase();
      const results = await db.getAllAsync<DatabaseRow>(`
        SELECT 
          strftime('%w', timestamp) as day,
          COUNT(*) as hit_count
        FROM ${BONG_HITS_DATABASE_NAME}
        WHERE timestamp >= '2024-12-24'
        GROUP BY day
        ORDER BY day
      `);

      console.log('[DataService] Raw weekly results:', results);

      if (!results?.length) {
        console.log('[DataService] No weekly data found, returning empty dataset');
        return {
          success: true,
          data: Array.from({ length: 7 }, (_, i) => ({
            label: dayLookUpTable.get(i) || "",
            value: 0
          }))
        };
      }

      const validatedData = this.validateWeeklyData(results);
      return {
        success: true,
        data: validatedData
      };

    } catch (error) {
      return this.handleError(error, 'getWeeklyStats');
    }
  }

  async getMonthlyStats(): Promise<DatabaseResponse<ChartDataPoint[]>> {
    try {
      console.log('[DataService] Fetching monthly stats...');
      const db = await this.getDatabase();
      const results = await db.getAllAsync<DatabaseRow>(`
        SELECT 
          strftime('%m', timestamp) as month,
          COUNT(*) as hit_count
        FROM ${BONG_HITS_DATABASE_NAME}
        WHERE timestamp >= '2024-12-24'
        GROUP BY month
        ORDER BY month
      `);

      console.log('[DataService] Raw monthly results:', results);

      if (!results?.length) {
        console.log('[DataService] No monthly data found, returning empty dataset');
        return {
          success: true,
          data: Array.from({ length: 12 }, (_, i) => ({
            label: new Date(2024, i).toLocaleString('default', { month: 'short' }),
            value: 0
          }))
        };
      }

      const validatedData = this.validateMonthlyData(results);
      return {
        success: true,
        data: validatedData
      };

    } catch (error) {
      return this.handleError(error, 'getMonthlyStats');
    }
  }

  async getUsageStats(): Promise<DatabaseResponse<UsageStats>> {
    try {
      console.log('[DataService] Fetching usage stats...');
      const db = await this.getDatabase();
      
      // First get daily hits to calculate variance
      const dailyHitsQuery = `
        SELECT COUNT(*) as daily_hits
        FROM ${BONG_HITS_DATABASE_NAME}
        WHERE timestamp >= '2024-12-24'
        GROUP BY strftime('%Y-%m-%d', timestamp)
      `;

      const dailyHits = await db.getAllAsync<{ daily_hits: number }>(dailyHitsQuery);
      const dailyHitsArray = dailyHits.map(row => Number(row.daily_hits));
      const mean = dailyHitsArray.reduce((sum, val) => sum + val, 0) / dailyHitsArray.length;
      const variance = dailyHitsArray.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / dailyHitsArray.length;
      const consistency = Math.sqrt(variance);
      
      const query = `
        WITH DailyStats AS (
          SELECT 
            strftime('%Y-%m-%d', timestamp) as day,
            strftime('%w', timestamp) as weekday,
            COUNT(*) as daily_hits,
            AVG(duration_ms) as avg_duration_per_day,
            MIN(duration_ms) as min_duration,
            MAX(duration_ms) as max_duration,
            SUM(duration_ms) as total_duration_per_day
          FROM ${BONG_HITS_DATABASE_NAME}
          WHERE timestamp >= '2024-12-24'
          GROUP BY day
        ),
        WeekdayStats AS (
          SELECT
            CASE WHEN weekday IN ('0', '6') THEN 'weekend' ELSE 'weekday' END as day_type,
            AVG(daily_hits) as avg_hits,
            SUM(daily_hits) as total_hits
          FROM DailyStats
          GROUP BY day_type
        ),
        HourlyStats AS (
          SELECT 
            strftime('%H', timestamp) as hour,
            COUNT(*) as hits
          FROM ${BONG_HITS_DATABASE_NAME}
          WHERE timestamp >= '2024-12-24'
          GROUP BY hour
          ORDER BY hits DESC
        )
        SELECT 
          ROUND(AVG(d.daily_hits), 2) as average_hits_per_day,
          MAX(d.daily_hits) as peak_day_hits,
          MIN(d.daily_hits) as lowest_day_hits,
          SUM(d.daily_hits) as total_hits,
          ROUND(AVG(d.avg_duration_per_day), 2) as avg_duration,
          MIN(d.min_duration) as shortest_hit,
          MAX(d.max_duration) as longest_hit,
          SUM(d.total_duration_per_day) as total_duration,
          (SELECT hour FROM HourlyStats LIMIT 1) as most_active_hour,
          (SELECT hour FROM HourlyStats ORDER BY hits ASC LIMIT 1) as least_active_hour,
          ROUND((SELECT AVG(hits) FROM HourlyStats), 2) as avg_hits_per_hour,
          (SELECT avg_hits FROM WeekdayStats WHERE day_type = 'weekday') as weekday_avg,
          (SELECT total_hits FROM WeekdayStats WHERE day_type = 'weekday') as weekday_total,
          (SELECT avg_hits FROM WeekdayStats WHERE day_type = 'weekend') as weekend_avg,
          (SELECT total_hits FROM WeekdayStats WHERE day_type = 'weekend') as weekend_total
        FROM DailyStats d
      `;

      const [result] = await db.getAllAsync<DatabaseRow>(query);
      console.log('[DataService] Raw usage stats:', result);

      if (!result) {
        return {
          success: true,
          data: {
            averageHitsPerDay: 0,
            totalHits: 0,
            peakDayHits: 0,
            lowestDayHits: 0,
            averageDuration: 0,
            longestHit: 0,
            shortestHit: 0,
            mostActiveHour: 0,
            leastActiveHour: 0,
            totalDuration: 0,
            averageHitsPerHour: 0,
            consistency: 0,
            weekdayStats: {
              weekday: { avg: 0, total: 0 },
              weekend: { avg: 0, total: 0 }
            }
          }
        };
      }

      const stats: UsageStats = {
        averageHitsPerDay: Number(result.average_hits_per_day || 0),
        totalHits: Number(result.total_hits || 0),
        peakDayHits: Number(result.peak_day_hits || 0),
        lowestDayHits: Number(result.lowest_day_hits || 0),
        averageDuration: Number(result.avg_duration || 0),
        longestHit: Number(result.longest_hit || 0),
        shortestHit: Number(result.shortest_hit || 0),
        mostActiveHour: Number(result.most_active_hour || 0),
        leastActiveHour: Number(result.least_active_hour || 0),
        totalDuration: Number(result.total_duration || 0),
        averageHitsPerHour: Number(result.avg_hits_per_hour || 0),
        consistency: Math.round(consistency * 100) / 100,
        weekdayStats: {
          weekday: {
            avg: Number(result.weekday_avg || 0),
            total: Number(result.weekday_total || 0)
          },
          weekend: {
            avg: Number(result.weekend_avg || 0),
            total: Number(result.weekend_total || 0)
          }
        }
      };

      console.log('[DataService] Processed usage stats:', stats);
      return { success: true, data: stats };
    } catch (error) {
      return this.handleError(error, 'getUsageStats');
    }
  }

  async getTimeDistribution(): Promise<DatabaseResponse<TimeDistribution>> {
    try {
      const db = await this.getDatabase();
      const query = `
        WITH HourlyHits AS (
          SELECT 
            CAST(strftime('%H', timestamp) AS INTEGER) as hour,
            COUNT(*) as hits
          FROM ${BONG_HITS_DATABASE_NAME}
          WHERE timestamp >= '2024-12-24'
          GROUP BY hour
        )
        SELECT 
          SUM(CASE WHEN hour BETWEEN 6 AND 11 THEN hits ELSE 0 END) as morning,
          SUM(CASE WHEN hour BETWEEN 12 AND 17 THEN hits ELSE 0 END) as afternoon,
          SUM(CASE WHEN hour BETWEEN 18 AND 23 THEN hits ELSE 0 END) as evening,
          SUM(CASE WHEN hour < 6 OR hour = 0 THEN hits ELSE 0 END) as night
        FROM HourlyHits
      `;

      const [result] = await db.getAllAsync<DatabaseRow>(query);

      return {
        success: true,
        data: {
          morning: Number(result?.morning || 0),
          afternoon: Number(result?.afternoon || 0),
          evening: Number(result?.evening || 0),
          night: Number(result?.night || 0)
        }
      };
    } catch (error) {
      return this.handleError(error, 'getTimeDistribution');
    }
  }

  async getDailyAverageDatapoints(): Promise<DatabaseResponse<ChartDataPoint[]>> {
    try {
      console.log('[DataService] Fetching daily average datapoints...');
      const db = await this.getDatabase();
      const results = await db.getAllAsync<DatabaseRow>(`
        SELECT 
          strftime('%H', timestamp) as hour,
          COUNT(*) as count
        FROM ${BONG_HITS_DATABASE_NAME}
        WHERE timestamp >= '2024-12-24'
        GROUP BY hour
        ORDER BY hour
      `);

      console.log('[DataService] Raw daily average results:', results);

      const processedData = Array.from({ length: 24 }, (_, i) => ({
        label: i.toString().padStart(2, '0'),
        value: 0
      }));

      results.forEach(row => {
        const hourIndex = Number(row.hour);
        if (hourIndex >= 0 && hourIndex < 24) {
          processedData[hourIndex].value = Number(row.count || 0);
        }
      });

      console.log('[DataService] Processed daily average data:', processedData);
      return {
        success: true,
        data: processedData
      };

    } catch (error) {
      return this.handleError(error, 'getDailyAverageDatapoints');
    }
  }

  async cleanup() {
    console.log('[DataService] Starting cleanup...');
    if (this.db) {
      try {
        await this.db.closeAsync();
        this.db = null;
        this.initializationPromise = null;
        console.log('[DataService] Cleanup completed successfully');
      } catch (error) {
        console.error('[DataService] Error during cleanup:', error);
        throw error;
      }
    }
  }
} 

================================================================================
File: src/services/StrainService.ts
================================================================================

import { openDatabaseAsync, SQLiteDatabase } from "expo-sqlite";
import { STRAINS_DATABASE_NAME, SAMPLE_STRAINS } from "../constants";
import { Strain } from "../dbManager";

export interface StrainSearchFilters {
  geneticType?: string;
  effects?: string[];
  minTHC?: number;
  maxTHC?: number;
  sort?: 'rating' | 'name' | 'thc';
}

export interface PaginationParams {
  page: number;
  limit: number;
}

export interface StrainSearchResult {
  success: boolean;
  data: Strain[];
  error?: string;
  total: number;
  currentPage: number;
  totalPages: number;
  hasMore: boolean;
}

export class StrainService {
  private static instance: StrainService;
  private db: SQLiteDatabase | null = null;
  private initializationPromise: Promise<void> | null = null;

  private constructor() {}

  static getInstance(): StrainService {
    if (!StrainService.instance) {
      StrainService.instance = new StrainService();
    }
    return StrainService.instance;
  }

  private async initialize(): Promise<void> {
    try {
      console.log('[StrainService] Initializing database...');
      this.db = await openDatabaseAsync(STRAINS_DATABASE_NAME);

      // Drop existing table to ensure clean state
      await this.db.execAsync(`DROP TABLE IF EXISTS ${STRAINS_DATABASE_NAME};`);

      // Create table and indexes
      await this.db.execAsync(`
        PRAGMA journal_mode = WAL;
        
        CREATE TABLE IF NOT EXISTS ${STRAINS_DATABASE_NAME} (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT NOT NULL,
          overview TEXT,
          genetic_type TEXT,
          lineage TEXT,
          thc_range TEXT,
          cbd_level TEXT,
          dominant_terpenes TEXT,
          qualitative_insights TEXT,
          effects TEXT,
          negatives TEXT,
          uses TEXT,
          thc_rating REAL,
          user_rating REAL,
          combined_rating REAL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE INDEX IF NOT EXISTS idx_strain_name 
        ON ${STRAINS_DATABASE_NAME}(name);
        
        CREATE INDEX IF NOT EXISTS idx_strain_genetic_type 
        ON ${STRAINS_DATABASE_NAME}(genetic_type);
        
        CREATE INDEX IF NOT EXISTS idx_strain_effects 
        ON ${STRAINS_DATABASE_NAME}(effects);
        
        CREATE INDEX IF NOT EXISTS idx_strain_rating 
        ON ${STRAINS_DATABASE_NAME}(combined_rating DESC);
      `);

      // Insert all sample strains
      console.log('[StrainService] Inserting', SAMPLE_STRAINS.length, 'sample strains...');
      
      for (const strain of SAMPLE_STRAINS) {
        try {
          await this.db.runAsync(
            `INSERT INTO ${STRAINS_DATABASE_NAME} (
              name, overview, genetic_type, lineage, thc_range,
              cbd_level, dominant_terpenes, qualitative_insights,
              effects, negatives, uses, thc_rating,
              user_rating, combined_rating
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);`,
            [
              strain.name,
              strain.overview,
              strain.genetic_type,
              strain.lineage,
              strain.thc_range,
              strain.cbd_level,
              strain.dominant_terpenes,
              strain.qualitative_insights,
              strain.effects,
              strain.negatives,
              strain.uses,
              strain.thc_rating,
              strain.user_rating,
              strain.combined_rating
            ]
          );
        } catch (insertError) {
          console.error(`[StrainService] Failed to insert strain ${strain.name}:`, insertError);
          // Continue with next strain instead of failing completely
        }
      }

      // Verify the data
      const [finalCount] = await this.db.getAllAsync<{ count: number }>(
        `SELECT COUNT(*) as count FROM ${STRAINS_DATABASE_NAME}`
      );
      console.log('[StrainService] Database initialized with', finalCount?.count || 0, 'strains');

    } catch (error) {
      console.error('[StrainService] Failed to initialize database:', error);
      this.db = null;
      throw error;
    }
  }

  private async getDatabase(): Promise<SQLiteDatabase> {
    if (!this.db) {
      if (!this.initializationPromise) {
        this.initializationPromise = this.initialize();
      }
      await this.initializationPromise;
      this.initializationPromise = null;
    }

    if (!this.db) {
      throw new Error('Database initialization failed');
    }

    return this.db;
  }

  private parseTHCRange(thcRange: string): { min: number; max: number } {
    const matches = thcRange.match(/(\d+(?:\.\d+)?)-(\d+(?:\.\d+)?)/);
    if (matches) {
      return {
        min: parseFloat(matches[1]),
        max: parseFloat(matches[2])
      };
    }
    return { min: 0, max: 0 };
  }

  async searchStrains(
    query: string = '',
    filters: StrainSearchFilters = {},
    pagination: PaginationParams = { page: 1, limit: 20 }
  ): Promise<StrainSearchResult> {
    try {
      const db = await this.getDatabase();
      const { page, limit } = pagination;
      const offset = (page - 1) * limit;
      
      let whereConditions: string[] = [];
      let params: any[] = [];

      // Add search query conditions
      if (query.trim()) {
        const searchTerms = query.trim().split(/\s+/);
        searchTerms.forEach(term => {
          whereConditions.push('(name LIKE ? OR effects LIKE ? OR genetic_type LIKE ? OR uses LIKE ?)');
          const searchTerm = `%${term}%`;
          params.push(searchTerm, searchTerm, searchTerm, searchTerm);
        });
      }

      // Add filter conditions
      if (filters.geneticType) {
        whereConditions.push('genetic_type = ?');
        params.push(filters.geneticType);
      }

      if (filters.effects?.length) {
        filters.effects.forEach(effect => {
          whereConditions.push('effects LIKE ?');
          params.push(`%${effect}%`);
        });
      }

      if (filters.minTHC !== undefined) {
        whereConditions.push('CAST(SUBSTR(thc_range, 1, INSTR(thc_range, "-")-1) AS FLOAT) >= ?');
        params.push(filters.minTHC);
      }

      if (filters.maxTHC !== undefined) {
        whereConditions.push('CAST(SUBSTR(thc_range, INSTR(thc_range, "-")+1) AS FLOAT) <= ?');
        params.push(filters.maxTHC);
      }

      const whereClause = whereConditions.length 
        ? `WHERE ${whereConditions.join(' AND ')}` 
        : '';

      // Get total count
      const [countResult] = await db.getAllAsync<{ total: number }>(
        `SELECT COUNT(*) as total FROM ${STRAINS_DATABASE_NAME} ${whereClause}`,
        params
      );

      // Get filtered results
      const results = await db.getAllAsync<Strain>(
        `SELECT * FROM ${STRAINS_DATABASE_NAME} 
         ${whereClause} 
         ORDER BY ${this.getSortOrder(filters.sort)}
         LIMIT ? OFFSET ?`,
        [...params, limit, offset]
      );

      const total = countResult?.total || 0;
      const totalPages = Math.ceil(total / limit);

      return {
        success: true,
        data: results,
        total,
        currentPage: page,
        totalPages,
        hasMore: (page * limit) < total
      };

    } catch (error) {
      console.error('[StrainService] Search error:', error);
      return {
        success: false,
        data: [],
        error: error instanceof Error ? error.message : 'Search failed',
        total: 0,
        currentPage: 1,
        totalPages: 1,
        hasMore: false
      };
    }
  }

  private getSortOrder(sort?: StrainSearchFilters['sort']): string {
    switch (sort) {
      case 'name':
        return 'name ASC';
      case 'thc':
        return 'CAST(SUBSTR(thc_range, 1, INSTR(thc_range, "-")-1) AS FLOAT) DESC';
      case 'rating':
      default:
        return 'combined_rating DESC';
    }
  }

  async getStrainById(id: number): Promise<Strain | null> {
    try {
      const db = await this.getDatabase();
      const [strain] = await db.getAllAsync<Strain>(
        `SELECT * FROM ${STRAINS_DATABASE_NAME} WHERE id = ? LIMIT 1`,
        [id]
      );
      return strain || null;
    } catch (error) {
      console.error('[StrainService] Error getting strain by id:', error);
      return null;
    }
  }

  async getPopularStrains(limit: number = 10): Promise<Strain[]> {
    try {
      const db = await this.getDatabase();
      const results = await db.getAllAsync<Strain>(
        `SELECT * FROM ${STRAINS_DATABASE_NAME} ORDER BY combined_rating DESC LIMIT ?`,
        [limit]
      );
      return results || [];
    } catch (error) {
      console.error('[StrainService] Error getting popular strains:', error);
      return [];
    }
  }

  async getRelatedStrains(strain: Strain): Promise<Strain[]> {
    try {
      const db = await this.getDatabase();
      // Get strains with similar genetic type and effects
      const results = await db.getAllAsync<Strain>(
        `SELECT * FROM ${STRAINS_DATABASE_NAME}
         WHERE id != ? 
         AND (
           genetic_type = ? 
           OR effects LIKE ?
         )
         ORDER BY combined_rating DESC
         LIMIT 5`,
        [strain.id!, strain.genetic_type, `%${strain.effects.split(',')[0]}%`]
      );
      return results || [];
    } catch (error) {
      console.error('[StrainService] Error getting related strains:', error);
      return [];
    }
  }

  async getStrainCategories(): Promise<{ [key: string]: number }> {
    try {
      const db = await this.getDatabase();
      const results = await db.getAllAsync<{ genetic_type: string; count: number }>(
        `SELECT genetic_type, COUNT(*) as count
         FROM ${STRAINS_DATABASE_NAME}
         GROUP BY genetic_type`
      );
      
      return results.reduce((acc, { genetic_type, count }) => {
        if (genetic_type) {
          acc[genetic_type] = count;
        }
        return acc;
      }, {} as { [key: string]: number });
    } catch (error) {
      console.error('[StrainService] Error getting strain categories:', error);
      return {};
    }
  }

  async cleanup(): Promise<void> {
    if (this.db) {
      try {
        await this.db.closeAsync();
        this.db = null;
        this.initializationPromise = null;
      } catch (error) {
        console.error('[StrainService] Error during cleanup:', error);
        throw error;
      }
    }
  }
}

// Export a default instance
export default StrainService.getInstance(); 

================================================================================
File: src/types.ts
================================================================================

// Core data types
export interface BongHit {
    id?: number;
    timestamp: string;
    duration_ms: number;
    intensity?: number;
    notes?: string;
}

export interface BongHitStats {
    averageDuration: number;
    longestHit: number;
    totalHits?: number;
}

export interface DailyStats {
    date: string;
    hitCount: number;
    averageDuration: number;
}

export interface AverageHourCount {
    count: number;
    hourOfDay: string;
}

// Chart-specific types
export interface ChartDataPoint {
    label: string;
    value: number;
}

export interface ChartDataset {
    data: number[];
    color: (opacity?: number) => string;
    strokeWidth: number;
}

export interface ChartData {
    labels: string[];
    datasets: ChartDataset[];
    legend?: string[];
}

// Database types
export interface DatabaseRow {
    timestamp?: string;
    duration_ms?: number;
    day?: string;
    month?: string;
    hour?: string;
    hit_count?: number;
    count?: number;
    avg_duration?: number;
    max_duration?: number;
    total_hits?: number;
    avg_hits_per_day?: number;
    avg_duration_per_day?: number;
    daily_hits?: number;
    days_with_data?: number;
    weekday_avg?: number;
    weekday_total?: number;
    weekend_avg?: number;
    weekend_total?: number;
    peak_day_hits?: number;
    lowest_day_hits?: number;
    most_active_hour?: number;
    least_active_hour?: number;
    total_duration?: number;
    avg_hits_per_hour?: number;
    hits_std_dev?: number;
    // Fields from time distribution query
    morning?: number;
    afternoon?: number;
    evening?: number;
    night?: number;
    // Fields from usage stats query
    average_hits_per_day?: number;
    shortest_hit?: number;
    longest_hit?: number;
    consistency?: number;
}

export interface UsageStats {
    // Hit counts
    averageHitsPerDay: number;
    totalHits: number;
    peakDayHits: number;
    lowestDayHits: number;
    
    // Duration stats
    averageDuration: number;  // in ms
    longestHit: number;      // in ms
    shortestHit: number;     // in ms
    
    // Time patterns
    mostActiveHour: number;  // 0-23
    leastActiveHour: number; // 0-23
    
    // Derived metrics
    totalDuration: number;   // total time in ms
    averageHitsPerHour: number;
    consistency: number;     // standard deviation of daily hits

    // Weekday vs Weekend stats
    weekdayStats: WeekdayStats;
}

// Add new interfaces for time distribution
export interface TimeDistribution {
    morning: number;
    afternoon: number;
    evening: number;
    night: number;
}

export interface WeekdayStats {
    weekday: { avg: number; total: number; };
    weekend: { avg: number; total: number; };
}

// Component Props interfaces
export interface WeeklyChartProps {
    data: ChartDataPoint[];
    onPress?: () => void;
}

export interface MonthlyChartProps {
    data: ChartDataPoint[];
    onPress?: () => void;
}

export interface NotificationProps {
    averageHits: number;
    percentageChange: number;
    onDismiss: () => void;
}

export interface DailyAverageCardProps {
    data: ChartDataPoint[];
    averageHits: number;
    onPress?: () => void;
}

export interface WeeklyUsageBannerProps {
    weeklyData: ChartDataPoint[];
    average: number;
    percentageChange: number;
    onPress?: () => void;
}

// API Response types
export interface DatabaseResponse<T> {
    success: boolean;
    data?: T;
    error?: string;
}

export interface UsageAnalytics {
    dailyAverage: number;
    weeklyAverage: number;
    percentageChange: number;
    lastUpdated: string;
}

// State management types
export interface DataState {
    weeklyData: ChartDataPoint[];
    monthlyData: ChartDataPoint[];
    usageStats: UsageStats;
    timeDistribution: TimeDistribution;
    isLoading: boolean;
    error: string | null;
}

================================================================================
File: src/utils/animations.ts
================================================================================

import { useCallback } from 'react';
import { Platform } from 'react-native';
import {
  FadeIn,
  FadeInDown,
  FadeInUp,
  withSpring,
  withTiming,
  WithTimingConfig,
  Easing,
  useSharedValue,
  useAnimatedStyle,
} from 'react-native-reanimated';

// Optimized spring configuration
export const SPRING_CONFIG = {
  damping: 10,
  mass: 0.3,
  stiffness: 100,
  restDisplacementThreshold: 0.01,
  restSpeedThreshold: 0.01,
} as const;

// Optimized timing configuration
export const TIMING_CONFIG: WithTimingConfig = {
  duration: 300,
  easing: Easing.bezier(0.25, 0.1, 0.25, 1),
} as const;

// Shared animation factory
export const createSharedAnimation = (delay: number = 0) => {
  return Platform.select({
    ios: FadeInDown.duration(300)
      .springify()
      .delay(delay)
      .damping(SPRING_CONFIG.damping)
      .mass(SPRING_CONFIG.mass),
    android: FadeIn.duration(250)
      .delay(delay)
  });
};

// Optimized press animation hook
export const useAnimatedPress = (scale: number = 0.98) => {
  const pressed = useSharedValue(false);
  
  const animatedStyle = useAnimatedStyle(() => {
    'worklet';
    return {
      transform: [{
        scale: withSpring(
          pressed.value ? scale : 1, 
          SPRING_CONFIG
        )
      }]
    };
  });

  return {
    animatedStyle,
    pressHandlers: {
      onPressIn: useCallback(() => {
        pressed.value = true;
      }, []),
      onPressOut: useCallback(() => {
        pressed.value = false;
      }, [])
    }
  };
};

// Gradient optimization utilities
export const GRADIENT_PROPS = Platform.select({
  ios: {
    shouldRasterizeIOS: true,
  },
  android: {
    renderToHardwareTextureAndroid: true,
  },
});

// Chart animation configuration
export const CHART_ANIMATION_CONFIG = {
  animationEnabled: true,
  animationDuration: 300,
  animationEasing: Easing.ease,
  propsForLabels: {
    fontSize: 10,
    fontWeight: '400'
  }
} as const;

// Optimized layout animation configuration
export const LAYOUT_ANIMATION_CONFIG = {
  damping: 10,
  mass: 0.3,
  stiffness: 100
} as const; 

================================================================================
File: src/utils/filters.ts
================================================================================

import { StrainSearchFilters } from '../services/StrainService';

export const hasActiveFilters = (filters: StrainSearchFilters): boolean => {
  return !!(
    filters.geneticType ||
    (filters.effects && filters.effects.length > 0) ||
    filters.minTHC ||
    filters.maxTHC ||
    (filters.sort && filters.sort !== 'rating')
  );
}; 

================================================================================
File: tsconfig.json
================================================================================

{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "paths": {
      "@/*": [
        "./*"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts"
  ]
}